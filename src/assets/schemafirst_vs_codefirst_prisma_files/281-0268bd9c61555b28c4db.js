"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[281],{70126:function(e,t,r){var a=r(85893),n=(r(67294),r(74617)),i=r(54389),o=r(40338),s=r(86739),p=r(69829),h=r(41664);t.Z=function(e){var t,r,l=e.article,d=e.hideAuthor,c=e.hideImage,m=~~(l.content.split(" ").length/200),g="".concat((0,o.Z)(l.content).slice(0,80),"..."),u=i.Z[l.data.author];return(0,a.jsx)(h.default,{href:"/".concat(l.path),children:(0,a.jsx)("a",{children:(0,a.jsxs)("article",{className:"flex flex-col justify-between bg-white dark:bg-gray-700 rounded-lg shadow p-4 h-full hover:ring-2",children:[c?null:(0,a.jsx)("div",{className:"object-contain mb-3 rounded-lg shadow overflow-hidden",children:(0,a.jsx)(s.Z,{srcWebp:(0,p.WE)(null!==(t=l.data.image)&&void 0!==t?t:"",l),src:(0,p.zk)(null!==(r=l.data.image)&&void 0!==r?r:"",l),alt:g,width:"100%",height:200,className:"rounded-lg shadow object-cover flex-auto h-full w-full"})}),(0,a.jsx)("h3",{className:"py-0",children:l.data.title}),(0,a.jsx)("span",{children:g}),d?null:(0,a.jsx)(n.Z,{author:u}),(0,a.jsxs)("span",{children:[m," ",1===m?"minute":"minutes"," read \u2022"," ",new Date(l.data.date).toLocaleDateString("en-US",{day:"2-digit",month:"long",year:"2-digit"})]})]})})},l.path)}},74617:function(e,t,r){var a=r(85893);r(67294);t.Z=function(e){var t=e.author,r=e.className;return(0,a.jsxs)("div",{className:"flex items-center my-2 ".concat(r),children:[(0,a.jsx)("a",{href:"authors/".concat(t.key),title:t.name,onClick:function(e){e.stopPropagation()},children:(0,a.jsx)("img",{width:30,height:30,src:"/author_photos/".concat(t.photo,"_60x60.png"),className:"rounded-full ring-2 ring-offset-2  bg-white",alt:t.name})}),(0,a.jsx)("span",{className:"ml-4",children:t.name})]})}},21408:function(e,t,r){var a=r(4942),n=r(85893),i=r(8901);function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){(0,a.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}t.Z=function(e){var t=e,r=(t.linkTo,(0,i.Z)(t,["linkTo"])),a="rounded shadow px-3 py-2 bg-gradient-to-r from-blue-400 to-blue-700 text-white ".concat(e.className);return"linkTo"in e?(0,n.jsx)("a",s(s({},r),{},{href:e.linkTo,className:a})):(0,n.jsx)("button",s(s({},r),{},{className:a}))}},86739:function(e,t,r){var a=r(4942),n=r(8901),i=r(85893),o=(r(67294),r(70131)),s=r(69829),p=r(12307),h=r(54075);function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}var d=function(e){var t=e.srcWebp,r=e.src,a=e.alt,n=e.className;return(0,i.jsxs)("picture",{children:[t?(0,i.jsx)("source",{srcSet:t,type:"image/webp"}):null,(0,i.jsx)("source",{srcSet:r,type:(0,s.ls)(r)}),(0,i.jsx)("img",{src:r,alt:a,className:n})]})},c=function(e){var t,r,a=e.src,s=e.srcWebp,l=e.alt,c=(0,n.Z)(e,["src","srcWebp","alt"]),m=(0,p.eJ)(!1),g="number"===typeof c.ratio?"".concat(100/c.ratio,"%"):"".concat(((null===(t=c.ratio)||void 0===t?void 0:t[1])||1)/((null===(r=c.ratio)||void 0===r?void 0:r[0])||2)*100,"%");return(0,i.jsx)(h.Z,{isZoomed:m.get(),onZoomChange:m.set,wrapStyle:{display:"block"},overlayBgColorEnd:"rgba(0, 0, 0, 0.95)",children:(0,i.jsx)(o.df,{triggerOnce:!0,children:function(e){var t=e.ref,r=e.inView;return(0,i.jsx)("div",{ref:t,style:{"--ratio":g},className:"w-full ratio bg-transparent ".concat(c.className),children:r?m.get()?(0,i.jsx)("img",{src:c.srcOriginal,alt:l,className:"ratio-child w-full ".concat(c.className," rounded-none")}):(0,i.jsx)(d,{src:a,srcWebp:s,alt:l,className:"ratio-child w-full ".concat(c.className)}):(0,i.jsx)("div",{className:"w-full ratio-child bg-gray-700 ".concat(c.className)})})}})})};t.Z=function(e){var t,r=e.src,s=e.srcWebp,p=e.alt,h=(0,n.Z)(e,["src","srcWebp","alt"]),m=null!==(t=h.className)&&void 0!==t?t:"";return h.ratio?(0,i.jsx)(c,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){(0,a.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({src:r,srcWebp:s,alt:p,className:m},h)):(0,i.jsx)(o.df,{triggerOnce:!0,children:function(e){var t=e.inView,a=e.ref;return(0,i.jsx)("div",{style:{height:h.height},ref:a,children:t?(0,i.jsx)(d,{src:r,srcWebp:s,className:m,alt:p}):null})}})}},86281:function(e,t,r){r.d(t,{Z:function(){return x}});var a=r(4942),n=r(8901),i=r(85893),o=r(67294),s=r(41664),p=r(9008);function h(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?h(Object(r),!0).forEach((function(t){(0,a.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):h(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var d,c="UA-127595045-1",m=function(e){e.children;var t=(0,n.Z)(e,["children"]),r="@GraphQLEditor",a=l(l({description:"No matter if you want to learn how to build your first GraphQL API or looking for more advanced information about GraphQL  Mutations, Subscriptions, Resolvers. Graph QL Editor Blog will help you get the knowledge you need. Find out everything about Graph QL with our comprehensive tutorials and examples.",image:"/",type:"website",keywords:"graphql, editor, blog, tutorial, rest, react",locale:"en_US",twitter:{site:r,creator:r},author:r,siteName:"GraphQL Blog",url:"https://blog.graphqleditor.com"},t),{},{title:t.title?"".concat(t.title," | GraphQL Blog"):"GraphQL queries, mutations & subscriptions | GraphQL Blog"}),o=a.title,s=a.description,h=a.author,d=a.image,m=a.type,g=a.keywords,u=a.twitter,w=a.url;return Array.isArray(g)&&(g=g.join(", ")),(0,i.jsxs)(p.default,{children:[(0,i.jsx)("title",{children:o}),(0,i.jsx)("link",{rel:"icon",href:"/favicon.ico",type:"image/x-icon"}),(0,i.jsx)("meta",{charSet:"utf-8"}),(0,i.jsx)("meta",{name:"viewport",content:"initial-scale=1.0, width=device-width"}),(0,i.jsx)("meta",{name:"description",content:s}),(0,i.jsx)("meta",{name:"author",content:h}),(0,i.jsx)("meta",{property:"og:site_name",content:o}),(0,i.jsx)("meta",{property:"og:title",content:o}),(0,i.jsx)("meta",{property:"og:description",content:s}),(0,i.jsx)("meta",{property:"og:image",content:"".concat(w).concat(d)}),(0,i.jsx)("meta",{property:"og:image:secure_url",content:"".concat(w).concat(d)}),(0,i.jsx)("meta",{property:"og:type",content:m}),(0,i.jsx)("meta",{name:"keywords",content:g}),(0,i.jsx)("meta",{name:"robots",content:"index, follow, "}),(0,i.jsx)("meta",{name:"twitter:title",content:o}),(0,i.jsx)("meta",{name:"twitter:site",content:u.site}),(0,i.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,i.jsx)("meta",{name:"twitter:image",content:d}),(0,i.jsx)("meta",{name:"twitter:description",content:s}),(0,i.jsx)("meta",{name:"twitter:creator",content:u.creator}),(0,i.jsx)("link",{rel:"preconnect",href:"https://fonts.gstatic.com"}),(0,i.jsx)("link",{href:"https://fonts.googleapis.com/css2?family=Fira+Sans:wght@300;500&display=swap",rel:"stylesheet"}),(0,i.jsx)("script",{async:!0,src:"https://www.googletagmanager.com/gtag/js?id=".concat(c)}),(0,i.jsx)("script",{type:"text/javascript",dangerouslySetInnerHTML:{__html:"\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag('js', new Date());\n\n    gtag('config', '".concat(c,"');")}})]})},g=function(e){var t=e.children;return(0,i.jsx)("nav",{className:"flex fixed z-10 top-0 items-center justify-between p-4 w-full h-16 bg-white dark:bg-gray-700 shadow ",children:t})},u=r(21408),w=r(12307),f="perfers-dark",y=localStorage.getItem(f),b=y?{true:!0,false:!1}[y]:window.matchMedia("(prefers-color-scheme: dark)").matches;d=(0,w.eK)(b);var v=function(){return d.set((function(e){return!e}))},z=function(){var e=(0,w.eJ)(d);return(0,o.useEffect)((function(){document.body.className=e.get()?"dark":"light",localStorage.setItem(f,e.get().toString())}),[e.get()]),(0,i.jsx)("button",{className:"m-4 text-center w-8 h-8 ring rounded-full cursor-pointer",onClick:v,children:e.get()?"\ud83c\udf1e":"\ud83c\udf19"})},k=function(e){var t=e.search,r=e.className,a=e.focus,n=(0,o.useRef)(null);return(0,o.useEffect)((function(){var e;a&&(null===(e=n.current)||void 0===e||e.focus())}),[]),(0,i.jsx)("input",{type:"text",className:"shadow rounded px-3 py-2 dark:bg-gray-800 dark:text-white w-80 ".concat(r),placeholder:"\ud83d\udd0e\ufe0e   Search for articles",onChange:function(e){return t.set(e.target.value)},ref:n})},P=r(74221),q=JSON.parse('[{"content":"\\r\\nLast time we [put together a pretty basic schema](https://blog.graphqleditor.com/guide-graphql-schema/), so let\'s take a look at how it works. First just to make navigating everything later a bit easier let\u2019s look at versions. For that we check out the manage version option, so far there isn\'t anything there so let\u2019s make it official and submit what we made last time as version 1.0 of our project. \\r\\n\\r\\n![Deploy new version](version.gif)\\r\\n\\r\\nWhile this might not seem like much right now it will make things a lot easier down the line (or at least it does for me while writing these).\\r\\n\\r\\n## Mock backend\\r\\n\\r\\n\\r\\nNow it\'s time to check out the **Mock Backed feature** which lets you actually see how things work. The little rocket icon (\ud83d\ude80) does just that. Before we get to play around with it we need to deploy it. \\r\\n\\r\\n![Deploy backend](mock.gif)\\r\\n\\r\\nHere on the left we can see fakeable types and all we need to do now is write a query (you can even copy paste it) and after that press play. As you can see our query and schema work and we got a few fake responses to show for it. \\r\\n\\r\\n![Query](query.gif)\\r\\n\\r\\n\\r\\nWe can adjust what is faked by clicking the email and message strings on the left. You can select what it will fake to get a better idea of what you\u2019d get with that query, I chose :\\r\\n- email addresses for emails (duh),\\r\\n- random words for messages.\\r\\n\\r\\nYou can also manually add values if that better fits what you\u2019re aiming for.\\r\\n\\r\\n![Values](values.gif)\\r\\n\\r\\n\\r\\nYou can also probably spot some of the additional features:\\r\\n- you can **prettify queries** which makes them easier to read,\\r\\n- **merge multiple queries** into one and take advantage of autocomplete support,\\r\\n- there\u2019s also a **query history** feature which lets you go through your queries in this session.\\r\\n\\r\\n![Prettify and history](prettify.gif)\\r\\n\\r\\nWhile these might not seem particularly useful now, bear in mind so far we\u2019ve been dealing with a very basic schema and a very simple query. As you can imagine it won\'t always be as simple as that and as the schema gets more robust things will get more complicated. We\u2019re probably going to look at doing just that next time, so see you then.\\r\\n\\r\\n","data":{"title":"Mock Backend - The Beginner\'s Guide to GraphQL Editor p.2","date":"2021-04-30T15:50:00.284Z","image":"feat_mock.png","author":"Michal"},"path":"guide-mock-backend","images":{"feat_mock.optimized.png":{"width":600,"height":252,"webpPath":"feat_mock.optimized.webp","optimizedPath":"feat_mock.optimized.optimized.png"},"feat_mock.png":{"width":1000,"height":420,"webpPath":"feat_mock.webp","optimizedPath":"feat_mock.optimized.png"},"mock.gif":{"width":800,"height":402,"webpPath":"mock.webp","optimizedPath":"mock.optimized.gif.png"},"mock.optimized.gif.png":{"width":600,"height":302,"webpPath":"mock.optimized.gif.webp","optimizedPath":"mock.optimized.gif.optimized.png"},"prettify.gif":{"width":800,"height":400,"webpPath":"prettify.webp","optimizedPath":"prettify.optimized.gif.png"},"prettify.optimized.gif.png":{"width":600,"height":300,"webpPath":"prettify.optimized.gif.webp","optimizedPath":"prettify.optimized.gif.optimized.png"},"query.gif":{"width":800,"height":403,"webpPath":"query.webp","optimizedPath":"query.optimized.gif.png"},"query.optimized.gif.png":{"width":600,"height":302,"webpPath":"query.optimized.gif.webp","optimizedPath":"query.optimized.gif.optimized.png"},"values.gif":{"width":800,"height":401,"webpPath":"values.webp","optimizedPath":"values.optimized.gif.png"},"values.optimized.gif.png":{"width":600,"height":301,"webpPath":"values.optimized.gif.webp","optimizedPath":"values.optimized.gif.optimized.png"},"version.gif":{"width":800,"height":401,"webpPath":"version.webp","optimizedPath":"version.optimized.gif.png"},"version.optimized.gif.png":{"width":600,"height":301,"webpPath":"version.optimized.gif.webp","optimizedPath":"version.optimized.gif.optimized.png"}}},{"content":"\\r\\n\\r\\nGraphQL Editor is a tool for both advanced users and those only starting to work on GraphQL APIs.\\r\\n\\r\\nOn the off chance you don\'t know anything about GraphQL Editor it\'s a web tool that lets you see and better understand how the schema and various elements within it work, even if you\u2019re not a programmer. \\r\\n\\r\\nYou can even build a schema by joining the visualized blocks and having GraphQL Editor generate the code for them. That\u2019s just the basics and tool has lots of other useful features a bunch of them added in the recent [GraphQL Editor v. 4.5 update](https://blog.graphqleditor.com/graphql-editor-v45/).\\r\\n\\r\\n### Schema\\r\\nSo let\u2019s try it out and set up a very basic schema that should be easy to grasp even for someone completely new to GraphQL. Let\u2019s start by setting up the contact form input:\\r\\n- Let\'s add strings (email and message),\\r\\n- we want make them required.\\r\\n\\r\\n![Schema](string.gif)\\r\\n\\r\\n### Creating Mutations\\r\\nNow it\'s time for the types. First let\'s add a mutation, for this sample mutation we will:\\r\\n- add a type & set it as a `mutation`,\\r\\n- make it required,\\r\\n- add boolean.\\r\\n\\r\\n![Mutations](mutation.gif)\\r\\n\\r\\n### Query\\r\\nAll we need now is a query to fetch the data, for that first lets:\\r\\n- make a form type with strings for email and message,\\r\\n![Form](form.gif)\\r\\n- For the query we do the same thing we did before: add type, select `query` and once again make it required.\\r\\n- Now let\'s make it fetch from the form we made above so remember to check required and also check array and array required here as well.\\r\\n![Query](query.gif)\\r\\n\\r\\n\\r\\n## And it\'s done\\r\\n\\r\\nAs you can see as we finished this last step it automatically rounds it out as a schema and we can even find out how it looks in the visualization:\\r\\n\\r\\n![Visualization](visual.png)\\r\\n\\r\\nAnd that\u2019s it, you just created a simple GraphQL schema that can fetch two basic values like emails and messages from a database. Obviously, we haven\'t even scratched the surface of what GraphQL Editor can do so hopefully you\u2019ll stick around to see what we do next time.\\r\\n","data":{"title":"GraphQL Schema - The Beginner\'s Guide to GraphQL Editor p.1","date":"2021-04-30T12:15:00.284Z","image":"feat_gqltut.png","author":"Michal"},"path":"guide-graphql-schema","images":{"feat_gqltut.optimized.png":{"width":600,"height":252,"webpPath":"feat_gqltut.optimized.webp","optimizedPath":"feat_gqltut.optimized.optimized.png"},"feat_gqltut.png":{"width":1000,"height":420,"webpPath":"feat_gqltut.webp","optimizedPath":"feat_gqltut.optimized.png"},"form.gif":{"width":763,"height":401,"webpPath":"form.webp","optimizedPath":"form.optimized.gif.png"},"form.optimized.gif.png":{"width":600,"height":315,"webpPath":"form.optimized.gif.webp","optimizedPath":"form.optimized.gif.optimized.png"},"mutation.gif":{"width":800,"height":401,"webpPath":"mutation.webp","optimizedPath":"mutation.optimized.gif.png"},"mutation.optimized.gif.png":{"width":600,"height":301,"webpPath":"mutation.optimized.gif.webp","optimizedPath":"mutation.optimized.gif.optimized.png"},"query.gif":{"width":798,"height":400,"webpPath":"query.webp","optimizedPath":"query.optimized.gif.png"},"query.optimized.gif.png":{"width":600,"height":301,"webpPath":"query.optimized.gif.webp","optimizedPath":"query.optimized.gif.optimized.png"},"string.gif":{"width":796,"height":400,"webpPath":"string.webp","optimizedPath":"string.optimized.gif.png"},"string.optimized.gif.png":{"width":600,"height":302,"webpPath":"string.optimized.gif.webp","optimizedPath":"string.optimized.gif.optimized.png"},"visual.optimized.png":{"width":600,"height":336,"webpPath":"visual.optimized.webp","optimizedPath":"visual.optimized.optimized.png"},"visual.png":{"width":880,"height":493,"webpPath":"visual.webp","optimizedPath":"visual.optimized.png"}}},{"content":"\\r\\nAfter writing about some of the biggest libraries out there I think it\'s time to look at one that hasn\'t been covered as much, namely BaseQL. If we look at its website it says BaseQL lets you quickly create a GraphQL API from your production ready Airtable backend. In short it combines the benefits of Airtable with GraphQL. I\u2019m going to boldly assume that if you\u2019re here you already know a bit about GraphQL so let\u2019s first look at what Airtable is.\\r\\n\\r\\n## Why Airtable?\\r\\n\\r\\nTo put it simple **Airtable is a flexible service which lets you easily create relational datasets**. It\'s like a hybrid of a spreadsheet and a database, you have cells but they can have types like checkbox or drop-down list and can have file attachments, for example images, which can be previewed. Everything is neatly compartmentalized:\\r\\n\\r\\n- **workspace:** an assortment of bases shared among a group of people\\r\\n- **base:** a database with everything you need for the project. You can build it using the customizable templates provided by Airtable, use an existing spreadsheet or database or just make one from scratch.  \\r\\n- **table:** bases consist of one or more tables and tables contain all the information, think of them as spreadsheets but with additional useful features. They can be everything, a sales spreadsheet, a products catalogue or a calendar, really just anything you need.\\r\\n- **fields:** each entry in a table is a field, they provide more versatility than your usual spreadsheet, they\u2019re customizable and there\u2019s a lot of them to choose from: checkboxes, drop down lists, file attachments, URLs and a lot more.\\r\\n\\r\\nWhile there are both more complex programs for database handling (like FileMaker Pro) and simpler services, better suited for casual use (like Google Sheets) Airtable is the closest to a catch all solution that will work best in most cases. Now if you want to use that solution it could be prudent to combine its benefits with those of GraphQL and luckily there\u2019s just the thing for that.\\r\\n\\r\\nAll you need to do is a way to access the data stored in Airtable and that\'s what BaseQL was designed for.\\r\\n\\r\\n![Airtable](airtable.gif)\\r\\n##### Source: [Airtable.com](https://airtable.com/)\\r\\n\\r\\n\\r\\n## BaseQL\\r\\n\\r\\nBaseQL gives you a dynamic GraphQL API for your Airtable bases. This means you will be instantly able to query, search and mutate data from your Airtable bases using GraphQL and all its benefits. The key one being optimization as with GraphQL you get exactly what you wanted and just that, with no over or under fetching. Yes, unlike Airtable you\u2019ll need to know the basics of GraphQL, but you\u2019ll likely find it quite easy to get a hang of and BaseQL even provides you with a playground to test it out on their website. It also does not disturb anyone else in the workgroup who can just continue working on Airtable as usual while you get the data you need. The features are quite simple:\\r\\n\\r\\n- **Advanced GraphiQL Explorer**: it will let you easily browse through the documentation and find exactly the queries you need and build complex ones by selecting them from a panel. It\'s really useful as a learning experience so if getting a hang of GraphQL sounded hard you\u2019ll want to check this out.\\r\\n\\r\\n- **Data fetching**: BaseQL provides you with a lot of tools for querying, filtering, searching and sorting data from your Airtable bases and since it uses GraphQL to do so it\'s all kept efficient. It also supports nested queries, combining multiple arguments in a single query as well as mutations and pagination.\\r\\n\\r\\n- **Integrations**: the real value is not in querying data yourself but using another app for that and BaseQL does just that. It can be integrated with any frontend framework or no-code tool which gives you a ton of possibilities.\\r\\n\\r\\nTo start you need to install the BaseQL app via [Airtable Marketplace (required Airtable PRO)](https://docs.baseql.com/install#airtable-pro) or [using Custom Blocks feature](https://docs.baseql.com/install#custom-blocks-beta).\\r\\n\\r\\n```javascript\\r\\nfetch(\'https://api.baseql.com/airtable/graphql/appuzDcQEvfnkzXjD\', {\\r\\n  method: \'POST\',\\r\\n  headers: {\\r\\n    \'Content-Type\': \'application/json\',\\r\\n    \'Accept\': \'application/json\',\\r\\n    \'Authorization\': \'Bearer SECRET_TOKEN\',\\r\\n  },\\r\\n  body: JSON.stringify({query: \\"{ people: { name } }\\"})\\r\\n})\\r\\n  .then(r => r.json())\\r\\n  .then(data => console.log(\'data returned:\', data));\\r\\n```\\r\\n##### Source: [docs.baseql.com](https://docs.baseql.com/examples/javascript)\\r\\n\\r\\n\\r\\n## Jack of all trades\\r\\n\\r\\nTo summarize Airtable with GraphQL makes for a pretty powerful combination. On the database side you can have anyone work on it and it requires no knowledge of programming at all. On the other side you can focus on building your app knowing that it will be able to fetch data efficiently via BaseQL from your Airtable bases. It gives you a lot of flexibility especially working in a group with different skills and it\'s also a great way to start getting into GraphQL if you want to do so. As mentioned before it\'s not perfect, but as far as working with databases goes it\'s definitely worth a try.\\r\\n\\r\\n\\r\\n","data":{"title":"BaseQL - create a GraphQL API from your Airtable backend","date":"2021-04-29T15:31:00.284Z","image":"feat_baseql.png","author":"Michal"},"path":"baseql-graphql-airtable","images":{"airtable.gif":{"width":600,"height":338,"webpPath":"airtable.webp","optimizedPath":"airtable.optimized.gif.png"},"airtable.optimized.gif.png":{"width":600,"height":338,"webpPath":"airtable.optimized.gif.webp","optimizedPath":"airtable.optimized.gif.optimized.png"},"feat_baseql.optimized.png":{"width":600,"height":252,"webpPath":"feat_baseql.optimized.webp","optimizedPath":"feat_baseql.optimized.optimized.png"},"feat_baseql.png":{"width":1000,"height":420,"webpPath":"feat_baseql.webp","optimizedPath":"feat_baseql.optimized.png"}}},{"content":"\\r\\nGraphQL community is full of great stories about how GraphQL implementation changed a product, made it better and more powerful.  Sometimes GraphQL adoption generates a need for innovation. Just like GraphQL itself, which was created inside Facebook and later publicly released, many companies decide to opensource their GraphQL implementations and make them available to the public, seeing how much it can give to the developer\'s community. This is one of those stories.\\r\\n\\r\\n## How it started\\r\\n\\r\\nIn 2019 Netflix made a decision to implement a federated GraphQL architecture aiming to:\\r\\n- provide a unified API for consumers,\\r\\n- giving their backend developers flexibility,\\r\\n- preserving service isolation.\\r\\n\\r\\nFor a company that has standardized on Spring Boot for backend development, the transition to **the new architecture meant a challenge of adopting GraphQL for many different backend teams across Netflix\'s Java ecosystem**. To call this operation successful it was obvious that teams that were forced to implement GraphQL must have been provided a great developer experience for GraphQL in Spring Boot. That\'s the reason why Domain Graph Service was brought to life.\\r\\n\\r\\n## Domain Graph Service\\r\\n\\r\\n**Domain Graph Service (DGS)** is a framework created internally at Netlfix that simplifies the implementation of standalone and federated GraphQL services for Spring Boot. The framework is built on top of [graphql-java](https://github.com/graphql-java/graphql-java). Despite most of the DGS\'s code is written in Kotlin it\'s primarily designed to be used with Java and its **key features** include things like: \\r\\n- Annotation-based Spring Boot programming model,\\r\\n- Integration with Spring Security,\\r\\n- Gradle Code Generation plugin to create Java/Kotlin types from a GraphQL schema,\\r\\n- A GraphQL client for Java,\\r\\n- Error handling,\\r\\n- Easy integration with GraphQL Federation,\\r\\n- GraphQL subscriptions (WebSockets and SSE),\\r\\n- Automatic support for interface/union types.\\r\\n\\r\\nRealizing how much of a deal it was for their developers, **Netflix decided to open-source the framework** and build a community around it in 2020 (Netflix is using the same OSS components!).\\r\\n\\r\\n![DGS Framework with Netflix and OSS modules](dgs_structure.png)\\r\\n##### Source: [netflixtechblog.com](https://netflixtechblog.com/open-sourcing-the-netflix-domain-graph-service-framework-graphql-for-spring-boot-92b9dcecda18)\\r\\n\\r\\n\\r\\n## Getting started\\r\\n\\r\\nUsing the DGS is very simple. The foundation of the framework is structured around the annotation-based programming model well-known to Spring Boot developers. Let\'s take a look at an example provided by the team working on this project:\\r\\n\\r\\nFirst of all, you need to **define a GraphQL schema**, a simple one like this would work for an example:\\r\\n```graphql\\r\\ntype Query {\\r\\n    shows(titleFilter: String): [Show]\\r\\n}\\r\\n\\r\\ntype Show {\\r\\n    title: String\\r\\n    releaseYear: Int\\r\\n}\\r\\n```\\r\\nOnce your schema is defined the next step is to implement a fetcher and ... that\'s it. This is enough to get your GraphQL endpoint running!\\r\\n\\r\\n```java\\r\\n@DgsComponent\\r\\npublic class ShowsDatafetcher {\\r\\n    \\r\\n    private final List<Show> shows = \\r\\n      List.of(\\r\\n         new Show(\\"Stranger Things\\", 2016),\\r\\n         new Show(\\"Ozark\\", 2017)\\r\\n     );\\r\\n    \\r\\n    @DgsData(parentType = \\"Query\\", field = \\"shows\\")\\r\\n    public List<Show> shows(@InputArgument(\\"titleFilter\\") String titleFilter) {\\r\\n        if(titleFilter == null) {\\r\\n            return shows;\\r\\n        }\\r\\n      \\r\\n        return shows.stream()\\r\\n            .filter(s -> s.getTitle().contains(titleFilter))\\r\\n            .collect(Collectors.toList());\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n##### Source: [netflixtechblog.com](https://netflixtechblog.com/open-sourcing-the-netflix-domain-graph-service-framework-graphql-for-spring-boot-92b9dcecda18)\\r\\n\\r\\n### Try it out\\r\\n\\r\\nIf you would like to try the DGS framework make sure to check out its [official documentation and guides](https://netflix.github.io/dgs/getting-started/) or jump straight into [the DGS repo on GitHub](https://github.com/netflix/dgs-framework/).\\r\\n","data":{"title":"Domain Graph Service (DGS) - open-source GraphQL framework for Spring Boot by Netflix","date":"2021-03-30T08:17:00.284Z","image":"feat_dgs.png","author":"Tomek"},"path":"dgs-java-graphql","images":{"dgs_structure.optimized.png":{"width":600,"height":329,"webpPath":"dgs_structure.optimized.webp","optimizedPath":"dgs_structure.optimized.optimized.png"},"dgs_structure.png":{"width":700,"height":384,"webpPath":"dgs_structure.webp","optimizedPath":"dgs_structure.optimized.png"},"feat_dgs.optimized.png":{"width":600,"height":252,"webpPath":"feat_dgs.optimized.webp","optimizedPath":"feat_dgs.optimized.optimized.png"},"feat_dgs.png":{"width":1000,"height":420,"webpPath":"feat_dgs.webp","optimizedPath":"feat_dgs.optimized.png"}}},{"content":"\\r\\nHey there \ud83d\udc4b,\\r\\n\\r\\nwe have just released a new version of [GraphQL Editor](https://graphqleditor.com/). Version 4.5 is another step closer to our holy grail which is **building cloud-hosted backends (BaaS) with our tool**.\\r\\n\\r\\n## What\'s new in version 4.5\\r\\n\\r\\nBased on feedback from our users we are constantly working to improve GraphQL Editor, so each version includes many small UI/UX and performance improvements. However, some changes are far more important than others and it is around these that version 4.5 revolves:\\r\\n\\r\\n#### Relational view\\r\\nA *Relational View* is a new way to display the GraphQL schema of your project. It was inspired by a PCB board and allows you to easily identify the relationships between elements of your schema and navigate between them.\\r\\n\\r\\n![New GraphQL relational view](pcb.png)\\r\\n\\r\\n#### UI upgrade\\r\\nWe have made some changes to the appearance of the application to improve its reception and usability. We have added the foundation for a *Theme Switching system*. At the moment there is still only one dark theme available, but soon there will be many more!\\r\\n\\r\\n#### Learning zone\\r\\n\\r\\nOne of our main goals is to make the GraphQL Editor a place to work with GraphQL as well as learning it. We place great emphasis on making it possible to learn all the most important aspects of GraphQL through the editor as well as making it very easy to learn all its features. That\'s why we have redesigned the learning experience to make it even more interactive.\\r\\n\\r\\n![GraphQL Editor learning zone](learn.png)\\r\\n\\r\\n#### GitHub integration\\r\\nThe new improved *GitHub integration** allows you to quickly link your account to GraphQL Editor, import/export your GraphQL schemas and work on them in a similar way to GitHub flow.\\r\\n\\r\\n##### **available in Enterprise plan*\\r\\n\\r\\n## What\'s on the roadmap\\r\\nAs I\'ve already mentioned our efforts are currently focused on creating an easy way to build cloud-hosted backends (BaaS) with GraphQL Editor. We are currently working on microservices written in Go and TypeScript (Deno) allowing you to build and host a backend in one of your favorite cloud servers, all without leaving GraphQL Editor.\\r\\n\\r\\nThat\'s all for today, stay tuned for the upcoming 5.0 release!\\r\\n","data":{"title":"GraphQL Editor - new release v. 4.5","date":"2021-03-23T12:20:00.284Z","image":"feat_45.png","author":"Tomek"},"path":"graphql-editor-v45","images":{"feat_45.optimized.png":{"width":600,"height":252,"webpPath":"feat_45.optimized.webp","optimizedPath":"feat_45.optimized.optimized.png"},"feat_45.png":{"width":1000,"height":420,"webpPath":"feat_45.webp","optimizedPath":"feat_45.optimized.png"},"learn.optimized.png":{"width":600,"height":425,"webpPath":"learn.optimized.webp","optimizedPath":"learn.optimized.optimized.png"},"learn.png":{"width":1214,"height":859,"webpPath":"learn.webp","optimizedPath":"learn.optimized.png"},"pcb.optimized.png":{"width":600,"height":344,"webpPath":"pcb.optimized.webp","optimizedPath":"pcb.optimized.optimized.png"},"pcb.png":{"width":990,"height":568,"webpPath":"pcb.webp","optimizedPath":"pcb.optimized.png"}}},{"content":"\\r\\nSoftware as a service (SaaS) is licensing and delivery model in which software is centrally hosted & licensed on a subscription basis. SaaS applications are also known as on-demand or web-based software. \\r\\n\\r\\nDespite being totally different (having a different interface, design and solving totally different problems) there are some mundane things that are common for almost each & every SaaS project. \\r\\n\\r\\nTo become operational each SaaS needs some basic functionalities like:\\r\\n- user authentication,\\r\\n- payments,\\r\\n- billing management,\\r\\n- sending transactional emails,\\r\\n- handling cookie sessions & access tokens,\\r\\n... and the list goes on and on.\\r\\n\\r\\nThese are repetitive tasks that developers need to go through and handle properly to provide the basic functionalities and experience expected by web-based application users. With a huge list of tedious, boring jobs to do in the back of your mind, it\'s hard to focus on the relevant features of your new application.\\r\\n\\r\\nMax Stober, who is a creator of [react-boilerplate](https://github.com/react-boilerplate/react-boilerplate) (27k stars) and co-creator of [styled-components](https://github.com/styled-components/styled-components) (32.5k stars), created Bedrock to solve this problem.\\r\\n\\r\\n## The Bedrock\\r\\n\\r\\n[Bedrock](https://bedrock.mxstbr.com/) is a boilerplate built of the top of the best tools of the JS ecosystem that combined together create *a bedrock* for your new SaaS product. \\r\\n\\r\\nBedrock bases on:\\r\\n- React,\\r\\n- Next.js,\\r\\n- GraphQL.\\r\\n\\r\\nThese three make a foundation for your project that makes it possible to easily bind the rest of the Bedrock components and make them work well together which means you can forget about spending hours to integrate all those tools and libraries to handle:\\r\\n\\r\\n- **User authentication**: Bedrock authenticates users using magic links without having to worry about security and storing passwords,\\r\\n\\r\\n- **Team Account**: Bedrock has a built-in invitations system that allows users to invite their colleagues to their projects (each project has its own billings and members). \\r\\n\\r\\n- **Subscription payments**: with a help of Stripe Checkout, Bedrock is ready to handle any plan you want to have included in your SaaS (monthly, yearly, pay per-seat, etc.),\\r\\n\\r\\n- **GraphQL API & integrations** - enjoy the speed of GraphQL API with Nexus, Prisma & urql, as well as token-based API authentication, allowing users to easily integrate with your product.\\r\\n\\r\\n\\r\\nBesides above mentioned fundamental features Bedrock provides a great development experience by using top-notch tooling the JavaScript ecosystem can offer to your project:\\r\\n\\r\\n- **Type-safety**: with TypeScript onboard don\'t worry about errors, it saves you time catching errors and providing fixes before you run code.\\r\\n\\r\\n- **Scalability**: do not worry about scaling your servers, Next.js got you covered.\\r\\n\\r\\nWhat\'s great about Bedrock is that\'s flexible! If you think you don\'t need some of the tools/libraries that OK as removing most of the optional tools is as simple as deleting a single file or folder (*ESLint, Prettier* etc.). Some of them require deleting code in other files (i.e *Stripe*) but still, it shouldn\'t take more than a couple of minutes. \\r\\n\\r\\n![Bedrock components](bedrock_parts.png)\\r\\n##### Source: [bedrock.mxstbr.com](https://bedrock.mxstbr.com/)\\r\\n\\r\\nWith that part being covered you can focus on the core features of your product and making it awesome. \\r\\n\\r\\n\\r\\n**Bedrock can be pre-ordered for ~150$ per single product license (unlimited products license cost ~900$)**, for this price you will receive a copy of the codebase along with extensive documentation on how to use it to the fullest. It\'s planned to be **released on the 31st of March**.\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Bedrock - modern full-stack Next.js & GraphQL boilerplate","date":"2021-03-18T10:03:00.284Z","image":"feat_bedrock.png","author":"Tomek"},"path":"bedrock","images":{"bedrock_parts.optimized.png":{"width":600,"height":323,"webpPath":"bedrock_parts.optimized.webp","optimizedPath":"bedrock_parts.optimized.optimized.png"},"bedrock_parts.png":{"width":1229,"height":661,"webpPath":"bedrock_parts.webp","optimizedPath":"bedrock_parts.optimized.png"},"feat_bedrock.optimized.png":{"width":600,"height":252,"webpPath":"feat_bedrock.optimized.webp","optimizedPath":"feat_bedrock.optimized.optimized.png"},"feat_bedrock.png":{"width":1000,"height":420,"webpPath":"feat_bedrock.webp","optimizedPath":"feat_bedrock.optimized.png"}}},{"content":"The State of JavaScript is an annual survey that collects data from JS professionals from across the globe. This year\'s edition questioned  23,765 developers in 137 countries about development areas such as:\\r\\n\\r\\n- Front-end frameworks,\\r\\n- Back-end framework\\r\\n- JavaScript flavors,\\r\\n- Testing libraries,\\r\\n- Build tools,\\r\\n- *Data layer*.\\r\\n\\r\\nLet\'s take a look at GraphQL data concluded in the Data layer part of the survey.\\r\\n\\r\\n## Data layer report\\r\\n\\r\\nThe data layer part covers technologies used to transmit and manage data. The users were asked about their awareness, interest, usage experience, and satisfaction with various data layer libraries (including GraphQ) and here are the results.\\r\\n\\r\\n#### The awareness and interest\\r\\n\\r\\nSince becoming publicly available in 2015 GraphQL has received a lot of coverage on the Internet, both positive and negative. The awareness of GraphQL is constantly growing (from 97% to 98% comparing to the previous year) while the interest graph shows a little decline (from 90% to 87%), which seems to be pretty natural for maturing technology.\\r\\n\\r\\n#### The usage of GraphQL\\r\\n\\r\\nThe growth of GraphQL usage among survey responders was the biggest between 2018 and 2019 and it amounted to 40% (from 22%) so it\'s unrealistic to expect the same pace of growth. **In 2020 the usage of GraphQL has gained 6%** which seems to be a fine result, especially when thinking about GraphQL as a somehow mature technology.\\r\\n\\r\\n![Usage](usage.png)\\r\\n\\r\\n#### The satisfaction of GraphQL\\r\\n\\r\\nThe satisfaction of GraphQL remains and nearly the same level.\\r\\nThe advantages and flaws of GraphQL are factually described in various articles, blog posts and talks so users deciding to give GraphQL know what they are signing for. GraphQL has a great community standing behind it, working hard every day to provide solutions, tools and different ways to overcome all its shortcomings. \\r\\n\\r\\n![Satisfaction](satisfaction.png)\\r\\n\\r\\n\\r\\n#### The GraphQL Experience\\r\\n\\r\\nThe general experience observed in past years shows a positive tone. The number of people that never heard, are not interested or wound not use GraphQL has decreased significantly and the latest results show that 88.1% of respondents are either interested in GraphQL or declares that they have already worked with and would do it again.\\r\\n\\r\\n![GraphQL Experience over time](graphql.png)\\r\\n\\r\\n\\r\\nThe below chart presents the Positive vs Negative responses split and the GraphQL results come out very positive. The GraphQL wins significantly in the data layer category.\\r\\n\\r\\n![Positive vs Negative split](posneg.png)\\r\\n\\r\\n\\r\\n## The summary\\r\\n\\r\\nThe data layer space is still in constant movement which makes selecting the right technology for your needs a bit tricky. The survey administrators decided to prepare a data graph that could possibly really help you decide if the technology you are looking into is going in the right direction and ease the process of the decision if you should start seriously thinking about adopting it.\\r\\n\\r\\n\\r\\n![GraphQL over last years graph](change-ot.png)\\r\\n\\r\\nEach of the lines represents different technology and is filled by the data from 2016 to 2020. The higher position on the Y-axis means that the technology has been used by more people, and a point further to the right on the X-axis means more users have used it and would use it again or are interested in learning more about it.\\r\\n\\r\\n\\r\\nOver a couple of last years, GraphQL has ranked up from technology worth keeping an eye on (with low usage, but high satisfaction) to a date later characterizing in high usage and satisfaction which makes it a safe technology to adopt. The general conclusion is that GraphQL and all the technologies, libraries, tools its fuelling are here to stay. \\r\\n\\r\\n---\\r\\n\\r\\n*All graphs and data comes from the StateofJs.com, if you are interested in more details regarding data layer or other JS aspects make sure to visit [2020.stateofjs.com](https://2020.stateofjs.com/en-US/technologies/datalayer/)*\\r\\n","data":{"title":"The state of GraphQL 2020","date":"2021-02-22T14:01:00.284Z","image":"feat_state.png","author":"Tomek"},"path":"state-of-graphql-2020","images":{"change-ot.optimized.png":{"width":600,"height":312,"webpPath":"change-ot.optimized.webp","optimizedPath":"change-ot.optimized.optimized.png"},"change-ot.png":{"width":1495,"height":778,"webpPath":"change-ot.webp","optimizedPath":"change-ot.optimized.png"},"feat_state.optimized.png":{"width":600,"height":252,"webpPath":"feat_state.optimized.webp","optimizedPath":"feat_state.optimized.optimized.png"},"feat_state.png":{"width":1000,"height":420,"webpPath":"feat_state.webp","optimizedPath":"feat_state.optimized.png"},"graphql.optimized.png":{"width":600,"height":255,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":931,"height":396,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"posneg.optimized.png":{"width":600,"height":190,"webpPath":"posneg.optimized.webp","optimizedPath":"posneg.optimized.optimized.png"},"posneg.png":{"width":1544,"height":490,"webpPath":"posneg.webp","optimizedPath":"posneg.optimized.png"},"satisfaction.optimized.png":{"width":600,"height":197,"webpPath":"satisfaction.optimized.webp","optimizedPath":"satisfaction.optimized.optimized.png"},"satisfaction.png":{"width":1458,"height":479,"webpPath":"satisfaction.webp","optimizedPath":"satisfaction.optimized.png"},"usage.optimized.png":{"width":600,"height":194,"webpPath":"usage.optimized.webp","optimizedPath":"usage.optimized.optimized.png"},"usage.png":{"width":1420,"height":459,"webpPath":"usage.webp","optimizedPath":"usage.optimized.png"}}},{"content":"\\r\\nThe big trend for a while now has been GraphQL and its associated technologies growing popularity among the dev community. However there\u2019s also another language that has been making the rounds, namely TypeScript. Last year it became the 4th most popular programming language on GitHub. If you\u2019re looking to get ahead of the curve it\'s probably high time to get to know both and if not it\'s always good to check out what\u2019s new in the community. Anyway let\u2019s take a look at what using Typescript with GraphQL can do for you.\\r\\n\\r\\n## It\'s all in the types\\r\\n\\r\\nTo put it short GraphQL is a query language for APIs, its most touted feature is fetching the exact data you queried for without over or under fetching. I\u2019ve already written a bit about its features so if you\u2019re looking for more info about it you can check it out. Let\u2019s focus more on TypeScript then, it\'s basically a superset of JavaScript. This means all valid JavaScript code is valid TypeScript code and if you know one getting to know the other will be a lot easier. That\u2019s not all as TypeScript is often called JavaScript on steroids because it has a lot of additional features.\\r\\n\\r\\n- **type system**: The key feature is in the name, TypeScript\u2019s type system. This means that unlike JavaScript, TypeScript strictly defines what a given variable can contain. Basically it\'s a set of rules that assigns a type to every variable, function, class, module or object. Everything you write will be checked according to those rules to find errors. If this reminds you of GraphQL and its schema first approach you\u2019re spot on as it\'s also a strongly typed language.\\r\\n\\r\\n- **compilation**: So about those errors, TypeScript offers compile-time checking and strong static typing. You can use a tool like VS Code to get suggestions, error warnings and ways to fix them all while writing the code. It works especially well here simply because the type system strictly defines how everything should work, what variables should have what types etc.\\r\\n\\r\\n- **modern language**: Being a superset of JavaScript means you automatically get everything it has to offer and also everything new it will offer with each update. On top of that you get TypeScript\u2019s own features like classes, enumerated types, interfaces, unions, intersection types and visibility scopes.\\r\\n\\r\\n## The power of two\\r\\n\\r\\nSo both languages use types, but in a different way. As we know with GraphQL you use its Schema Definition Language to build a schema and define types, mutations and queries. Then you also need to write resolvers, which are just JavaScript functions so they don\'t carry over GraphQL types from the schema. This can mean it may not match the types from other sources of data, like from Apollo for example. It can be solved by using a language which supports types, like (surprise) TypeScript. This way your GraphQL resolvers will be typed (with args, parent type, inputs and return value) and you can use your type models and have everything type safe from API to database. GraphQL will handle types for the schema and Typescript for the resolvers. Sounds pretty rosy, but you\u2019re probably thinking about writing all this and how much time and effort that would take.\\r\\n\\r\\n![Fusion of GraphQL and TypeScript](fusion.png)\\r\\n\\r\\n## TypeGraphQL\\r\\n\\r\\nIf only there was a way to make it all easier. Well as you might\u2019ve guessed it we\u2019re in luck there\'s a little thing which can do a lot of the work for us, a framework aptly named TypeGraphQL. \\r\\n\\r\\n![TypeGraphQL](typegraphql.png)\\r\\n\\r\\nNormally you\u2019d have to write all the schema types using SDL, create data models using ORM classes, write resolvers for all the queries, mutations and fields and create TypeScript interfaces for all arguments, inputs and object types. After all that you can implement the resolvers using generic signatures and you\u2019ll still need to manually do things like validation, authorization and loading dependencies. This leads to a lot of code redundancy as changing a type in one place will require making changes in a number of places from the schema to the interface. It\'s also obviously tiresome as a single mistake will make you double check everything again. This is where TypeGraphQL comes in.\\r\\n\\r\\n- **single source of truth**: TypeGraphQL uses TypeScript to build the entire GraphQL API by automatically creating GraphQL schema definitions from TypeScript classes with decorators.\\r\\n\\r\\n- **quality of life**: TypeGraphQL has a number of additional features that will make your work easier. Dependency injection helps with decoupling parts of the app and built-in support for authorization and argument and input validation will help take care of some usual tasks that you would otherwise have to do manually or use third party libraries for.\\r\\n\\r\\n\\r\\n\\r\\n## A bright future ahead\\r\\n\\r\\nTypeGraphQL is currently in version 1.0 and has a lot of plans for the future which looks pretty bright with how popular both GraphQL and TypeScript are becoming. The easy to see conclusion is that combining the strengths of TypeScript and GraphQL leads to a properly structured code, which is easy to reuse, maintain and scale. Yes there is some learning curve and initial growing pains needed to get a hang of all the kinks and features but the payoff is already substantial and will only grow as more projects start to use both technologies. That looking at the trends seems to be inevitable.\\r\\n","data":{"title":"A look at what using TypeScript with GraphQL can do for you","date":"2021-02-15T14:17:00.284Z","image":"feat_tsgql.png","author":"Michal"},"path":"typescript-with-graphql","images":{"feat_tsgql.optimized.png":{"width":600,"height":252,"webpPath":"feat_tsgql.optimized.webp","optimizedPath":"feat_tsgql.optimized.optimized.png"},"feat_tsgql.png":{"width":1000,"height":420,"webpPath":"feat_tsgql.webp","optimizedPath":"feat_tsgql.optimized.png"},"fusion.optimized.png":{"width":600,"height":226,"webpPath":"fusion.optimized.webp","optimizedPath":"fusion.optimized.optimized.png"},"fusion.png":{"width":1484,"height":559,"webpPath":"fusion.webp","optimizedPath":"fusion.optimized.png"},"typegraphql.optimized.png":{"width":600,"height":226,"webpPath":"typegraphql.optimized.webp","optimizedPath":"typegraphql.optimized.optimized.png"},"typegraphql.png":{"width":1000,"height":377,"webpPath":"typegraphql.webp","optimizedPath":"typegraphql.optimized.png"}}},{"content":"\\r\\nModularity and reusability are one of the React principles. React components are independent and reusable chunks of code that are responsible for one specific thing, this kind of approach helps to keep your code clean & elegant. **Rerousel** is a the simplest and the lightest infinite carousel component package made for React aiming to provide a way of showcasing your app\'s compliant with these principles:\\r\\n\\r\\n- **Lightweight** - Rerousel is the lightest working infinite React JS carousel available to download from the NPM. It\'s using only the packages that are necessary so you don\u2019t have to worry about thousands of excessive dependencies flooding your application,\\r\\n\\r\\n- **Versatile** - no matter if you are building an enterprise eCommerce app and need to show off your products or personal project to display your holiday pictures - Rerousel is there for you. It supports all types of JSX elements, so you don\'t have to worry about compatibility,\\r\\n\\r\\n- **Simple** - setting up your carousel is super easy, you only need to install the package and import Rerousel, the component setup is effortless.\\r\\n\\r\\n\\r\\n## How to use it\\r\\n\\r\\nUsing Rerousel is pretty simple. Begin with installing the package using npm:\\r\\n\\r\\n```\\r\\nnpm install rerousel\\r\\n```\\r\\n\\r\\nThe next step is importing Rerousel into your React project:\\r\\n```\\r\\nimport { Rerousel } from \'rerousel\';\\r\\n```\\r\\nthen placing it in the desired position in your app and populating with the items you want to showcase and creating a ref pointing at your outermost item inside of the Rerousel and including it in the Rerousel as `itemRef` prop.\\r\\n\\r\\n```\\r\\nexport const Component: React.FC<CustomersProps> = ({ customers }) => {\\r\\n    const customerLogo = useRef(null);\\r\\n\\r\\n    return (\\r\\n        <Container>\\r\\n            <Rerousel itemRef={customerLogo}>\\r\\n                {customers.map((c) => {\\r\\n                    return <Img key={c.image} image={c.image} ref={customerLogo} />;\\r\\n                })}\\r\\n            </Rerousel>\\r\\n        </Container>\\r\\n    );\\r\\n};\\r\\n```\\r\\nAnd that\'s it! Now you can enjoy the simplest, the lightest & the most reliable infinite carousel package made for React. If you want to get more info on it make sure to visit [Rerousel\'s repo on GitHub](https://github.com/aexol-studio/rerousel).\\r\\n\\r\\nPS: Don\'t forget to leave a star ;)\\r\\n\\r\\n\\r\\n![React](react.png)\\r\\n![Rerousel](re.gif)\\r\\n","data":{"title":"Rerousel - light & simple infinite carousel for React","date":"2021-02-03T09:55:00.284Z","image":"feat_re.png","author":"Tomek"},"path":"rerousel-react","images":{"feat_re.optimized.png":{"width":600,"height":252,"webpPath":"feat_re.optimized.webp","optimizedPath":"feat_re.optimized.optimized.png"},"feat_re.png":{"width":1000,"height":420,"webpPath":"feat_re.webp","optimizedPath":"feat_re.optimized.png"},"re.gif":{"width":1030,"height":132,"webpPath":"re.webp","optimizedPath":"re.optimized.gif.png"},"re.optimized.gif.png":{"width":600,"height":77,"webpPath":"re.optimized.gif.webp","optimizedPath":"re.optimized.gif.optimized.png"},"react.optimized.png":{"width":600,"height":223,"webpPath":"react.optimized.webp","optimizedPath":"react.optimized.optimized.png"},"react.png":{"width":1000,"height":371,"webpPath":"react.webp","optimizedPath":"react.optimized.png"}}},{"content":"After looking at how GraphQL can be used with [Vue](https://blog.graphqleditor.com/graphql-vue/) and [Angular](https://blog.graphqleditor.com/angular-graphql/) it\'s obviously time to look at how it works with React. Especially since they share the same background, both having started out at Facebook, GraphQL even had its public debut at the 2015 ReactJS conference. With ties reaching that far back it\'s logical to assume using both GraphQL and React together has to have some benefits right?\\r\\n\\r\\n## React & GraphQL\\r\\n\\r\\nWell sure, as mentioned previously GraphQL basically acts as a super efficient intermediary and helps query data received from various sources. Currently React is most often used in apps for creating a user friendly UI. While most devs use REST APIs to exchange data, GraphQL makes it much easier to retrieve it from REST resources into the right shape for our UI. If you\u2019re interested in efficiency, performance and not wasting bandwidth it\'s a prudent solution, suffice to say Facebook had good reason to use it on their websites. Another benefit of coming out of the same place React did, is that it became popular in its large and very productive community, which has over the years created tons of additional third party libraries and tools for you to use.\\r\\n![React GraphQL](react_graphql.png)\\r\\n## Relay\\r\\n\\r\\nThe last two times we focused on Apollo as the connector between the framework (ie. Vue and Angular) and the query language, GraphQL. Well this time since we started out talking about the common Facebook background it\'s only fair to first look at their own solution namely Relay. It was introduced during that same Reactjs 2015 conference and is simply put a JavaScript client for fetching and managing GraphQL data. The goal is delivering instant UI-response interactions and keeping your app sturdy and performant as it increases in size and complexity. That sounds really simple, but it actually has a large impact on its approach:\\r\\n\\r\\n- **scalability**: Relay\u2019s approach is supporting scaling instead of flexibility. It will continuously support your application as it grows while keeping data fetches to a minimum once you get past the back-end setup. The fact it worked at something the scale of Facebook should be pretty reassuring.\\r\\n\\r\\n- **highly opinionated**: Relay follows Facebook\u2019s approach, it wants you to follow the one correct way to use it. Its very opinionated structure and naming convention can be really useful when it comes to using components, but it also means that you\u2019ll need to learn exactly how to use it and will have less freedom and flexibility.\\r\\n\\r\\n- **optimization**: The Relay compiler makes the structural approach actually worth it as it analyzes any GraphQL inside your code during build time and validates, transforms and optimizes it for runtime. This saves you a lot of time searching for and fixing errors and bad code and makes the whole process a lot smoother. \\r\\n\\r\\n## Apollo\\r\\nApollo takes the opposite approach and focuses on providing freedom and flexibility. It\u2019s framework agnostic, works with any schema and is easier to get into. It can handle GraphQL both on the client and server side and takes full use of third party libraries and tools. Let\u2019s highlight the benefits of that approach:\\r\\n\\r\\n- **community support**: Apollo has great documentation and is regularly updated, but its robust community is probably its strongest point. Because of the emphasis on flexibility, freedom and open source it has tons of third party solutions to almost any problem you can think of.\\r\\n\\r\\n- **flexibility**: Apollo is framework agnostic and works not only with React, Vue and Angular but also has libraries that can connect it to Node, Express, Koa, and Hapi. If you\u2019re looking to be versatile it can serve as a quick jumping point to a number of other frameworks and libraries.\\r\\n\\r\\n\\r\\n## Relay vs Apollo\\r\\n\\r\\nAs you can see the basic difference is the approach: structure or freedom. One isn\'t better than the other, that\u2019s why both are so popular and widely used, it comes down to what you need. Apollo\u2019s focus is to provide ease of use and flexibility, if you want to get to work on your app as fast as possible it\u2019s the way to go. It will also let you freely choose how you want to work on your project so if you value that it\'s also the way to go. On the other hand it might require some additional work to make sure everything works as intended. Relay\u2019s focus is to provide you with a scaling, structured solution that will take more time to get into, but will also do more work under the hood, without you needing to check if everything works all the time. If you\u2019re working with a team it might be the better solution, it does have a steeper learning curve, but once you get going it will be a lot easier to make sure everyone is on the same page at all times. As always the correct choice comes down to recognizing what will fit you better, which I hope this piece has helped with at least a little bit.\\r\\n\\r\\n![Distracted React](meme_apollo.png)\\r\\n","data":{"title":"GraphQL with React - Apollo vs Relay overview","date":"2021-02-01T14:17:00.284Z","image":"feat_gar.png","author":"Michal"},"path":"graphql-with-react","images":{"feat_gar.optimized.png":{"width":600,"height":252,"webpPath":"feat_gar.optimized.webp","optimizedPath":"feat_gar.optimized.optimized.png"},"feat_gar.png":{"width":1000,"height":420,"webpPath":"feat_gar.webp","optimizedPath":"feat_gar.optimized.png"},"meme_apollo.optimized.png":{"width":600,"height":376,"webpPath":"meme_apollo.optimized.webp","optimizedPath":"meme_apollo.optimized.optimized.png"},"meme_apollo.png":{"width":1024,"height":641,"webpPath":"meme_apollo.webp","optimizedPath":"meme_apollo.optimized.png"},"react_graphql.optimized.png":{"width":600,"height":160,"webpPath":"react_graphql.optimized.webp","optimizedPath":"react_graphql.optimized.optimized.png"},"react_graphql.png":{"width":977,"height":260,"webpPath":"react_graphql.webp","optimizedPath":"react_graphql.optimized.png"}}},{"content":"\\r\\n\\r\\n\\r\\nThe latest events have changed many aspects of our personal and business life. Technology has become more essential than ever in connecting people. As an adaptation to the new normal conferences are increasingly being organized online. \\r\\n\\r\\nThe GraphQL Community\'s thirst for knowledge knows no bounds so no wonder that more and more conferences are present online. One of them is **GraphQL Asia** 2021 edition organized by Hasura.\\r\\n\\r\\n## The conference\\r\\n\\r\\nThe conference takes place **online on 24th & 25th Feb 2021** and anyone is free to join (no fee). This year\'s edition is already the third one and considering the quality speakers & talks that took place during the previous ones it is a must-have event in every GraphQL fan\'s calendar.\\r\\n\\r\\nThis year\'s cast looks super interesting including speakers from industry top companies including **Dan Schafer, GraphQL Co-Creator from Facebook as well as people from IBM, Microsoft, Tesco, Hasura and many more**. All experience in using GraphQL in enterprise-grade products and ready to share their thought on different aspects of it and its ecosystem.\\r\\n\\r\\n## The talks\\r\\n\\r\\nThe talks schedule looks quite impressive and anyone should find topics they are interested in. Most of them will be held in English but there are also some in different languages including Japanese, Mandarin or Vietnamese. During the conference, you will learn more on topics like:\\r\\n\\r\\n- **GraphQL Error Handling** - which still seems to be one of the pains of every GraphQL project will be covered by [Kewei Qu](https://graphql.asia/talks/graphql-error-handling-done-right/) from Facebook. Kewei will go over the challenges her team discovered with GraphQL reliability and how they tackled them at Facebook,\\r\\n\\r\\n- **Intelligent Caching with GraphQL Gateway** - you will learn from [Roshan Alexander](https://graphql.asia/talks/intelligent-caching-with-graphql-gateway-using-cdc/) how they build in Pratilipi an intelligent caching layer over GraphQL gateway to serve data to millions of their users keeping infrastructure cost low,\\r\\n\\r\\n- **Schema Stitching in 2021** - [Greg MacWilliam](https://graphql.asia/talks/intelligent-caching-with-graphql-gateway-using-cdc/) will bring you closer to the revitalized concept of the Schema Stitching which\'s the previous iteration that was famously abandoned by Apollo and now is going through second life,\\r\\n\\r\\n- **Client-side migration from REST to GraphQL** - [Zhifan Li](https://graphql.asia/talks/client-side-migration-strategy-from-rest-to-graphql/) will cover the most important aspects of migration from REST API to GraphQL in React apps including clues on how to structure your React app\u2019s statement management for GraphQL, simultaneously handling feature development and migration as well as present you examples of key GraphQL client libraries integrations.\\r\\n\\r\\n... and many more! \\r\\n\\r\\n\\r\\n\\r\\n## Workshops\\r\\n\\r\\nWell, that\'s not all folks! The conference also offers a series of workshops helping you to master your GraphQL skills including classes on:\\r\\n- implementation Server-side Authentication in GraphQL\\r\\n- using GraphQL in the Jamstack\\r\\n- building Type-safe GraphQL apps with TypeScript\\r\\n- building GraphQL on SQL Server (with Hasura)\\r\\n\\r\\nIf you are interested in any of the above make sure to grab your free entry today!\\r\\n\\r\\n[![Register to GraphQL Asia 2021](register.png)](https://graphql.asia/register/)\\r\\n\\r\\n","data":{"title":"GraphQL Asia 2021","date":"2021-01-27T13:27:00.284Z","image":"feat_gqlasia.png","author":"Tomek"},"path":"graphql-asia-2021","images":{"feat_gqlasia.optimized.png":{"width":600,"height":252,"webpPath":"feat_gqlasia.optimized.webp","optimizedPath":"feat_gqlasia.optimized.optimized.png"},"feat_gqlasia.png":{"width":1000,"height":420,"webpPath":"feat_gqlasia.webp","optimizedPath":"feat_gqlasia.optimized.png"},"register.optimized.png":{"width":600,"height":300,"webpPath":"register.optimized.webp","optimizedPath":"register.optimized.optimized.png"},"register.png":{"width":1000,"height":500,"webpPath":"register.webp","optimizedPath":"register.optimized.png"}}},{"content":"\\r\\nLast time I touched a bit on the combined benefits of using Vue with GraphQL via Apollo. It shouldn\'t come as a surprise that Vue isn\'t the exception here and the other big frameworks also let you do the same. So this time let\u2019s take a look at Angular which also uses Apollo to combine its own features with those of GraphQL to make development even smoother and easier.\\r\\n\\r\\n## The Angular angle\\r\\n\\r\\nI\u2019ve already [touched on the benefits of using GraphQL](https://blog.graphqleditor.com/graphql-vue/) previously, so let\u2019s get a bit into Angular. As we know GraphQL is primarily a server-side technology, well Angular is the reverse its primarily client side (though it has had server side rendering for a while now through Angular Universal) This means a typical Angular application executes in the browser, rendering pages in the DOM in response to the user\u2019s actions. Aside from the technicalities the key features paint a clear picture why using the framework is beneficial:\\r\\n\\r\\n- **cross-platform**: Angular has a lot of focus on flexibility and is a cross-platform framework. It\'s not limited by the browser and the only thing required to run it is a JavaScript engine. It can work client side or server side via Angular Universal and third party libraries let you use it across different environments.\\r\\n\\r\\n- **performance and speed**: Angular also puts a lot of emphasis on working quickly and efficiently. It turns your templates into highly optimized JavaScript code and provides automatic code splitting via the Component Router. The template syntax and Angular\u2019s CLI are also a big help making development much faster and easier.\\r\\n\\r\\n- **complete package**: Angular\u2019s strongest point in comparison to the other frameworks is that it provides you with a complete set of tools out of the box. It has a ton of features and its API will let you create even complex things like animations and choreographies with ease. Testing and fixing broken code is also made easy with Karma and Jasmine and will likely save you a ton of time.\\r\\n\\r\\n\\r\\n## Apollo, the greek god everything?\\r\\n\\r\\nYou might be thinking since its client side doesn\'t that mean it can\u2019t be used with GraphQL to build web APIs? That\u2019s where Apollo comes in, it lets you fetch data from your GraphQL server and use it for building apps using Angular. It\'s not just a bridge between the technologies and provides lots of additional features:\\r\\n\\r\\n- **quality of life improvements**: Apollo Client provides caching and normalization as well as error management, support for pagination and data prefetching.\\r\\n\\r\\n- **versatility**: Apollo provides lots of useful libraries which help effectively implement a GraphQL stack for JavaScript apps, such as Apollo Link.\\r\\n\\r\\n- **modern state management**: you can manage local data with GraphQL operations via the Apollo Link State library. This means you basically don\'t need anything else for state management and everything is handled by Apollo itself.\\r\\n\\r\\n- **community driven**: you\u2019ll find tons of other tools made by the community which will help you even further. For example the Apollo Boost library makes the Apollo Client require almost no configuration to be set up for GraphQL and client-side apps.\\r\\n\\r\\n\\r\\n![Apollo Features](super.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Don\'t get left in the dust \\r\\nAs always it\'s worth pointing out that while this can be a catch all solution for development it obviously will not fit everyone\'s tastes or needs. Angular by itself has a steep learning curve and if you throw GraphQL, Apollo and its libraries on top of that it can be quite a hassle to get a hang of. While it may not be the best solution for simple stuff it really shines when it comes to more complex projects which make use of the whole variety of available features. Both Apollo and especially GraphQL are cutting edge technologies that are currently gaining popularity in the dev community, so even if it\'s not the best solution for your current project it might be prudent to get a hang of them for the future.\\r\\n","data":{"title":"GraphQL in Angular with Apollo","date":"2021-01-25T10:51:00.284Z","image":"feat_angulargql.png","author":"Michal"},"path":"angular-graphql","images":{"feat_angulargql.optimized.png":{"width":600,"height":252,"webpPath":"feat_angulargql.optimized.webp","optimizedPath":"feat_angulargql.optimized.optimized.png"},"feat_angulargql.png":{"width":1000,"height":420,"webpPath":"feat_angulargql.webp","optimizedPath":"feat_angulargql.optimized.png"},"super.optimized.png":{"width":600,"height":300,"webpPath":"super.optimized.webp","optimizedPath":"super.optimized.optimized.png"},"super.png":{"width":1000,"height":500,"webpPath":"super.webp","optimizedPath":"super.optimized.png"}}},{"content":"\\r\\nWhile REST still holds the top spot in terms of popularity GraphQL has been on the rise for quite a while and 2021 looks to be another year where this will be the case. It has become a big trend in web development by focusing on making development more efficient and improving performance. Another big trend is Vue, it has also become really popular and now makes up the big trio of frameworks with React and Angular. Since both are so big in app development now the obvious question is why not use both?\\r\\n\\r\\n## What can GraphQL do for me?\\r\\nBefore we get to that let\'s take a brief look at what GraphQL is and what it can help us with. GraphQL is a data query language for  APIs and its main aim is to fix over and under fetching as, unlike REST, it lets you define exactly what you need to avoid unoptimized API calls:\\r\\n\\r\\n**1. Over-fetching is getting too much data.** This happens when the client downloads more data than is actually needed by the app. As GraphQL lets you define in the query exactly what is needed this stops being a problem, with each request you get exactly what you need and nothing else. This has a significant effect on performance and bandwidth.\\r\\n\\r\\n**2. Under-fetching is not getting enough data.** This happens when the client does not get everything it needs in a single request and so needs multiple to get all the needed data. Again GraphQL solves this problem by letting you define exactly what you need in the query and again the effects in terms of performance and bandwidth saved are significant.\\r\\n\\r\\n![GraphQL vs REST data fetching](fetching.png)\\r\\n\\r\\n\\r\\n## Default or Apollo?\\r\\n\\r\\nAfter the why naturally comes the how. By default you can simply use GraphQL.js, the official GraphQL JavaScript implementation. Then there are some solutions made by the community, the most popular being Apollo. Each has its own advantages and is more suited towards working on a particular type of project.\\r\\n\\r\\n- **GraphQL.js** is a library that can help you set up a basic server with minimal effort. It\'s a simple, straightforward and barebones solution for those who want to start simple and dont need more complex tools.\\r\\n\\r\\n- **Apollo** is the well-rounded, go to solution for most and for good reason. The platform is well suited for simple as well as more complex projects and provides tons of versatility. Apollo can be dropped into any JavaScript project without issues and is universally compatible. Basically it\'s a set of tools which let you convert your backend into a GraphQL API and interact with it from the frontend.\\r\\n\\r\\n## Where\u2019s the Vue?\\r\\n\\r\\nOkay, but where\u2019s Vue in all this? GraphQL is primarily a server-side technology, however as mentioned before it lets you query whatever data you need which makes it really flexible. As mentioned before Apollo is a platform and will help you with both the server and the client side of the app (via Apollo Client and Apollo Server respectively) and more importantly is both library and framework agnostic. This lets you combine all three, GraphQL handles queries in your Vue components while Apollo works under the hood. As I\u2019ve written before Vue is big on simplicity, reactivity and user friendliness and while GraphQL might take a bit to get a hang of, the performance boost and quality of life improvements will quickly make up the time used on that. Using all three lets you take advantage of all the features of GraphQL and Apollo mentioned above as well as utilize Vue\u2019s full potential. Hopefully if you\u2019re using Vue already this helped highlight a bit how GraphQL can be useful to smooth out the development process. On the other hand if you\u2019re already working with GraphQL you might want to get familiar with Vue as it\'s gaining popularity and is touted as the framework with the easiest learning curve which should make getting a hang of it a breeze.\\r\\n","data":{"title":"A view on GraphQL in Vue","date":"2021-01-18T09:17:00.284Z","image":"feat_vuegql.png","author":"Michal"},"path":"graphql-vue","images":{"feat_vuegql.optimized.png":{"width":600,"height":252,"webpPath":"feat_vuegql.optimized.webp","optimizedPath":"feat_vuegql.optimized.optimized.png"},"feat_vuegql.png":{"width":1000,"height":420,"webpPath":"feat_vuegql.webp","optimizedPath":"feat_vuegql.optimized.png"},"fetching.optimized.png":{"width":600,"height":397,"webpPath":"fetching.optimized.webp","optimizedPath":"fetching.optimized.optimized.png"},"fetching.png":{"width":725,"height":480,"webpPath":"fetching.webp","optimizedPath":"fetching.optimized.png"}}},{"content":"\\r\\nGraphQL Nexus is a library to build code-first GraphQL APIs that relies on Node.js and TypeScript. The code-first approach prioritizes the process of developing schema resolvers over the process of designing the schema. This approach puts resolvers in a leading position of a GraphQL project and making a schema shape dependent on resolvers (schema is implemented programmatically).\\r\\n\\r\\nThe key features provided by Nexus are:\\r\\n\\r\\n- **Type-Safety** - type-definitions are being generated as you proceed with the development process & inferred in your code, providing you with auto-completion and error catching,\\r\\n- **Data-Agnostic** - GraphQL Nexus is a declarative syntax layered on the top of the graphql-js means you can do with it all the same that you can accomplish with graphql-js or apollo-tools.\\r\\n\\r\\nHaving figured out all the types you need for your schema all you need to do is simply use `makeSchema` function to create the schema instance that would be used as the foundation for your GraphQL server.\\r\\n\\r\\n## What\'s new in version 1.0 of GraphQL Nexus\\r\\n\\r\\nBesides the fresh package name `nexus` which implicates the new way of importing things (use `nexus` instead of `@nexus/schema`)\\r\\n\\r\\n```\\r\\nimport { makeSchema } from \'nexus\' \\r\\n```\\r\\nGraphQL Nexus 1.0 provides some important improvements and changes to the project among which we can find:\\r\\n- **Changes to Nullability** - in previous versions of GraphQL Nexuls fields were marked by default as non-nullable, but version 1.0 requires to mark non-nullable fields explicitly.\\r\\n\\r\\n![Redefined nullability in GraphQL Nexus 1.0](nonnull.png)\\r\\n\\r\\n##### Source: [prisma.io](https://www.prisma.io/blog/announcing-the-release-of-nexus-schema-v1-b5eno5g08d0b)\\r\\n\\r\\n- **Changes to the List API** - Nexus 1.0 introduces a new function for working with list types. The list function can be applied to inputs and outputs similar to how the nonNull and nullable functions are. The same chaining API for creating lists still remains, but the list function exists to help for situations where chaining is not ideal.\\r\\n![Changes to the List API in GraphQL Nexus 1.0](lists.png)\\r\\n\\r\\n##### Source: [prisma.io](https://www.prisma.io/blog/announcing-the-release-of-nexus-schema-v1-b5eno5g08d0b)\\r\\n\\r\\n- **Abstract Types** - version 1.0 offers API for implementing three approaches to abstract types (unions & interfaces) known from the official `graphql-js` package:\\r\\n  - **Centralized Strategy (`resolveType`)** - discriminating union member types in a centralized way,\\r\\n  - **Discriminant Model Field (DMF) Strategy (`__typename`)** - discriminating union member types in a modular way. \\r\\n  - **Modular Strategy (`isTypeOf`)** - discriminating union member types in a modular way. \\r\\nAll along with the type safety.\\r\\n\\r\\n- **Changes to Backing Types** - in version 1.0 `backing` and `root` types are globally referred to as `Source Types`.\\r\\n\\r\\nAlong with this spotlight changes version 1.0 introduced some smaller ones, not directly connected to the project codebase, but not less important i.e. [upgraded documentation](https://nexusjs.org/docs/), [guides](https://nexusjs.org/docs/guides/schema) and new codesandbox examples ([intro](https://codesandbox.io/s/nexus-example-introductory-graphql-api-pk0qr), [subscriptions](https://codesandbox.io/s/nexus-example-subscriptions-59kdb), [next.js](https://codesandbox.io/s/nexus-example-nextjs-b7055)).\\r\\n","data":{"title":"GraphQL Nexus has reached version 1.0","date":"2021-01-04T10:00:00.284Z","image":"feat_nexus1.png","author":"Tomek"},"path":"graphql-nexus-stable","images":{"feat_nexus1.optimized.png":{"width":600,"height":252,"webpPath":"feat_nexus1.optimized.webp","optimizedPath":"feat_nexus1.optimized.optimized.png"},"feat_nexus1.png":{"width":1000,"height":420,"webpPath":"feat_nexus1.webp","optimizedPath":"feat_nexus1.optimized.png"},"lists.optimized.png":{"width":600,"height":294,"webpPath":"lists.optimized.webp","optimizedPath":"lists.optimized.optimized.png"},"lists.png":{"width":3136,"height":1536,"webpPath":"lists.webp","optimizedPath":"lists.optimized.png"},"nonnull.optimized.png":{"width":600,"height":197,"webpPath":"nonnull.optimized.webp","optimizedPath":"nonnull.optimized.optimized.png"},"nonnull.png":{"width":3136,"height":1032,"webpPath":"nonnull.webp","optimizedPath":"nonnull.optimized.png"}}},{"content":"\\r\\nAfter looking at the features, components and libraries for Vue, React and Angular it\'s time to do an actual comparison of the three. While in terms of popularity React is still top there are substantial differences in where each of the frameworks excels. So even if you\u2019re already committed to one (or want to switch) it\'s probably a good idea to check out exactly how they measure up against each other in a few key aspects.\\r\\n\\r\\n## Basics\\r\\n\\r\\nBefore we get to the meat it\'s probably prudent to point out what these differences stem from. Each of the three frameworks has a different approach to development and aims at helping devs in a different way. **React and Angular are developed by big companies** namely Facebook and Google while **Vue has started as a side project** of a Google developer. While all are JavaScript based, each presents a slightly different syntax approach. React uses JavaScript and JSX (which combines HTML and JavaScript logic), Angular uses TypeScript (HTML and TypeScript logic is split) Vue uses JavaScript (HTML and JavaScript logic is split). All of them are component-driven, but they treat coding them differently along with a number of default features included.\\r\\n\\r\\n* **React** combines the UI and behavior of components, the same code is responsible for both creating a UI component and dictating its behavior. \\r\\n* **Vue** takes the same approach and even lets you combine the UI and behavior of components from within a script. \\r\\n* **Angular** completely separates the two, the UI parts of components are attributes of HTML tags while their behaviors are in the form of JavaScript code. \\r\\n\\r\\n  \\r\\n\\r\\n|         |      Components     | Lang | Built-in features|\\r\\n| ------------- |:-------------:|:-----:|:-----:|\\r\\n| **React**     | *same code is responsible for UI & logic* | *JavaScript/JSX* | *low amount* |\\r\\n| **Angular**     | *components\' UI & logic are completely separated*    |  *TypeScript*  | *high amount*|\\r\\n| **Vue** |  *same code is responsible for UI & logic*    |    *JavaScript*  |*fair amount*|\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n## Learning curve\\r\\n\\r\\nFinally the main difference in approach is probably the learning curve. Vue is the easiest to learn and can even serve as a stepping stone for learning the two others, as there is some overlap especially in handling components. Simplicity and customizability obviously have their advantages, but there are also some drawbacks as it makes it somewhat difficult to debug and test. React is middle of the road, it is harder to get into but has great documentation and an easy to follow starting guide. The drawback is it does require use of third party libraries for more complex stuff. This makes the learning curve not so steep but highly dependent on what you actually want to do and what third party libraries you\u2019ll need to learn to do it. Angular is the complete framework, but also has the steepest learning curve requiring learning TypeScript, RxJS and MVC. The investment of time and effort may prove well worth it as mastering it will make building your app a breeze.\\r\\n\\r\\n![Popularity of React, Vue, Angular](charts.png)\\r\\n\\r\\n## Minimalism vs all-in-one\\r\\n\\r\\nApproach and philosophy are important and all but that\u2019s mostly just the pitch. For a clearer picture it\'s better to look at the features. As mentioned above React takes a minimalistic approach here, it provides you with a library for rendering content to the DOM. It does provide some rudimentary built-in state management support but you\u2019ll likely need to use a state management library like Redux (which is fortunately quite easy to learn). There aren\'t any other special features and if you need some other functionalities you\u2019ll need to check out community provided solutions. That does make it a lot slimmer than the other two, but can be a hassle if you\u2019re working on a complex project and looking to get started from the get go. Vue is the middle ground, it provides some features, but isn\'t the complete package Angular is. You get built in state management as well as a built-in router. Though for form validation you\u2019ll need something like the Vuelidate library and a library for Http client functions (there\'s quite a few to choose from) Angular gives you all these features out of the box and more, there\u2019s an official CLI which helps building, managing, updating and deploying projects even easier.\\r\\n\\r\\n\\r\\n|               |   React    | Angular    |    Vue     |\\r\\n| ------------- |:----------:|:-------------:|:-------------:|\\r\\n| Backed by    |    *Facebook*       |      *Google*      |     *Evan You*       |\\r\\n| Release date |    *2013*        |       *2016*     |    *2014*        |\\r\\n| Lang      |       *JavaScript*     |     *TypeScript*       |*JavaScript*              |\\r\\n| Learning curve     |    *medium*        |   *hard*         |   *easy*         |\\r\\n| Documnation       |   *good*         |      *good*       |      *good*           |\\r\\n| Features      |    *external libraries*        |   *all-in-one*         |       *most-in-one*       |\\r\\n| Production-ready     |     *yes*       |       *yes*         |      *yes*          |\\r\\n\\r\\n## Less is more\\r\\n\\r\\nThe thought that comes to mind is probably, why not go with Angular, after all it has the most features. Well more isn\'t always better and as mentioned the steep learning curve can be a turnoff especially if you\u2019re looking to get started right away or working on projects requiring less complex solutions out of the box. Oh and emphasis on \u2018out-of-the-box\u2019 here, it\'s not like Vue and React are useless when it comes to features. Just the opposite, they\'re freely available to you when you need them, you just need to reach out to the community instead of getting them built-in with the framework. As you can see it comes to personal preference and focusing on what fits you best now and what might fit you best in the future, hopefully this little piece helped with that at least a little bit.\\r\\n","data":{"title":"React vs Angular vs Vue","date":"2020-12-17T12:04:00.284Z","image":"feat_vs.png","author":"Michal"},"path":"react-angular-vue","images":{"charts.optimized.png":{"width":600,"height":246,"webpPath":"charts.optimized.webp","optimizedPath":"charts.optimized.optimized.png"},"charts.png":{"width":1035,"height":424,"webpPath":"charts.webp","optimizedPath":"charts.optimized.png"},"feat_vs.optimized.png":{"width":600,"height":252,"webpPath":"feat_vs.optimized.webp","optimizedPath":"feat_vs.optimized.optimized.png"},"feat_vs.png":{"width":1000,"height":420,"webpPath":"feat_vs.webp","optimizedPath":"feat_vs.optimized.png"}}},{"content":"\\r\\nLast time we looked a bit at the background and some built-in features of React. As promised it\'s now time to look at some optional tools. Just like with Vue and Angular, components play a big role here and as usual you can create your own or use some of those made by the rapidly growing community. Let\u2019s take a look at React libraries you should check before 2020 ends.\\r\\n\\r\\n\\r\\n## React based frameworks\\r\\n\\r\\nIf you\u2019re planning on working with React most likely you\u2019re going to have to pick between two starter frameworks, Gatsby.js and Next.js. React by itself works only on the client side and does not provide server side rendering, while those two build on top of React and provide SSR/SSG. Both also follow JAMStack architecture and provide you with a boilerplate which helps speed up and simplify the development process. That\u2019s enough about similarities and let\u2019s look at what the choice boils down to:\\r\\n\\r\\n- **[Gatsby.js](https://www.gatsbyjs.com/):** generates HTML via server side generator during the build time, this means you don\'t need a Node.js server to handle rendering and you\u2019ll have HTML files ready right after build.  Data fetching is handled via GraphQL which has its benefits (you only fetch what you need which saves resources and time) but also ties you to GraphQL which not everyone likes or wants to use. Prominent uses of Gatsby.js include Figma.com, React\u2019s official site and State of Javascript.\\r\\n\\r\\n- **[Next.js](https://nextjs.org/):** renders pages via server side rendering, this requires a Node.js server to run applications and handle dynamic HTML rendering. If you don\'t like that Next.js also supports SSG since version 9.3. What you use for data fetching is up to you, hell you can even use GraphQL. Prominent uses of Next.js include TikTok, Hulu and Twitch mobile.\\r\\n\\r\\n![React based frameworks](base.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## State management\\r\\n\\r\\n\\r\\nState management is the most crucial part of any modern React app. Most of the time it is the biggest challenge any developer faces while working on their frontend project, especially when it comes to large and complex enterprise-grade commercial apps. Managing state is such a complex task that proper handling requires using external libraries, as at some point React itself will no longer be able to provide a satisfactory solution.\\r\\n\\r\\n- **[Redux](https://redux.js.org/):** a predictable, standalone state container for JavaScript apps which helps you write applications that behave consistently and run in different environments. Being a standalone library means you can use Redux even if you don\'t have a UI setup yet. Redux can be used with any UI framework i.e React, where you can describe your UI as a function of your state and make Redux keep track of your components state and update them accordingly in response to UI actions. Redux is definitely the most popular choice when it comes to state management with React with almost 5 million weekly downloads on NPM.\\r\\n\\r\\n- **[MobX](https://mobx.js.org/README.html):** a simple, scalable state management solution. It\'s easier to learn and simpler to use than Redux and focuses on helping develop simpler apps with less boilerplate code. The main focus is reducing the number of bugs by mapping the relations between state and derivatives while maintaining referential integrity. Another plus is that it can be used either client side or server side and, as a JavaScript library, lets you keep the existing utilities of JS.\\r\\n\\r\\n![State management](state.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Forms\\r\\n\\r\\n\\r\\nForms are present in most web and mobile apps.  Unlike Angular and Vue, which both give you a way to validate forms out of the box, React requires you to handle them all by yourself. Fortunately there are some libraries rushing to help you out.\\r\\n\\r\\n- **[Formik](https://formik.org/):** is the most popular form library for React (and React Native). Formik is packed with dozens of micro features like different types of validation, handling API errors, auto-saving forms data and many more. It\u2019s the result of the React community\u2019s years of experience in terms of UI, security, accessibility etc. With Formik you can focus on developing your product instead of battling with all aspects of forms. It\u2019s a well-tested and highly optimized solution, using which will leave you with less chances for unexpected errors and edge cases in your forms.\\r\\n\\r\\n- **[React Hook Forms](https://react-hook-form.com/):**  a light-weight form library for React, allowing you to achieve astonishing results with a minimal amount of code, which makes it very performance oriented. React Hook Forms is optimized to remove any unnecessary re-renders of your components by providing the developer a way to isolate component re-renders, improving performance of your mobile or web application. It is a great way to empower your applications with highly-performant, flexible, easy to use and manage forms.\\r\\n\\r\\n![Forms](forms.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n\\r\\n## Testing\\r\\nTest-driven development (TDD) is now one of the leading approaches to application development. It\'s becoming more and more popular as it reduces the chance of major bugs occurring in the future. An obvious downside of test-driven development is that it usually takes longer to bring a product to market than while using a behavior-driven development approach. Fortunately there are some useful React libraries that can make writing tests a much easier task.\\r\\n\\r\\n\\r\\n- **[Enzyme](https://enzymejs.github.io/enzyme/):** a JS testing utility that makes testing your React components super easy. You can manipulate, traverse and in some ways simulate runtime given the output. Enzyme was created internally at AirBnB and released as an open source project in 2015. The tool aims to be as easy as possible by providing an intuitive API inspired by jQuery\'s API for DOM manipulation and traversal.\\r\\n\\r\\n- **[React Testing Library](https://testing-library.com/docs/react-testing-library/intro/):** a tool that lets you test React components without relying on their implementation details. This approach helps focus on accessibility as it basically puts you in the shoes of the end-user of the React app. The guiding principle here is that the more your tests look like the way your software is supposed to be used, the more confidence running them can give you. It\'s much lighter and easier to get started with than Enzyme (which on the other hand has a lot more functions) and is the recommended testing app according to React\u2019s docs.\\r\\n\\r\\n![Tests](test.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## UI\\r\\n\\r\\nIf it goes for out of the box React components there\u2019s a bunch of useful libraries made by the community to check out. Using these can help you in a variety of ways by providing practical and reusable solutions, which really impact the time and effort development takes.\\r\\n\\r\\n- **[React Bootstrap](https://react-bootstrap.github.io/):** a UI kit which replaces Bootstrap\u2019s JavaScript with React code. Arguably the best way to quickly start building UI as it has thousands of ready to use themes and resources. No wonder it\'s among the most popular component libraries with over 700k weekly downloads on NPM.\\r\\n\\r\\n- **[Material UI](https://material-ui.com/):** a set of components created by Google based on their famous material design protocols. The components are self-sustaining in nature and only inject the styles they need to display. It also provides a lot of accessible and configurable UI widgets and ready to use site templates. This makes for a pretty significant performance boost especially considering the library is regularly updated and has very strong community support with over 60k stars on GitHub and is probably the most popular component library with over 1,6 mln weekly downloads on NPM.\\r\\n\\r\\n- **[Rebass](https://rebassjs.org/):** a tiny component library that packs a punch. Rebass contains only 8 components and weighs only 4 KBs but can be used to create a robust set of themable UI elements. It\'s based on the Styled System library and focuses on providing a quick start for your development process. It\'s really handy if you don\'t want to rely too much on community component libraries or you intend to create your own custom UI.\\r\\n\\r\\n- **[Semantic UI React](https://react.semantic-ui.com/):** the official React integration for Semantic UI. This offers all the extra functions of the jQuery based re-scripted in React code. Comes with tons of prebuilt components designed specifically to make it easier to work with and produce Semantic-friendly code.\\r\\n\\r\\n- **[Ant Design](https://ant.design/):** a design system for enterprise level products. Based on the Ant Design project it provides you with over 60 high quality components crafted based on a design language developed by the creators. The components are customizable and include support for dozens of languages. The focus is on helping build rich, interactive UIs for internal desktop applications (no worries there\u2019s also Ant Design Mobile for mobile apps)\\r\\n\\r\\n![UI](ui.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Join up!\\r\\n\\r\\nObviously that\u2019s just a few popular libraries, there\u2019s a myriad more and everyone will easily find some useful ones. Most of them aren\'t complicated and take a short while to get a hang of, which is time well invested considering they usually speed up and simplify the development process by quite a bit. Creating everything yourself has its benefits, but all in all the rapidly growing and already sizable React community is probably the biggest advantage using it provides.\\r\\n","data":{"title":"Top React libraries you need to know in 2021","date":"2020-12-10T12:17:00.284Z","image":"feat_react_libs.png","author":"Michal"},"path":"react-libs-2021","images":{"base.optimized.png":{"width":600,"height":360,"webpPath":"base.optimized.webp","optimizedPath":"base.optimized.optimized.png"},"base.png":{"width":1000,"height":600,"webpPath":"base.webp","optimizedPath":"base.optimized.png"},"feat_react_libs.optimized.png":{"width":600,"height":252,"webpPath":"feat_react_libs.optimized.webp","optimizedPath":"feat_react_libs.optimized.optimized.png"},"feat_react_libs.png":{"width":1000,"height":420,"webpPath":"feat_react_libs.webp","optimizedPath":"feat_react_libs.optimized.png"},"forms.optimized.png":{"width":600,"height":360,"webpPath":"forms.optimized.webp","optimizedPath":"forms.optimized.optimized.png"},"forms.png":{"width":1000,"height":600,"webpPath":"forms.webp","optimizedPath":"forms.optimized.png"},"state.optimized.png":{"width":600,"height":360,"webpPath":"state.optimized.webp","optimizedPath":"state.optimized.optimized.png"},"state.png":{"width":1000,"height":600,"webpPath":"state.webp","optimizedPath":"state.optimized.png"},"test.optimized.png":{"width":600,"height":360,"webpPath":"test.optimized.webp","optimizedPath":"test.optimized.optimized.png"},"test.png":{"width":1000,"height":600,"webpPath":"test.webp","optimizedPath":"test.optimized.png"},"ui.optimized.png":{"width":600,"height":360,"webpPath":"ui.optimized.webp","optimizedPath":"ui.optimized.optimized.png"},"ui.png":{"width":1000,"height":600,"webpPath":"ui.webp","optimizedPath":"ui.optimized.png"}}},{"content":"\\r\\nAfter taking a look at [Vue](https://blog.graphqleditor.com/vue-overview/) and [Angular](https://blog.graphqleditor.com/angular-overview/) it\'s time to check out the last of the big three -  **React**. \\r\\n\\r\\nIn terms of popularity and user base it might be the biggest of the three so let\u2019s look at how it got here. It\'s also worth mentioning there has been a lot of discussion on if React is a framework or a library, with both sides of the argument nitpicking the definitions. How you call it isn\'t really of the utmost importance when you\u2019re actually using it, so let\u2019s just call it a library since that\u2019s how it\'s referred to on its official website.\\r\\n\\r\\n## Hello World!\\r\\n\\r\\nReact was created by Jordan Walke, a software engineer working for Facebook and it first appeared as FaxJS in 2011. The same year it got its first use in Facebook\u2019s newsfeed and a year later on Instagram.com. May 2013 saw the big launch with React becoming opensource and publicly available, it was a bit of a rocky start with many being sceptical about its usefulness. Later the same year it became available in Python Applications and Ruby on Rails. By 2014 was steadily gaining users and the community started growing quickly. 2015 was the big break and the start of mainstream recognition as big companies like Netflix and Airbnb started using the library. The following years saw numerous improvements with the most recent version 17.0 coming out on October 20 2020.\\r\\n\\r\\n## JSX and Virtual DOM\\r\\n\\r\\nShedding some light on the background is fine and all, but the main \u2018selling point\u2019 (don\'t worry, it\'s opensource) of the library are its features. React is basically a frontend library aimed at helping developers build user interfaces. The most basic advantage, as with any library, is that it provides reusable code which saves time and reduces the chances of coding errors. Obviously that\u2019s not all it does, ever since its initial release two features have been the backbone of React\\r\\n\\r\\n- **JSX:** React uses JSX (a syntax extension to JavaScript) instead of basic JavaScript for templating. It lets you easily modify the DOM using simple HTML-style code and is compatible with all web browsers.\\r\\n\\r\\n- **Virtual DOM:** React creates a data structure cache which traces the changes made and then updates only the relevant part of the DOM. Let\'s say a user leaves a comment under the article, normally for it to appear the entire DOM would have to be updated, while React scans the DOM for changes and updates only the relevant segment. This makes for an important performance boost since it means way less computing power used and significantly shorter loading time. While that might not sound like much, think about the scale, we\u2019re talking here about something made for Facebook and not some small blog with a handful of users commenting.\\r\\n\\r\\n![Simple React component using JSX](jsx.png)\\r\\n\\r\\n##### Source: [reactjs.org](https://reactjs.org/)\\r\\n\\r\\n## Going native\\r\\n\\r\\nWith the basic features out of the way we can look at some things that were added later. React Native was released in March 2015 letting developers create natively-rendered apps for iOS, Android and a multitude of other platforms. It quickly became one of the most used tools for mobile app development and was adopted by big companies like Skype, Soundcloud, Ubereats or Walmart. What\u2019s the difference? Well ReactJS still uses some CSS and HTML elements while React Native uses native mobile UI elements. As cross-platform is very highly valued in mobile development it\'s little wonder why it quickly became so popular.\\r\\n\\r\\n![React Native allows you to build for Android and iOS using React](react_native.png)\\r\\n\\r\\n##### Source: [reactnative.dev](https://reactnative.dev/)\\r\\n\\r\\n## Hooks\\r\\n\\r\\nThe new feature in version 16.8 released early last year was adding Hooks. Hooks are basically functions that let you use state and other React features without writing a class component. This way you can \u2018hook into\u2019 React and use state and lifecycle methods inside functional components. They are reusable and provide better code composition and flexibility in moving around the component tree. With Hooks functional components can be used for almost everything from rendering UI to handling state and logic. You\u2019ll find some built-in Hooks shipped with React and since they are reusable you\u2019ll find lots of useful ones created by others or you can always create your own. There are two main rules to Hooks:\\r\\n\\r\\n- **Do not use Hooks inside loops, conditions, or nested functions** - this ensures that Hooks are called in the right order each time a component renders and their state is preserved between multiple calls.\\r\\n\\r\\n- **Only use Hooks from inside React Functions** - this ensures all stateful logic in a component is clearly visible from the source code.\\r\\n\\r\\n![Example of useState, a basic React hook](hooks.png)\\r\\n\\r\\n##### Source: [reactjs.org](https://reactjs.org/docs/hooks-intro.html)\\r\\n\\r\\n## More to come \\r\\n\\r\\nVersion 17.0 was released about a month and a half ago and it was the first major release without any developer-facing features. The update was primarily focused on making it easier to upgrade React itself. It\'s not like that\u2019s it though, the team even called this update a stepping stone while they work on new features. So if those mentioned above did not convince you there\u2019s more coming soon. Oh and if you\u2019re up for some more convincing, next time we\u2019ll take a look at some of the most useful component libraries for React.\\r\\n\\r\\n\\r\\n","data":{"title":"React - the rise of the JavaScript powerhouse","date":"2020-12-07T11:39:00.284Z","image":"feat_react.png","author":"Michal"},"path":"react-js-powerhouse","images":{"feat_react.optimized.png":{"width":600,"height":252,"webpPath":"feat_react.optimized.webp","optimizedPath":"feat_react.optimized.optimized.png"},"feat_react.png":{"width":1000,"height":420,"webpPath":"feat_react.webp","optimizedPath":"feat_react.optimized.png"},"hooks.optimized.png":{"width":600,"height":358,"webpPath":"hooks.optimized.webp","optimizedPath":"hooks.optimized.optimized.png"},"hooks.png":{"width":2561,"height":1527,"webpPath":"hooks.webp","optimizedPath":"hooks.optimized.png"},"jsx.optimized.png":{"width":600,"height":332,"webpPath":"jsx.optimized.webp","optimizedPath":"jsx.optimized.optimized.png"},"jsx.png":{"width":2617,"height":1446,"webpPath":"jsx.webp","optimizedPath":"jsx.optimized.png"},"react_native.optimized.png":{"width":600,"height":257,"webpPath":"react_native.optimized.webp","optimizedPath":"react_native.optimized.optimized.png"},"react_native.png":{"width":928,"height":397,"webpPath":"react_native.webp","optimizedPath":"react_native.optimized.png"}}},{"content":"\\r\\nGraphQL is a graph-based query language or more precisely a specification that regulates how to interact with APIs. GraphQL isn\u2019t tied to any database, back-end technology and can be implemented for any project\'s existing code & database fairly easy. \\r\\n\\r\\n## GraphQL API for WordPress\\r\\n\\r\\nBeing language-agnostic makes GraphQL being adopted across different technologies. Today let\'s take a look at one of GraphQL WordPress implementations.\\r\\n\\r\\n**[WPGraphQL](https://www.wpgraphql.com/)** is an open-source WordPress plugin that provides GraphQL schema and API for WordPress. With WPGraphQL you enjoy the power of GraphQL as exposing WordPress data in a GraphQL API has never been easier. Using modern frontend technologies with WordPress is no longer paint as the CMS layer and the presentation layer are separated.\\r\\n\\r\\n\\r\\n- **Modern development tool** - WPGraphQL makes possible to build rich JavaScript applications with WordPress and GraphQL by separating your CMS from your presentation layer which covers the needs of both content creators (which prefer to use CMS) as well as developers who are seeking compatibility with modern frameworks and tooling.\\r\\n\\r\\n![WPGraphQL compatiblity](wpgraphql_frameworks.png)\\r\\n\\r\\n- **Optimized data querying** - using GraphQL allows fetching many resources in a single request. You get full control of what data comes from the server. By accessing multiple root resources with a single server call you to reduce the number of bits transferred which makes your app work faster even on slow mobile network connections.\\r\\n\\r\\n![GraphQL allows fetching many resources in a single request](graphql.png)\\r\\n\\r\\n\\r\\n## Road to WPGraphQL 1.0\\r\\n\\r\\nThe WordPress ecosystem is known for its heavy emphasis on backward compatibility. Having that in mind, the WPGraphQL team was postponing calling their product a 1.0 to be sure that they follow this unwritten WP principle.\\r\\n\\r\\nAlthough a network of more than **50 large sites was using WPgraphQL since 2018** they didn\'t want to make a 1.0 call until they are sure everything is like it\'s supposed to be.\\r\\n\\r\\n>*With that in mind, before tagging WPGraphQL 1.0, I wanted so badly to be at a place with the codebase & Schema that I could no longer predict anymore breaking changes.*\\r\\n\\r\\n![WPGraphQL](wpgraphql.png)\\r\\n\\r\\n##### Source: [wpgraphql.com](https://www.wpgraphql.com/)\\r\\n\\r\\nAs mentioned by Jason Bahl, the creator & maintainer of WPGraphQL, the release of version 1.0 doesn\'t mean that there won\'t be any breaking changes in the future, it\'s rather a statement of stability and long term support.\\r\\n\\r\\n\\r\\nIf you interested in more detailed information about WPGraphQL 1.0 or start your journey with GraphQL and WordPress make sure to visit [WPGraphQL official docs](https://www.wpgraphql.com/docs/introduction/).\\r\\n\\r\\n\\r\\n","data":{"title":"WPGraphQL 1.0 - stable version of GraphQL API for WordPress","date":"2020-12-01T10:03:00.284Z","image":"feat_wpgql.png","author":"Tomek"},"path":"wpgraphql-stable","images":{"feat_wpgql.optimized.png":{"width":600,"height":252,"webpPath":"feat_wpgql.optimized.webp","optimizedPath":"feat_wpgql.optimized.optimized.png"},"feat_wpgql.png":{"width":1000,"height":420,"webpPath":"feat_wpgql.webp","optimizedPath":"feat_wpgql.optimized.png"},"graphql.optimized.png":{"width":600,"height":265,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":725,"height":320,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"wpgraphql.optimized.png":{"width":600,"height":317,"webpPath":"wpgraphql.optimized.webp","optimizedPath":"wpgraphql.optimized.optimized.png"},"wpgraphql.png":{"width":1013,"height":535,"webpPath":"wpgraphql.webp","optimizedPath":"wpgraphql.optimized.png"},"wpgraphql_frameworks.optimized.png":{"width":600,"height":112,"webpPath":"wpgraphql_frameworks.optimized.webp","optimizedPath":"wpgraphql_frameworks.optimized.optimized.png"},"wpgraphql_frameworks.png":{"width":1135,"height":211,"webpPath":"wpgraphql_frameworks.webp","optimizedPath":"wpgraphql_frameworks.optimized.png"}}},{"content":"\\r\\nAfter breaking down [Angular and its versions](https://blog.graphqleditor.com/angular-overview/) it\'s time to do a deeper dive into the inner workings of the framework, namely directives. They are the main advantage of working with Angular and should help anyone working with the framework by providing useful, reusable solutions to both experienced users and those just starting out. Before we get into the particulars let\u2019s look at what they actually are.\\r\\n\\r\\n## What exactly are Directives?\\r\\n\\r\\nDirectives are basically functions that are executed when the compiler finds them. Their role is to enhance the capabilities of HTML by attaching custom behaviors to the DOM. Since version 2.0 Angular has three types of directives:\\r\\n- structural directives, \\r\\n- attribute directives,\\r\\n- components,\\r\\n\\r\\n\\r\\nAngular provides you with a number of built-in directives, but you can also create your own or use custom ones made by others.\\r\\n\\r\\n\\r\\n## Structural\\r\\n\\r\\nStructural directives are responsible for HTML layout. They change the structure of the DOM by adding, removing, or manipulating elements. Structural directives are easily recognizable as they contain an asterisk prefix before their name. The most popular built-in structural directives are:\\r\\n\\r\\n- **NgIf**: allows conditional rendering of template parts, it will show or hide an HTML element on your Angular HTML template based on the fulfillment of the defined condition\\r\\n\\r\\n- **NgFor**: a repeater directive which outputs a list of elements by iterating over an array, it helps build data presentation lists and tables in the HTML templates.\\r\\n\\r\\n- **NgSwitch**: works just like JavaScritpt\u2019s switch statement ie. displays one or more DOM elements based on a predefined condition.\\r\\n\\r\\n![Structural directive example in Angular](structural_directive.png)\\r\\n\\r\\n##### Source: [angular.io](https://angular.io/docs)\\r\\n\\r\\n## Attribute\\r\\n\\r\\nAttribute directives are responsible for listening to and modifying the behavior of other HTML elements, attributes, properties, and components in the DOM structure. The name comes from the fact they are applied to elements as if they were HTML attributes. The most popular built-in attribute directives are:\\r\\n\\r\\n- **NgClass**: dynamically sets CSS classes for a DOM element, this can be used in a variety of ways to change styles and hide or show content.\\r\\n\\r\\n- **NgStyle**: sets many inline styles simultaneously and dynamically based on the state of the component, useful for dynamically changing the appearance of elements.\\r\\n\\r\\n- **NgModel**: Angular\u2019s solution to the two-way data binding problem, binds the value of HTML controls to application data.\\r\\n\\r\\n![Attribute directive example in Angular](attribute_directive.png)\\r\\n##### Source: [angular.io](https://angular.io/docs)\\r\\n\\r\\n\\r\\n## Components\\r\\nComponents are actually directives with templates, as they are the main point of working with Angular you could say an Angular application is a tree of components. Components entail behavior (what to do with data and how to respond to user interactions) and a template (how the data is rendered). While this may sound simple it supports basic as well as advanced interactions and is essential in reducing the time and effort it takes to create an app.\\r\\n\\r\\n- **Angular Components (formerly Angular Material)**: the official component package made by the team behind Angular itself. It\u2019s a set of tools for creating tailor-made components using common interaction patterns according to the Angular team\u2019s best practices. It also ensures design consistency and seamless user experience across various operating systems (Windows, macOS, iOS, Android, Chrome OS)\\r\\n\\r\\n- **NGX-Bootstrap**: all core Bootstrap components powered by Angular including alerts, buttons, pagination, progress bar and interactive elements like dropdown menus, custom tooltips and others. You don\u2019t need to use original JS components, just use Bootstrap\u2019s markup and CSS. Built with adaptability in mind the aim here is to provide a performance boost for both mobile and desktop apps whether you are starting from scratch or planning to integrate it into existing work.\\r\\n\\r\\n- **PrimeNG**: probably the most complete UI suite for Angular with over 80 components aimed at helping UI designers speed up the development process. Includes input components (AutoComplete, Calendar, KeyFilter) panel components (TabView, Toolbar, ScrollPanel) advanced components (Galleria, Drag and Drop, Progress Bar, Captcha) and many many others. To put it short, if you\u2019re creating UI this is the way to go.\\r\\n\\r\\n- **NGX Admin**: a front-end admin dashboard based on Angular 9+ and Nebular with Eva Design System support. Contains components like charts, tables, maps, forms, editors, responsive layout, high resolution and others. Ensures consistency across all devices from desktop to mobile. Additionally offers 4 visual themes to choose from (light, dark, corporate and cosmic) comes with 2 dashboards, IoT and e-commerce, and over 40 pages to choose from. Little wonder it\'s so popular with almost 22000 stars on GitHub.\\r\\n\\r\\n\\r\\n![Example of Angular component which is also a directive](component.png)\\r\\n##### Source: [angular.io](https://angular.io/docs)\\r\\n\\r\\n\\r\\n\\r\\nAll of those are updated fairly often, along with Angular itself, so if you\u2019re looking for some features that aren\'t mentioned here, check out the planned roadmaps, maybe they\u2019ll get added soon. Obviously there\'s also tons of other libraries you can find on GitHub or you can always create your own or tailor those already made to your needs. The key here is finding what will fit your workflow and what you find actually helpful. It might take a while to find the right fit for you, but most of those working with Angular will assure you it\'s worth it.\\r\\n","data":{"title":"Angular directives - the most-used units in Angular","date":"2020-11-26T11:01:00.284Z","image":"feat_angulardir.png","author":"Michal"},"path":"angular-directives","images":{"attribute_directive.optimized.png":{"width":600,"height":320,"webpPath":"attribute_directive.optimized.webp","optimizedPath":"attribute_directive.optimized.optimized.png"},"attribute_directive.png":{"width":2118,"height":1128,"webpPath":"attribute_directive.webp","optimizedPath":"attribute_directive.optimized.png"},"component.optimized.png":{"width":600,"height":187,"webpPath":"component.optimized.webp","optimizedPath":"component.optimized.optimized.png"},"component.png":{"width":2118,"height":660,"webpPath":"component.webp","optimizedPath":"component.optimized.png"},"feat_angulardir.optimized.png":{"width":600,"height":252,"webpPath":"feat_angulardir.optimized.webp","optimizedPath":"feat_angulardir.optimized.optimized.png"},"feat_angulardir.png":{"width":1000,"height":420,"webpPath":"feat_angulardir.webp","optimizedPath":"feat_angulardir.optimized.png"},"structural_directive.optimized.png":{"width":600,"height":279,"webpPath":"structural_directive.optimized.webp","optimizedPath":"structural_directive.optimized.optimized.png"},"structural_directive.png":{"width":2118,"height":984,"webpPath":"structural_directive.webp","optimizedPath":"structural_directive.optimized.png"}}},{"content":"\\r\\nJamstack is a new architectural approach with the core principle of pre-rendering aiming to make web applications to:\\r\\n\\r\\n- run faster,\\r\\n- be more secure,\\r\\n- be easier to scale.\\r\\n\\r\\nAll that achieved with the use of many modern tools to bring productivity to the maximum. Sounds interesting right? This approach is gaining a lot of popularity which makes a market for new tooling supporting the Jamstack approach. RedwoodsJS is one of the new shining stars, its team believes that JAMstack is a huge leap forward in web development and they are doing their best to make it even more pleasant to work with.\\r\\n\\r\\n## RedwoodJS\\r\\n\\r\\nRedwood is an open-source project initiated by **Tom Preston-Werner, the co-founder of GitHub & creator of Jekyll** - one of the first static site generators. So what is Redwood?\\r\\n\\r\\n>*Imagine a React frontend, statically delivered by CDN, that talks via GraphQL to your backend running on AWS Lambdas around the world, all deployable with just a git push\u2014that\'s Redwood.*\\r\\n\\r\\nRedwoodJS is a highly opinionated, full-stack, serverless web application framework that aims to make building and deploying JAMstack apps as easy as possible. \\r\\n\\r\\n## The stack\\r\\n\\r\\nRedwoodJS uses some of the most popular cutting-edge technologies and by giving up the freedom of choosing your tech stack, you are gaining a significant reduction of the level of complexity of setting up all services to make your infrastructure work as intended:\\r\\n- **Frontend** - this part is covered by React supported by Apollo and it has a lot of code generators involved which let you create everything i.e. routes, pages, cells (even with already pre-configured tests) out of the box.\\r\\n\\r\\n- **Backend** - it\'s becoming difficult to talk about cutting-edge technologies without putting GraphQL into the equation. Redwood uses Prisma for its GraphQL backend, enabling quick creation of backends with graphical interfaces.\\r\\n\\r\\n- **Deployment** - Redwood\'s development team has support for several deployment targets on their roadmap with a top-priority to make deployment strategies in a way that makes it easy for additional targets to be added, as well as to make it easy to adjust to user\'s own deployment strategy. Right now it offers out of the box deployment to Netlify and Vercel, with AWS and Google Cloud Run high on their road map.\\r\\n\\r\\n![Diagram presenting RedwoodJS structure](redwood_structure.png)\\r\\n\\r\\n##### Source: [redwoodjs.com](https://redwoodjs.com/)\\r\\n\\r\\n## Concepts & features\\r\\n\\r\\nRedwood features a lot of new interesting concepts as well as brings a breath of fresh air to well-known ones. One of the most interesting ones are definitely:\\r\\n\\r\\n\\r\\n- **Cells** - they are one of the signature modes of abstraction in Redwood. Cells represent a declarative approach to data fetching which creates space (by providing conventions around data fetching) in between the request and the response which Redwood can utilize to perform its optimizations. All of this without writing a line of imperative code.\\r\\n\\r\\n![RedwoodJS cells concept](cells.png)\\r\\n##### Source: [redwoodjs.com](https://redwoodjs.com/)\\r\\n\\r\\n- **Redwood Router** -  Redwood features its own router that took inspiration from React Router, Ruby on Rails and Reach Router. It brings some awesome innovation to this crucial part of your app.\\r\\n\\r\\n![Router in RedwoodJS](router.png)\\r\\n##### Source: [redwoodjs.com](https://redwoodjs.com/)\\r\\n\\r\\nIf you interested in more detailed information about Redwood\'s concepts and its implementation make sure to visit [the official docs](https://redwoodjs.com/docs/introduction).\\r\\n\\r\\n\\r\\n## Not a 1.0 version\\r\\n\\r\\nRedwoodJS software has not reached a stable version 1.0 yet.\\r\\nIts team put Redwood in the later stages of the \\"make it work\\" phase in the \\"make it work; make it right; make it fast\\" paradigm. Although this makes it not suitable for production use, Redwood is a concept that is definitely worth following.\\r\\n","data":{"title":"RedwoodJS - bring full-stack to your JAMstack","date":"2020-11-23T13:31:00.284Z","image":"feat_redwoodjs.png","author":"Tomek"},"path":"redwoodjs","images":{"cells.optimized.png":{"width":600,"height":362,"webpPath":"cells.optimized.webp","optimizedPath":"cells.optimized.optimized.png"},"cells.png":{"width":1000,"height":604,"webpPath":"cells.webp","optimizedPath":"cells.optimized.png"},"feat_redwoodjs.optimized.png":{"width":600,"height":252,"webpPath":"feat_redwoodjs.optimized.webp","optimizedPath":"feat_redwoodjs.optimized.optimized.png"},"feat_redwoodjs.png":{"width":1000,"height":420,"webpPath":"feat_redwoodjs.webp","optimizedPath":"feat_redwoodjs.optimized.png"},"redwood_structure.optimized.png":{"width":600,"height":314,"webpPath":"redwood_structure.optimized.webp","optimizedPath":"redwood_structure.optimized.optimized.png"},"redwood_structure.png":{"width":1210,"height":634,"webpPath":"redwood_structure.webp","optimizedPath":"redwood_structure.optimized.png"},"router.optimized.png":{"width":600,"height":335,"webpPath":"router.optimized.webp","optimizedPath":"router.optimized.optimized.png"},"router.png":{"width":1000,"height":558,"webpPath":"router.webp","optimizedPath":"router.optimized.png"}}},{"content":"\\r\\nAfter writing a bit [about Vue](https://blog.graphqleditor.com/vue-overview/) and [its web components](https://blog.graphqleditor.com/vue-webcomponents/) I think it\'s only fair to take a look at its main competitors and their web components as well. Of these, two popular frameworks stand out: Facebook\'s React and Google\u2019s Angular. For now I\u2019ll focus on Angular and don\'t worry, React will get it\'s time to shine in a later piece. Let\u2019s start with a bit of a background on Angular\u2019s direct predecessor, AngularJS.\\r\\n\\r\\n\\r\\n## AngularJS\\r\\n\\r\\nAngular started out in 2010 as AngularJS, a JavaScript based frontend framework maintained by Google. It extends HTML vocabulary and helps developers quickly build web applications. AngularJS\u2019s main focus was on single-page applications, apps which interact with the user by dynamically rewriting the web page with new data, instead of the usual approach of reloading the entire page from the server. While still popular and widely used, for example by the likes of Paypal, Netflix and Snapchat, AngularJS is getting phased out next year. Covid related issues have forced a six month extension of the long term support phase, but it will only last until december 31st 2021 and everyone is expected to migrate to Angular.\\r\\n\\r\\n![Image presenting the Basics of AngularJS](angularjs.png)\\r\\n\\r\\n##### Source: [angularjs.org](https://angularjs.org/)\\r\\n\\r\\n## Angular 2+\\r\\n\\r\\nAngular dropped the \u2018JS\u2019 with the release of version 2, currently its on version 11. Each version signals a major update, comes out every 6 months and gets 6 months of active support followed by 12 months of long term support. The main disadvantage of Angular is that it\'s considered to have a much steeper learning curve than React or Vue. The biggest obstacle here is learning TypeScript and RxJS, but consistent updates also mean you\u2019ll need to keep up with new things added. The payout though is probably worth it, as Angular is a complex tool with a lot of useful features:\\r\\n\\r\\n- **Consistency:** Angular benefits from having Google\u2019s support which means consistent updates, long-term support and a seamless updating process. Code maintainability makes moving up to a new version as simple as writing one command and Angular and all related packages are updated at the same time, \\r\\n\\r\\n- **Modularity:** Angular\u2019s modular nature makes it easy to divide code into modules called buckets, reusable chunks of code which can reduce both the time and effort needed for development. The community is also a great help here and provides a variety of those ready for use,\\r\\n\\r\\n- **TypeScript:** Angular uses TypeScript a superscript for JavaScript, this ensures higher security and provides additional features (primitives, interfaces, enums etc.) However it is an additional language to learn which contributes to the steep learning curve of the framework,\\r\\n\\r\\n- **Declarative UI:** Angular uses HTML for creating templates. It\u2019s a declarative language used because of its scalability, innate intuitiveness and being less complex than JavaScript. This means you won\'t have to invest a lot of time in program flows and planning what loads first, all you need to do is map out what is needed and the framework will do the rest.\\r\\n\\r\\n![Angular is cross-platfrom, fast & very performant](fast.png)\\r\\n\\r\\n##### Source: [angular.io](https://angular.io/)\\r\\n\\r\\n## Turning it up to 11 \\r\\n\\r\\nAs mentioned above the team behind Angular aims to release a major version every six months. The current version is Angular 11 released on November 12th and it brings a bunch of new features and improvements. Let\'s look at a few of those:\\r\\n\\r\\n- **Operation byelog:** With 11s release the team has triaged and resolved their (quite sizable) backlog and fixed a ton of issues. The major news is the commitment to triage all new issues within two weeks,\\r\\n\\r\\n- **Performance and TypeScript 4.0 support:** Angular 11 is significantly faster, NGCC (the Angular compatibility compiler) is now two to four times faster. The new release also brings TypeScript 4.0 support which means additional features and faster compilation times,\\r\\n\\r\\n- **Experimental Webpack 5 support:** Webpack 5 was released recently with some major changes so the support is opt-in and experimental, by default Angular 11 still uses Webpack 4 and will soon probably support both,\\r\\n\\r\\n- **Automatic Inlining of Fonts:** A quality of life improvement, the Angular CLI will now automatically download and inline fonts that are being used or linked to in the application.\\r\\n\\r\\nAlong with the updates Angular also maintains a really detailed roadmap for features in progress of being implemented and those planned on being implemented in the future. If the features described here didn\'t convince you or you\u2019re simply looking at what\u2019s next for Angular head on over there and check it out. As previously with Vue, next time we\u2019ll take a look at directives, which are basically Angular\u2019s version of web components, so stay tuned and see you next time.\\r\\n","data":{"title":"Angular - a short overview","date":"2020-11-19T12:01:00.284Z","image":"feat_angular.png","author":"Michal"},"path":"angular-overview","images":{"angularjs.optimized.png":{"width":600,"height":295,"webpPath":"angularjs.optimized.webp","optimizedPath":"angularjs.optimized.optimized.png"},"angularjs.png":{"width":638,"height":314,"webpPath":"angularjs.webp","optimizedPath":"angularjs.optimized.png"},"fast.optimized.png":{"width":600,"height":243,"webpPath":"fast.optimized.webp","optimizedPath":"fast.optimized.optimized.png"},"fast.png":{"width":1000,"height":405,"webpPath":"fast.webp","optimizedPath":"fast.optimized.png"},"feat_angular.optimized.png":{"width":600,"height":252,"webpPath":"feat_angular.optimized.webp","optimizedPath":"feat_angular.optimized.optimized.png"},"feat_angular.png":{"width":1000,"height":420,"webpPath":"feat_angular.webp","optimizedPath":"feat_angular.optimized.png"}}},{"content":"\\r\\n\\r\\n\\r\\nThe most important part of any web or mobile app is the content it provides. Exchanging data is a fundamental feature of any modern app. What distinguishes a great app from a  mediocre one is the quality of accessing & presenting the data. Using API is the most popular way of setting up a communication system between external systems. Building a great API is a complicated process. Fortunately, there are many tools to help us out. One of them is a library called Searchkit.\\r\\n\\r\\n## Searched focused API made easy\\r\\n\\r\\n[Searchkit](https://github.com/searchkit/searchkit) is a tool allowing you can quickly build a search experience using predefined GraphQL resolvers and React components. Built on the top of Apollo GraphQL, React & Elasticsearch, Searchkit makes building a high-quality API a lot easier. The library provides GraphQL resolvers dedicated to handling the most common use cases you could think of when using filtering oriented API beginning with basic operations such as simple querying, ending on more tricky ones such as efficient facet filtering or pagination.\\r\\n\\r\\n\\r\\nFeatures:\\r\\n- **Designed for Search UI** - Searchkit\'s resolvers combined with the power of Elasticsearch & Apollo GraphQL makes it easy to build your search-focused API.\\r\\n- **Client-oriented** - many APIs end up being completely out of touch with the client\'s actual needs. Searchkit is listened to the needs of the client-side making it super easy to integrate with your web or mobile app.\\r\\n- **Efficient Search** - the library makes the faceted search easy by providing numerous ways of filtering. Text, numbers, dates? They got you covered.\\r\\n- **Highly Customisable** - Searchkit is easily customizable and doesn\'t make you bound with Elasticsearch, if you prefer to fetch information from different sources you can write your own resolvers. GraphQL makes it super easy to customize the API with your own data without interacting with Searchkit\'s core.\\r\\n\\r\\n## Out the box React Components\\r\\n\\r\\nThe makers of the Searchikit are motivated by the idea of providing a great search experience for all users, even those not fluent in Elasticsearch & React. For this group of users Searchkit offers an out of the box solution that provides UI components flawlessly working with Searchkit\'s API. If you are looking for a search solution for your project Searchkit delivers a great search experience in no time by leveraging Elastic\'s EUI React components.\\r\\n\\r\\n```\\r\\nyarn add @searchkit/client @searchkit/elastic-ui @elastic/eui\\r\\n```\\r\\n\\r\\n![Gif presenting Searchkit example](searchkit.gif)\\r\\n\\r\\n##### Source: [searchkit.co](https://www.searchkit.co/)\\r\\n\\r\\nTo get more in-depth information on how to start building your API with Searchkit make sure to visit its [official documentation](https://www.searchkit.co/docs) and [GitHub page](https://github.com/searchkit/searchkit). Have fun!\\r\\n","data":{"title":"Searchkit - Search UI with GraphQL, React and Elasticsearch","date":"2020-11-17T14:05:00.284Z","image":"feat_searchkit.png","author":"Tomek"},"path":"searchkit","images":{"feat_searchkit.optimized.png":{"width":600,"height":252,"webpPath":"feat_searchkit.optimized.webp","optimizedPath":"feat_searchkit.optimized.optimized.png"},"feat_searchkit.png":{"width":1000,"height":420,"webpPath":"feat_searchkit.webp","optimizedPath":"feat_searchkit.optimized.png"},"searchkit.gif":{"width":600,"height":335,"webpPath":"searchkit.webp","optimizedPath":"searchkit.optimized.gif.png"},"searchkit.optimized.gif.png":{"width":600,"height":335,"webpPath":"searchkit.optimized.gif.webp","optimizedPath":"searchkit.optimized.gif.optimized.png"}}},{"content":"\\r\\n[In my previous blog post I outlined what Vue is](https://blog.graphqleditor.com/vue-overview/) and went through a bit of its history and versions one through three and their key features. Like I mentioned there **Web Components have long been a key part of Vue and they are a powerful feature** that deserves a bit more than a brief mention. If you\u2019re not familiar with Vue or you just want to read about it head on here, if not let\u2019s get right into Web Components and what they\u2019re all about.\\r\\n\\r\\n## The basics\\r\\n\\r\\nWeb Components are a set of features that let you create new custom, reusable, encapsulated HTML tags for use in web pages and apps. They are supported by every major browser and are backwards compatible through Javascript-based custom libraries. Basically they can be used with any JavaScript library or framework that works with HTML. To be precise Web Components consist of three technologies which work together:\\r\\n\\r\\n- **Custom Elements** - HTML elements with custom behaviours, templates and tag names made with a set of JavaScript APIs,\\r\\n- **Shadow DOM** - a \u2018*DOM within a DOM*\u2019 it\u2019s its own isolated DOM tree with its own elements and styles completely separate from the original DOM. This allows encapsulation and componentization natively on the web platform without having to rely on iframes,\\r\\n- **HTML Templates** - a tool for holding HTML which is not to be rendered when a page is loaded but instead can be instantiated when called upon.\\r\\n\\r\\n## What\u2019s that got to do with Vue?\\r\\n\\r\\nNow with that brief outline of the general functionality of Web Components behind us, let\'s focus on where Vue comes in. As mentioned previously the new features in Vue 3 are a major help here when it comes to components. The Composition API offers more flexibility as code can now be organized as functions, each dealing with a specific feature. It also makes extracting and reusing logic between components much easier. Teleport allows specifying template HTML that can be sent to another part of the DOM or even outside the scope of the app. Which is useful if one component has some HTML that has to get rendered in an alternative location for example if it\'s run on a widget or a small part of the webpage. Additionally Vue has long provided the ability to package SFCs or single file components as a Web Component, which basically lets you create and use your own custom HTML tags. \\r\\n\\r\\n![Teleport in Vuejs](teleport_vue.png)\\r\\n\\r\\n##### Source: [Vuejs.org](https://v3.vuejs.org/guide/teleport.html)\\r\\n\\r\\n## You\u2019re not on your own\\r\\n\\r\\nAll this makes Vue a very straightforward and easily customizable tool for developers wanting to work with Web Components. As I mentioned you can quite easily start working on your own components or you can hop on GitHub and check out some of those made by the community. Let\u2019s take a look at that:\\r\\n\\r\\n- **Vuetify** - a UI framework built on top of Vue.js lets you create clean, semantic, reusable UI components and works with Vue\u2019s Server Side Rendering (SSR). It provides over 80 Vue components which makes for a pretty nice base for creating apps with way less effort.\\r\\n\\r\\n- **Vue Material** - a scalable library made exactly in accordance with the Google Material Design specs. Contains over 56 components useful for making complex app shells and will help make apps that can fit on every screen with support for all modern Web Browsers.\\r\\n\\r\\n- **Quasar** - a full-fledged framework that supports features like minification and caching. Additionally it provides components for your framework, over 80 of them in fact. It also provides support for each build mode (SPA, SSR, PWA, Mobile app, Desktop app & Browser Extension) and has tight integration with its own CLI. Quasar is fairly extensive and has in-depth documentation and robust end-to-end implementation.   \\r\\n\\r\\n- **Buefy** - lightweight UI component library based on Vue and Bulma (a CSS framework) Simply put Buefy provides a JavaScript layer for interfaces created with Bulma CSS. If you\u2019re looking to build apps with a simple and intuitive interface this tool will help you hit the ground running.\\r\\n\\r\\n- **iView** - a Vue.js 2.0 based library which provides a number of high quality UI components and widgets. It also has its own CLI tool, iView-cli, which has a visual tool for component scaffolding and an offline version of the documentation. If you\u2019re into neat and elegant design this is the way to go.\\r\\n\\r\\n![Vue Web Components libraries](vue_libs.png)\\r\\n\\r\\n\\r\\n## Which to choose? \\r\\n\\r\\nThat\u2019s a lot of components right? The idea is to help get your project off the ground as quickly and easily as possible by providing you with a base of useful components. This way you can start working on your app right away without spending time on making your own components. Not that there\'s anything wrong with that, you can add our own components and Vue is a great help with that. Bear in mind most of these tools are geared towards a certain type of app, so you\u2019ll have to check out which one fits your needs best. There\u2019s plenty to choose from on GitHub, you can use them, join one of the communities behind those mentioned above and improve it or even create your own libraries to help others. The possibilities here are almost limitless.\\r\\n","data":{"title":"Vue - introduction to Web Components","date":"2020-11-12T10:17:00.284Z","image":"feat_vuewc.png","author":"Michal"},"path":"vue-webcomponents","images":{"feat_vuewc.optimized.png":{"width":600,"height":252,"webpPath":"feat_vuewc.optimized.webp","optimizedPath":"feat_vuewc.optimized.optimized.png"},"feat_vuewc.png":{"width":1000,"height":420,"webpPath":"feat_vuewc.webp","optimizedPath":"feat_vuewc.optimized.png"},"teleport_vue.optimized.png":{"width":600,"height":322,"webpPath":"teleport_vue.optimized.webp","optimizedPath":"teleport_vue.optimized.optimized.png"},"teleport_vue.png":{"width":2032,"height":1092,"webpPath":"teleport_vue.webp","optimizedPath":"teleport_vue.optimized.png"},"vue_libs.optimized.png":{"width":600,"height":252,"webpPath":"vue_libs.optimized.webp","optimizedPath":"vue_libs.optimized.optimized.png"},"vue_libs.png":{"width":1000,"height":420,"webpPath":"vue_libs.webp","optimizedPath":"vue_libs.optimized.png"}}},{"content":"\\r\\nVue has definitely been making rounds in the dev community as of late. According to recent surveys, like the 2020 Stack Overflow Survey, it\'s now the 7th most popular frontend Javascript framework. If you\u2019re familiar with building web applications chances are you\u2019ve already heard about it quite a bit. If you haven\u2019t or you\u2019re just curious to hear more, look no further. I\'ll try to provide a brief and hopefully at least a bit helpful summary here.\\r\\n\\r\\n## Vue 1\\r\\n\\r\\nDevelopment of Vue.js started all the way back in 2013 with the first versions coming out in 2014 and the production ready 1.0 version coming out in October of 2015. The first big break came when the Laravel community picked it over React and its popularity has been steadily growing ever since. The big advantages highlighted since the 1.0 release were:\\r\\n\\r\\n- **Simplicity** - especially in comparison to React, most devs agreed Vue is a lot easier to get into\\r\\n- **Reactivity** - models are JavaScript objects, when you modify them the view updates automatically\\r\\n- **Stability** - from version 0.1 to 1.0 Vue had maintained 100% test coverage and GitHub issues were resolved on average in 13 hours\\r\\n\\r\\nAnd finally, the components. Especially handy for structuring more complex interfaces, they\u2019re custom elements that get assigned specified behavior by the Vue.js compiler. Additionally they\u2019re reusable, modular and can fit inside other components to form a tree representing your UI. Components have been one of the most powerful features of Vue since 1.0 so I\u2019ll go into more detail on them next week.\\r\\n\\r\\n## Vue 2\\r\\n\\r\\nIn the following year Vue cracked the top 30 all-time ranking on GitHub and 1 million downloads on NPM. The next step was the release of Vue 2.0 in September 2016. Aside from the usual bug fixes, updates to documentation and API design, the new version focused on further improving Vue.js\u2019s strengths.\\r\\n\\r\\n- **Performance** - the rendering layer overhaul improved initial rendering speed and memory consumption by up to 2-4 times making Vue 2 one of the fastest frameworks available and significantly faster than React or Angular.\\r\\n\\r\\n- **Render functions** - aside from optimization 2.0 also gave the users a bit more flexibility, by default templates are compiled into Virtual DOM render functions, but users who prefer it can directly author render functions in JavaScript and there\'s even an optional plugin for JSX.\\r\\n\\r\\n- **Server Side Rendering** - SSR support with component level caching and client-side hydration provides another boost to performance and allows for extremely fast rendering.\\r\\n\\r\\n- **Component updates** - several key components like vueify, vuex and vue-router also received improvements.\\r\\n\\r\\n## Vue 3\\r\\n\\r\\nAs I mentioned previously Vue has been steadily growing more popular every year, now it has over 1.3 million users worldwide. This year could take it even further since the much anticipated Vue 3.0 was finally released on September 18th. Once again the focus is to build on its strengths as creator Evan You outlined Vue 3 is faster, smaller, more maintainable and easier to target native. Let\u2019s take a look at the highlights:\\r\\n\\r\\n- **Another boost to performance** - a rewritten virtual DOM and compiler-informed fast paths make Vue 3 even faster than the previous version. Looking at the numbers it\'s up to 55% faster, 41% lighter and uses up to 54% less memory than Vue 2. \\r\\n\\r\\n- **A completely new API** - the biggest change this time is the new Composition API which provides an alternative syntax for writing large scale applications and enables logic composition and reuse similar to React Hooks. It\'s also compatible with Vue 2.x via a special plugin and has utility libraries that work for both Vue 2 and 3.\\r\\n\\r\\n- **Teleporting components** - Teleport is Vue\u2019s version of React\u2019s Portal, as the name suggests it teleports an object from one place to another. To be precise it allows you to define a component in one place and render it in a different position in the DOM tree or even outside the scope of the app.\\r\\n\\r\\n- **Multi-root components support** - this feature allows declaring any number of root elements on single-file components. Now there\'s no need for special plugins, the new Fragments API handles multiple root elements by itself. \\r\\n\\r\\n\\r\\nAlongside the release there\'s already some planned next steps for the final months of 2020 such as IE11 support and migration. For now it looks like Vue\u2019s future is looking up and it might overtake the likes of Angular and React in the next few years. Even if it won\'t, that\'s still damn impressive for something, which as its creator stated, started out as just a side project to help him with his own work. \\r\\n\\r\\n## The whole story \\r\\n\\r\\nIt\'s almost unimaginable that Vue, which began as a side project of a Google developer, now shares the podium with top JS frameworks like React & Angular! Make sure to check out this inspiring Vue.js documentary by Honeypot:\\r\\n\\r\\n[![Vue Documentary](vue_yt.png)](https://www.youtube.com/watch?v=OrxmtDw4pVI)\\r\\n\\r\\n","data":{"title":"VUE - a short overview","date":"2020-11-09T10:17:00.284Z","image":"feat_vue.png","author":"Michal"},"path":"vue-overview","images":{"feat_vue.optimized.png":{"width":600,"height":252,"webpPath":"feat_vue.optimized.webp","optimizedPath":"feat_vue.optimized.optimized.png"},"feat_vue.png":{"width":1000,"height":420,"webpPath":"feat_vue.webp","optimizedPath":"feat_vue.optimized.png"},"vue_yt.optimized.png":{"width":600,"height":290,"webpPath":"vue_yt.optimized.webp","optimizedPath":"vue_yt.optimized.optimized.png"},"vue_yt.png":{"width":720,"height":348,"webpPath":"vue_yt.webp","optimizedPath":"vue_yt.optimized.png"}}},{"content":"\\r\\nGraphQL\u2019s astounding growth is attracting more and more developers each year, according to the State of JavaScript 2019 report, it\'s used by 39% of devs, with another 51% wanting to learn it. The most commonly named obstacle is that GraphQL requires building and maintaining your own backend. That\u2019s why a number of GraphQL tools attempt to either help you with that or even do it for you.\\r\\n\\r\\n## GraphQL & Dgraph\\r\\n\\r\\nOne of those tools is Dgraph, which I mentioned in part three of my overview of GraphQL tools and libraries. It\'s the highest rated graph database on GitHub and has over a million pulls on Docker. I highlighted some of its advantages like horizontal scalability and ACID transactions, but obviously nothing is perfect and it had some drawbacks. It used its own query language, GraphQL +-,  which as the name suggests, had some bits of GraphQL and didn\'t have some others. For example, it didn\'t work with GraphQL GUIs like GraphiQL or the Apollo React client.\\r\\n\\r\\n![Only graphql. no DB management](nodb.png)\\r\\n\\r\\n##### Source: [dgraph.io/slash-graphql](https://dgraph.io/slash-graphql)\\r\\n\\r\\n## Slash GraphQL enters the scene\\r\\n\\r\\nNow the creators of Dgraph have launched Slash GraphQL, the first GraphQL-native database backend-as-a-service. Well, that was a bit of a word salad, let\u2019s try and make it a bit less convoluted. To put it simpler, Slash GraphQL is a fully managed GraphQL backend service powered by Dgraph. Let\u2019s take a look what that means:\\r\\n\\r\\n- **It\'s GraphQL native** - unlike other tools which run on top of another non-native database, Slash GraphQL has a GraphQL native database, which greatly impacts performance and scaling by handling GraphQL traversals, joins, and retrievals in the most optimal way possible.\\r\\n\\r\\n- **It\'s compatible** - another plus of it being native is that it takes full advantage of GraphQL. No more problems with React or GUIs, Slash GraphQL works with everything in the GraphQL ecosystem, you can even create your own instance with GraphQL.\\r\\n\\r\\n- **It\'s really fast and simple** - remember that obstacle I mentioned before? With Slash GraphQL it\u2019s as simple as specifying the schema and pressing the deploy button. That\u2019s how quickly and easily it will provide you with a production-ready backend for your app.\\r\\n\\r\\n## A different approach\\r\\n\\r\\nThe main draw here is the native GraphQL database. Other tools set up a GraphQL layer on top of an existing database which acts as a bottleneck in terms of performance, and scalability and creates compatibility issues. On top of that users need to make sure to set their tables correctly according to the underlying database before they begin working on a schema, which creates unnecessary hassle. Then with every change to the schema they have to again make changes to the underlying table, which depending on the structure can be quite complicated and time-consuming, ie. even more hassle. With Slash GraphQL you avoid all of that, all you need to work on is the schema and it will create backend for you with a simple click of a button.\\r\\n\\r\\n![Slash vs other systems](slash_vs.png)\\r\\n\\r\\n##### Source: [dgraph.io/slash-graphql](https://dgraph.io/slash-graphql)\\r\\n\\r\\n## The game-changer?\\r\\n\\r\\nLooking at GraphQL\u2019s rising popularity it\'s hard not to see Slash GraphQL might be a game-changer for the GraphQL ecosystem and will be gaining popularity alongside it. As mentioned previously, it practically eliminates what most said is the biggest obstacle in getting into GraphQL, building and maintaining the backend. Simplifying the process really changes the learning curve, you don\'t need to write backend, know resolver patterns, or think about the tables and the database. All you need to know is GraphQL and you can get right to building your app. Looking at that 51% of devs who want to learn GraphQL, there\'s plenty of people who\u2019ll do just that. Will Slash revolutionize the world of GraphQL? We need to wait a bit more to see.\\r\\n","data":{"title":"Slash GraphQL - a fully managed GraphQL backend service","date":"2020-10-29T14:17:00.284Z","image":"feat_slash.png","author":"Michal"},"path":"slash-graphql","images":{"feat_slash.optimized.png":{"width":600,"height":252,"webpPath":"feat_slash.optimized.webp","optimizedPath":"feat_slash.optimized.optimized.png"},"feat_slash.png":{"width":1000,"height":420,"webpPath":"feat_slash.webp","optimizedPath":"feat_slash.optimized.png"},"nodb.optimized.png":{"width":600,"height":259,"webpPath":"nodb.optimized.webp","optimizedPath":"nodb.optimized.optimized.png"},"nodb.png":{"width":808,"height":349,"webpPath":"nodb.webp","optimizedPath":"nodb.optimized.png"},"slash_vs.optimized.png":{"width":600,"height":276,"webpPath":"slash_vs.optimized.webp","optimizedPath":"slash_vs.optimized.optimized.png"},"slash_vs.png":{"width":1000,"height":460,"webpPath":"slash_vs.webp","optimizedPath":"slash_vs.optimized.png"}}},{"content":"\\r\\nWe\'ve just launched **GraphQL Editor 3.0** and I must say it\'s nothing like a year ago as we released it. When we started our vision was to provide an alternative way of designing a GraphQL schema, but what we ended up with is a lot more. \\r\\n\\r\\nThis is the biggest release from the beginning of GraphQL Editor. It introduces many new features as well as improvements to the interface, all to provide our users with the fastest and easiest way to build & manage your GraphQL schema and could not have been done without 20 000+ developers using our tool and the valuable feedback they provide!\\r\\n\\r\\n\\r\\n![New features of GraphQL Editor gif](editor_3.gif)\\r\\n\\r\\n\\r\\n## What\u2019s new\\r\\n\\r\\n### \ud83d\udcdd Editor\\r\\nThe main feature of our tools is facilitating building and managing a GraphQL schema. The latest release introduced a completely reworked hierarchy view and new *Organizer Mode*, allowing for even faster creation and navigation through the schema.\\r\\n\\r\\n![GraphQL Editor](editor.png)\\r\\n\\r\\n### \ud83c\udf0c Faker\\r\\nFaker is one of our users\' most-loved features. In this version, we believe we have improved it a lot by allowing you to specify faker values from faker.js as well as to specify an array of values to choose a random value from that array. Oh and it all comes in a new nice dark theme!\\r\\n\\r\\n![GraphQL Editor contains better Faker](faker.png)\\r\\n\\r\\n\\r\\n### \ud83d\udcda JAMStack\\r\\nThe new version of the GraphQL Editor allows you to export JAMStack sites & bundles. The JAMStack way is becoming more & more popular and we want to facilitate our user this new way to build websites and apps.\\r\\n\\r\\n![GraphQL Editor makes JAMStack way a lot easier](jamstack.png)\\r\\n\\r\\n### \u2699\ufe0f Automatically generated documentation\\r\\nBeing able to auto-generate documentation of a GraphQL schema is such an improvement for every developer that we have decided that this feature should be available for every project.\\r\\n\\r\\n![Autogenerated GraphQL schema documentation](docs.png)\\r\\n\\r\\nWe have also improved:\\r\\n- **Live collaboration** \ud83d\udc68\u200d\ud83d\udcbb\ud83d\udc69\u200d\ud83d\udcbb - now you can invite an unlimited number of viewers to every team at any time,\\r\\n\\r\\n- **GraphQL Editor guide** \ud83d\udcd1 - we released a full guide to learn how to unleash the full potential of the GraphQL Editor in your projects.\\r\\n\\r\\n\\r\\nSo basically this is what we have been working on last year. We are really excited to finally be able to ship it to production. We would love to hear what you think so please make sure to try a new version yourself:\\r\\n\\r\\n**Check out the new editor \ud83d\udc49 [GraphQL Editor](https://graphqleditor.com/)**\\r\\n\\r\\n**Find us on Product Hunt \ud83d\udc49 [Product Hunt Page](https://www.producthunt.com/posts/graphql-editor-3-0)**\\r\\n\\r\\nThat\'s all for this release but we are not slowing down as a matter of fact we are already thinking about the next one. Our team is dedicated to improving the GraphQL ecosystem and we want to do that by open-sourcing part of our project that might be useful for other developers. The next big thing we are working on is an open-source Serverless GraphQL Backend which we hope to have ready for the next big release! Stay tuned!\\r\\n","data":{"title":"GraphQL Editor 3.0 - new release","date":"2020-10-27T10:37:00.284Z","image":"feat_3.png","author":"Tomek"},"path":"graphql-editor-3","images":{"docs.optimized.png":{"width":600,"height":337,"webpPath":"docs.optimized.webp","optimizedPath":"docs.optimized.optimized.png"},"docs.png":{"width":676,"height":380,"webpPath":"docs.webp","optimizedPath":"docs.optimized.png"},"editor.optimized.png":{"width":600,"height":337,"webpPath":"editor.optimized.webp","optimizedPath":"editor.optimized.optimized.png"},"editor.png":{"width":676,"height":380,"webpPath":"editor.webp","optimizedPath":"editor.optimized.png"},"editor_3.gif":{"width":600,"height":340,"webpPath":"editor_3.webp","optimizedPath":"editor_3.optimized.gif.png"},"editor_3.optimized.gif.png":{"width":600,"height":340,"webpPath":"editor_3.optimized.gif.webp","optimizedPath":"editor_3.optimized.gif.optimized.png"},"faker.optimized.png":{"width":600,"height":337,"webpPath":"faker.optimized.webp","optimizedPath":"faker.optimized.optimized.png"},"faker.png":{"width":676,"height":380,"webpPath":"faker.webp","optimizedPath":"faker.optimized.png"},"feat_3.optimized.png":{"width":600,"height":252,"webpPath":"feat_3.optimized.webp","optimizedPath":"feat_3.optimized.optimized.png"},"feat_3.png":{"width":1000,"height":420,"webpPath":"feat_3.webp","optimizedPath":"feat_3.optimized.png"},"jamstack.optimized.png":{"width":600,"height":337,"webpPath":"jamstack.optimized.webp","optimizedPath":"jamstack.optimized.optimized.png"},"jamstack.png":{"width":676,"height":380,"webpPath":"jamstack.webp","optimizedPath":"jamstack.optimized.png"}}},{"content":"\\r\\n\\r\\nIt took a while, but nevertheless, here it finally is - **GraphQL Tools & Libraries Part 3**. If you missed it here\u2019s a [link to part one](https://blog.graphqleditor.com/graphql-tools-partone/) & [part two](https://blog.graphqleditor.com/graphql-tools-parttwo/) of GraphQL tools & libraries. Now let\u2019s dig in.\\r\\n\\r\\n\\r\\n## Graphene Python\\r\\n\\r\\nGraphene Python is a library for building GraphQL APIs with Python. It\u2019s declared goal is to provide a simple and extendable API to make devs lives easier. While fast and easy to use it\u2019s also versatile and data-agnostic. Graphene offers:\\r\\n\\r\\n- Integrations with different frameworks like Django, SQLAlchemy, and Google App Engine,\\r\\n- Instantly ready to use, will work out of the box with your current stack \\r\\n- Built-in Relay support,\\r\\n- Supports every kind of data source, SQL, NoSQL, custom Python objects, and others.\\r\\n\\r\\n![Graphene Python](graphene.png)\\r\\n##### Source: [graphene-python.org](https://graphene-python.org/)\\r\\n\\r\\n## Firecamp\\r\\n\\r\\nUnlike many tools and libraries that aim to help here and there, Firecamp is a larger tool packed with features that aim to be a swiss army knife for API development. They describe it as a campsite for developers to test and enhance their work. It serves both as a multi-purpose dev tool and as a platform to test HTTPs, WebSocket, and GraphQl endpoints. Among noteworthy Firecamp features we will find:\\r\\n\\r\\n- visual components that make everything look more transparent and professional\\r\\n- introspection viewer which lets you review schema\\r\\n- code snippet generator for over 10 different languages\\r\\n- automatically managed query history for previous query requests\\r\\n\\r\\n![GraphQL Firecamp](firecamp.png)\\r\\n##### Source: [firecamp.io](https://firecamp.io/graphql/)\\r\\n\\r\\n## Dgraph\\r\\n\\r\\nDgraph prides itself on being the only native GraphQL Database with a graph backend. It has some pretty ambitious goals as its description states:\\r\\n\\r\\n> *Dgraph\'s goal is to provide Google production-level scale and throughput, with low enough latency to be serving real-time user queries, over terabytes of structured data.*\\r\\n\\r\\nLooking at it, the main advantages here is that it\u2019s scalable and distributed while the biggest feature is ACID transactions. To put it short, it\'s a set of properties a database system maintains during transaction execution that guarantees data validity in spite of errors, power outages, and other problems.\\r\\n\\r\\n- shared and distributed architecture\\r\\n- GraphQL inspired language\\r\\n- distributed ACID transactions\\r\\n\\r\\n![Dgraph GraphQL](dgraph.png)\\r\\n##### Source: [dgraph.io](https://dgraph.io/)\\r\\n\\r\\n## GraphQL Zeus\\r\\n\\r\\nZeus is a clever GraphQL fetching tool with type-safe requests and responses. The key feature here is that it provides autocompletion for strongly typed queries for Javascript or TypeScript but not limited to that!\\r\\n\\r\\n- query autocompletion for strongly typed queries,\\r\\n- supports mapped types,\\r\\n- JS/TS support (Browser, NodeJS, and React Native),\\r\\n- simpler approach to GraphQL parsing using the graphql-js library and parsing AST to simpler types.\\r\\n\\r\\n![GraphQL Zeus](zeus.png)\\r\\n##### Source: [graphql-zeus](https://github.com/graphql-editor/graphql-zeus)\\r\\n\\r\\n\\r\\n## AWS AppSync\\r\\n\\r\\nAWS AppSync is a powerful application development service that adds additional functionality on top of GraphQL. The key selling point here is that it reduces the amount of code you need to write and accelerates development by abstracting part of the backend.\\r\\n\\r\\n- **Automatic code generation** - available via AppSync management console or the AWS Amplify CLI, it lets you use automatically generated schemas and resolvers minimizing the amount of coding you have to do manually.\\r\\n\\r\\n- **Pipeline Resolvers** - each resolver consists of a Before and After mapping template with a list of functions and each function has request and response mapping templates that manage interactions with the data source. This means you can stack different functions to perform more complex resolver operations.\\r\\n\\r\\n- **AWS CloudFormation** - automate your work by managing your AWS stack and resources via templates. Simply define the resources you need in a JSON or YAML file, deploy the service via the CloudFormation console and AWS will generate and make the resources ready for use as specified.\\r\\n\\r\\n![AWS AppSync](appsync.png)\\r\\n\\r\\n##### Source: [aws.amazon.com/appsync](https://aws.amazon.com/appsync/)\\r\\n\\r\\n\\r\\nWell, that\u2019s it for part three. As you can see GraphQL is very flexible and using it can be made even more advantageous with the right tools. Some of those are small tools and libraries that will provide a few quality of life improvements, some are larger tools and services that will completely change the way you work with GraphQL. It\u2019s obviously up to you to choose what works best for you and I sincerely hope I helped with that at least a little bit.\\r\\n","data":{"title":"GraphQL tools & libraries - Part 3","date":"2020-10-08T11:12:00.284Z","image":"feat_toolsthree.png","author":"Michal"},"path":"graphql-tools-part3","images":{"appsync.optimized.png":{"width":600,"height":310,"webpPath":"appsync.optimized.webp","optimizedPath":"appsync.optimized.optimized.png"},"appsync.png":{"width":1000,"height":517,"webpPath":"appsync.webp","optimizedPath":"appsync.optimized.png"},"dgraph.optimized.png":{"width":600,"height":310,"webpPath":"dgraph.optimized.webp","optimizedPath":"dgraph.optimized.optimized.png"},"dgraph.png":{"width":1000,"height":517,"webpPath":"dgraph.webp","optimizedPath":"dgraph.optimized.png"},"feat_toolsthree.optimized.png":{"width":600,"height":249,"webpPath":"feat_toolsthree.optimized.webp","optimizedPath":"feat_toolsthree.optimized.optimized.png"},"feat_toolsthree.png":{"width":989,"height":411,"webpPath":"feat_toolsthree.webp","optimizedPath":"feat_toolsthree.optimized.png"},"firecamp.optimized.png":{"width":600,"height":360,"webpPath":"firecamp.optimized.webp","optimizedPath":"firecamp.optimized.optimized.png"},"firecamp.png":{"width":1000,"height":600,"webpPath":"firecamp.webp","optimizedPath":"firecamp.optimized.png"},"graphene.optimized.png":{"width":600,"height":310,"webpPath":"graphene.optimized.webp","optimizedPath":"graphene.optimized.optimized.png"},"graphene.png":{"width":1000,"height":517,"webpPath":"graphene.webp","optimizedPath":"graphene.optimized.png"},"slash.optimized.png":{"width":600,"height":310,"webpPath":"slash.optimized.webp","optimizedPath":"slash.optimized.optimized.png"},"slash.png":{"width":1000,"height":517,"webpPath":"slash.webp","optimizedPath":"slash.optimized.png"},"zeus.optimized.png":{"width":600,"height":310,"webpPath":"zeus.optimized.webp","optimizedPath":"zeus.optimized.optimized.png"},"zeus.png":{"width":1000,"height":517,"webpPath":"zeus.webp","optimizedPath":"zeus.optimized.png"}}},{"content":"\\r\\nGraphQL is a query language for APIs that describes how to ask & fetch the data from the server to the client which of course requires setting up a server. Below you will find a list of the most popular GraphgQL server implementations. There\u2019s quite a few of them so we\u2019re not going to get through the lot of them in one go.\\r\\n\\r\\n## Express GraphQL\\r\\nIt is said that [Express GraphQL](https://github.com/graphql/express-graphql) is the simplest way to run a GraphQL API server. Express is a popular web application framework for Node.js allowing you to create a GraphQL server with any HTTP web framework supporting connect styled middleware including [Express](https://expressjs.com/), [Restify](http://restify.com/) and, of course, [Connect](https://github.com/senchalabs/connect). Getting started is as easy as installing some additional dependencies in form of `npm install express express-graphql graphql --save`\\r\\n\\r\\n![Express GraphQL](express.png)\\r\\n\\r\\n##### Source: [graphql.org](https://graphql.org/graphql-js/running-an-express-graphql-server/)\\r\\n\\r\\n\\r\\n\\r\\n## Apollo GraphQL Server\\r\\n\\r\\n[Apollo GraphQL Server](https://github.com/apollographql/apollo-server) is an open-source GraphQL server compatible with any GraphQL client and it\'s an easy way to build a production-ready, self-documenting GraphQL API that can use data from any source. Apollo Server can be used as a stand-alone GraphQL server, a plugin to your application\'s Node.js middleware, or as a gateway for a federated data graph. Apollo GraphQL Server offers:\\r\\n- **easy setup** - client-side can start fetching data instantly,\\r\\n- **incremental adoption** - elastic approach to adding new features, you can add them easily later on when you decide they\'re needed,\\r\\n- **universality** - compatibility with any data source, multiple \\r\\n build tools and GraphQL clients,\\r\\n- **production-ready** - tested across various enterprise-grade projects.\\r\\n  \\r\\n![Apollo GraphQL Server](apollo.png)\\r\\n\\r\\n##### Source: [apollographql.com](https://github.com/apollographql/apollo-server)\\r\\n\\r\\n\\r\\n## Hot Chocolate\\r\\n\\r\\n[Hot Chocolate](https://hotchocolate.io/) is a GraphQL server you can use to create GraphQL endpoints,  merge schemas, etc. Hot Chocolate is a part of a .NET based [ChilliCream GraphQL Platform](https://github.com/ChilliCream/hotchocolate) that can help you build a GraphQL layer over your existing and new infrastructure. It provides pre-built templates that let you start in seconds, supporting both ASP.Net Core as well as ASP.Net Framework out of the box.\\r\\n\\r\\n![Hot Chocolate is a part of ChilliCream GraphQL Platform](hotchoc.png)\\r\\n\\r\\n##### Source: [github.com/ChilliCream/hotchocolate](https://github.com/ChilliCream/hotchocolate)\\r\\n\\r\\n## Hasura GraphQL Engine\\r\\n\\r\\n[Hasura GraphQL Engine](https://github.com/hasura/graphql-engine) is a GraphQL server that gives you realtime GraphQL APIs over Postgres, making easy building your new Postgress-backed GraphQL app or adding a GraphQL layer for your existing Postgres bases app.  Hasura GraphQL Engine offers built-in filtering, pagination, merging remote schemas along with many other useful features. All that keeping high-performance & footprint at the lowest possible rate.\\r\\n\\r\\n![Hasura GraphQL Engine](hasura.png)\\r\\n\\r\\n##### Source: [github.com/hasura](https://github.com/hasura/graphql-engine)\\r\\n\\r\\n\\r\\n## API PLATFORM\\r\\n[API Platform](https://github.com/api-platform/api-platform) is a set of tools that combined build a modern framework for building REST and GraphQL APIs including GraphQL Server. The server solution is located in the API Platform Core Library which is built on top of Symfony 4 (PHP) microframework and the Doctrine ORM. API Platform Core Library is a highly flexible solution allowing you to build fully-featured GraphQL API in minutes.\\r\\n\\r\\n![API PLATFORM](apiplatform.png)\\r\\n\\r\\n##### Source: [api-platform.com](https://api-platform.com/)\\r\\n\\r\\n## Parse Server GraphQL API \\r\\n\\r\\nIn addition to the traditional REST API, Parse Server automatically generates a GraphQL API basing on a given schema. [Parse Server GraphQL API](https://docs.parseplatform.org/graphql/guide/) follows Relay specification along with the latest industry standards which makes it a perfect choice for modern projects requiring the highest-scalability.\\r\\n\\r\\n![Parse Server GraphQL API ](parse.png)\\r\\n\\r\\n##### Source: [docs.parseplatform.org/graphql/guide](https://docs.parseplatform.org/graphql/guide/)\\r\\n\\r\\nThat\u2019s it for the first look at GraphQL servers. So if I missed your favorite one, just mention it in the comments and stay tuned for the next parts!\\r\\n\\r\\n","data":{"title":"Most popular GraphQL servers","date":"2020-09-30T11:12:00.284Z","image":"server_feat.png","author":"Tomek"},"path":"graphql-servers","images":{"apiplatform.optimized.png":{"width":600,"height":200,"webpPath":"apiplatform.optimized.webp","optimizedPath":"apiplatform.optimized.optimized.png"},"apiplatform.png":{"width":1400,"height":467,"webpPath":"apiplatform.webp","optimizedPath":"apiplatform.optimized.png"},"apollo.optimized.png":{"width":600,"height":332,"webpPath":"apollo.optimized.webp","optimizedPath":"apollo.optimized.optimized.png"},"apollo.png":{"width":923,"height":510,"webpPath":"apollo.webp","optimizedPath":"apollo.optimized.png"},"express.optimized.png":{"width":600,"height":338,"webpPath":"express.optimized.webp","optimizedPath":"express.optimized.optimized.png"},"express.png":{"width":1280,"height":720,"webpPath":"express.webp","optimizedPath":"express.optimized.png"},"hasura.optimized.png":{"width":600,"height":338,"webpPath":"hasura.optimized.webp","optimizedPath":"hasura.optimized.optimized.png"},"hasura.png":{"width":960,"height":540,"webpPath":"hasura.webp","optimizedPath":"hasura.optimized.png"},"hotchoc.optimized.png":{"width":600,"height":300,"webpPath":"hotchoc.optimized.webp","optimizedPath":"hotchoc.optimized.optimized.png"},"hotchoc.png":{"width":923,"height":462,"webpPath":"hotchoc.webp","optimizedPath":"hotchoc.optimized.png"},"parse.optimized.png":{"width":600,"height":252,"webpPath":"parse.optimized.webp","optimizedPath":"parse.optimized.optimized.png"},"parse.png":{"width":1000,"height":420,"webpPath":"parse.webp","optimizedPath":"parse.optimized.png"},"server_feat.optimized.png":{"width":600,"height":252,"webpPath":"server_feat.optimized.webp","optimizedPath":"server_feat.optimized.optimized.png"},"server_feat.png":{"width":1000,"height":420,"webpPath":"server_feat.webp","optimizedPath":"server_feat.optimized.png"}}},{"content":"\\r\\nDownloading, modifying, uploading, in general exchanging data is fundamental for modern apps. Using API (defined set of rules how apps can communicate with each other) is the most popular way of setting up a communication system between external systems.\\r\\n\\r\\n> *What makes a good API?*\\r\\n\\r\\nFirst of all, it needs to be easily understandable and legible for all its potential users. A decent API should have well-documented examples and do not leave any room for guessing. There is a solution that comes in handy if you want to create a solid API, it\'s a tool called **[the API Platform](https://api-platform.com/)**.\\r\\n\\r\\n## API Platform\\r\\n\\r\\nAPI Platform is a set of tools that combined build a next-generation REST and GraphQL framework to build modern API. The server API Platform is built on top of enterprise-proven solutions:\\r\\n\\r\\n- **Server-side** - Symfony 4 microframework and the Doctrine ORM.\\r\\n- **Client-side** - we have an option to choose between ReactJS & Vue.js  for the web and React Native for mobile. \\r\\n- **Development & deployment environments** -  Docker, Kubernetes, and Helm.\\r\\n\\r\\nAll that powers the modules responsible for API creation, schema generation, admin panel & client generation:\\r\\n\\r\\n- **API Platform Core Library** - a highly flexibly, stacked with cool features core library allowing you to build fully-featured REST or GraphQL API in minutes. \\r\\n\\r\\n- **The Schema Generator** -  a CLI tool that instantly generates a PHP data model from the Schema.org vocabulary allowing ORM to create corresponding tables.\\r\\n\\r\\n- **API Platform Admin** - a tool to automatically adds a React-based admin interface to your API, all that without writing a single line of code.\\r\\n\\r\\n- **API Platform Client Generator** - the fastest way to scaffold fully-featured web apps (powered by React or Vue.js) or native mobile apps (based on React Native).\\r\\n\\r\\n![API Platform layers](api_flow.png)\\r\\n\\r\\n###### Source: [api-platform.com](https://api-platform.com/)\\r\\n\\r\\n\\r\\nPlatform API looks very promising as an all-in-one solution for modern projects and it\'s worth taking a closer look. The wide range of microservices offered by API Platform might come in handy for many developers. I\'m pretty sure that deeper dive into all its features and using what best it has to offer like data validation, pagination, hypermedia or GraphQL support, and many more can result in a significant productivity boost!\\r\\n","data":{"title":"API PLATFORM - a framework to build modern API","date":"2020-09-15T06:20:00.284Z","image":"feat_api2.png","author":"Tomek"},"path":"api-platform","images":{"api_flow.optimized.png":{"width":600,"height":265,"webpPath":"api_flow.optimized.webp","optimizedPath":"api_flow.optimized.optimized.png"},"api_flow.png":{"width":1908,"height":843,"webpPath":"api_flow.webp","optimizedPath":"api_flow.optimized.png"},"feat_api2.optimized.png":{"width":600,"height":252,"webpPath":"feat_api2.optimized.webp","optimizedPath":"feat_api2.optimized.optimized.png"},"feat_api2.png":{"width":1000,"height":420,"webpPath":"feat_api2.webp","optimizedPath":"feat_api2.optimized.png"}}},{"content":"\\r\\nGraphQL started being developed internally at Facebook back in 2012, before being publicly released as open-source in 2015. **GraphQL is a query language for APIs**, its main advantage is allowing clients to query exactly for the type of data that is required. The definitions of all the data clients can query through the service are stored in GraphQL schema. Each field in the schema is attached to a function, called a resolver, which gets called to produce the values when a query is executed.\\r\\n\\r\\nGraphQL is language-agnostic which makes it fairly easy to be adopted across different technologies, one of its successful implementations is done in Rust, by a library called Juniper.\\r\\n\\r\\n## Code- first, fast & type-safe GraphQL Servers in Rust\\r\\n\\r\\n**[Juniper](https://github.com/graphql-rust/juniper)** is a code-first approach that allows you to write **type-safe and super fast GraphQL servers in Rust**, keeping declaring and resolving GraphQL schemas as easy as possible.\\r\\n\\r\\nGraphQL query language is fully supported, including interfaces, unions, schema introspection, validations, as well as some basic Rust crates integrations allowing you to use popular Rust types as `uuid`, `url`, `chrono`, or `bson` out of the box. \\r\\n\\r\\nAs previously mentioned **Juniper is a code-first library**, if you prefer the schema-first approach you can use [juniper-from-schema](https://github.com/davidpdrsn/juniper-from-schema) to **auto-generate resolvers** for your GraphQL schema.\\r\\n\\r\\nAlthough Juniper does not provide a built-in web server functionality it comes with building blocks to make integration with your servers as seamless as possible, as well as optionally providing pre-built integration for popular Rust web frameworks like:\\r\\n\\r\\n- Actix,\\r\\n- Hyper,\\r\\n- Iron,\\r\\n- Rocket, \\r\\n- Warp.\\r\\n\\r\\n\\r\\n## Example of Juniper integration for Actix\\r\\n\\r\\nBelow you can find a sample Juniper integration with the **Actix web framework**. The servers run on `127.0.0.1:8080` and has built-in GraphiQL for easier testing. Star it with:\\r\\n\\r\\n```\\r\\ncd examples/juniper\\r\\ncargo run (or ``cargo watch -x run``)\\r\\n```\\r\\n\\r\\nSimple query example:\\r\\n![Query and its result example](query_result.png)\\r\\n\\r\\nSimple mutation example with its result:\\r\\n![Mutation and its result example](mutation_result.png)\\r\\n\\r\\nIf you are looking for more advanced usage examples make sure to visit [juniper-advanced](https://github.com/actix/examples/tree/master/juniper-advanced) example repo.\\r\\n\\r\\n##### Source: [github.com/actix/examples](https://github.com/actix/examples/tree/master/juniper)\\r\\n","data":{"title":"Juniper - fast & type-safe GraphQL Servers in Rust","date":"2020-09-07T15:37:00.284Z","image":"feat_rust.png","author":"Tomek"},"path":"graphql-rust-juniper","images":{"feat_rust.optimized.png":{"width":600,"height":252,"webpPath":"feat_rust.optimized.webp","optimizedPath":"feat_rust.optimized.optimized.png"},"feat_rust.png":{"width":1000,"height":420,"webpPath":"feat_rust.webp","optimizedPath":"feat_rust.optimized.png"},"mutation_result.optimized.png":{"width":600,"height":256,"webpPath":"mutation_result.optimized.webp","optimizedPath":"mutation_result.optimized.optimized.png"},"mutation_result.png":{"width":1280,"height":547,"webpPath":"mutation_result.webp","optimizedPath":"mutation_result.optimized.png"},"query_result.optimized.png":{"width":600,"height":264,"webpPath":"query_result.optimized.webp","optimizedPath":"query_result.optimized.optimized.png"},"query_result.png":{"width":827,"height":364,"webpPath":"query_result.webp","optimizedPath":"query_result.optimized.png"}}},{"content":"\\r\\nIf you missed it here\u2019s a [link to part one of GraphQL tools & libraries](https://blog.graphqleditor.com/graphql-tools-partone/). Now onto part two, where we check out a few more tools and libraries.\\r\\n\\r\\n## Ariadne\\r\\n\\r\\n**Ariadne is a Python library for implementing GraphQL servers** that prides itself on being schema-first. Schema-first is the approach of first defining the schema for the GraphQL service and then implementing the code by matching the definitions in the schema. The other approach is code-first where you first code the resolvers with the schema generated as an artifact. Which approach you chose is mostly up to personal preference, but let\u2019s get back to schema-first and Ariadne and look at its features:\\r\\n\\r\\n- schema-first lets both the client-side and server-side developers work at the same time since client-side developers don\u2019t have to wait for a finished backend \\r\\n- a small and easy to learn, python based API with a focus on simplicity\\r\\n- open design, Ariadne is modular and open to customization\\r\\n\\r\\n![Ariadne GraphQL](ariadne.png)\\r\\n\\r\\n##### Source: [ariadnegraphql.org](https://ariadnegraphql.org/)\\r\\n\\r\\n## Lighthouse\\r\\n\\r\\n**Lighthouse is a GraphQL framework that provides integration with Laravel (PHP) applications**. It\u2019s also schema-first and primarily uses SDL (Schema Definition Language) but also supports native PHP definitions. The idea is to take the best from both GraphQL and Laravel and combine it into a tool that makes your work much easier and provides lots of flexibility.\\r\\n\\r\\n- schema-first and boilerplate free, use GraphQL SDL to describe your data and add functionality through server-side directives\\r\\n- takes full advantage of GraphQL and Laravel, build a GraphQL server on top of an existing Laravel application\\r\\n- instantly ready to use, generates optimized data queries out of the box and comes with sensible configuration defaults\\r\\n\\r\\n![Lighthouse PHP GraphQL](lighthouse.png)\\r\\n\\r\\n##### Source: [lighthouse-php.com](https://lighthouse-php.com/)\\r\\n\\r\\n\\r\\n## GraphQL Editor\\r\\n\\r\\n**GraphQL Editor is an all-around tool for the GraphQL schema development**. The focus here is saving time and effort by visualizing schemas, creating one is as simple as joining blocks, no code required (if you prefer to create your schema the traditional way it\u2019s still possible). This makes for a quick and easy to play with the tool, that will ease development and make communication with other team members much easier. That\u2019s especially handy now, with everyone working via Zoom. \\r\\n\\r\\n- Schema Visualization: readily available schema import via GQL file or copying code\\r\\n- Live JAMStack Engine: preview GraphQL queries inside the frontend and mock backend\\r\\n- GraphQL IDE: design schema or import one, includes error handling and type validation\\r\\n- GraphQL Docs: automatically generated, easily readable schema documentation\\r\\n\\r\\n\\r\\n![GraphQL Editor](graphqleditor.png)\\r\\n\\r\\n##### Source: [graphqleditor.com](https://graphqleditor.com/)\\r\\n\\r\\n## Altair\\r\\n\\r\\nAltair boasts being a beautiful, **feature-rich GraphQL Client IDE for all platforms**. The self-professed comparison is to be a Postman for GraphQL ie. letting the developer quickly and easily test and optimize GraphQL implementations. The features paint a good picture:\\r\\n\\r\\n- visualization and simplicity, your schema is visualized in the docs along with information on queries, mutations, arguments, etc. adding a query requires only a single click\\r\\n- simple GraphQL subscription testing requires only the url\\r\\n- easy importing and exporting, from dragging and dropping a query to exporting your entire current window state with all the queries and variables\\r\\n\\r\\n![Altair GraphQL](altair.png)\\r\\n\\r\\n##### Source: [altair.sirmuel.design](https://altair.sirmuel.design/)\\r\\n\\r\\n\\r\\n## GraphiQL\\r\\n\\r\\nAnd last but not least, the **GraphiQL is an IDE created by the [GraphQL Foundation](https://foundation.graphql.org/)**. Being the official tool it has full GraphQL support, from queries and mutations to unions and fragments. While it might not be packed with features, it is an essential tool for anyone working with GraphQL because of the quality of life improvements it provides.\\r\\n\\r\\n- debugging as you type, GraphiQL provides realtime syntax and error highlighting with useful tips and suggestions\\r\\n- autocomplete for coding queries and variables\\r\\n- query library, GraphiQL keeps a running library of your queries, you can also favorite the ones you use most often to keep them at the top of the list\\r\\n\\r\\n![GraphiQL](graphiql.png)\\r\\n\\r\\n##### Source: [github.com/graphql/graphiql](https://github.com/graphql/graphiql)\\r\\n\\r\\nThat\u2019s it for part two and just like last time if you think I\u2019ve missed some useful tool/library just hit me up. Oh and stay tuned for part three!\\r\\n\\r\\n\\r\\n","data":{"title":"GraphQL tools & libraries - Part 2","date":"2020-09-03T12:39:00.284Z","image":"feat_toolstwo.png","author":"Michal"},"path":"graphql-tools-parttwo","images":{"altair.optimized.png":{"width":600,"height":300,"webpPath":"altair.optimized.webp","optimizedPath":"altair.optimized.optimized.png"},"altair.png":{"width":1000,"height":500,"webpPath":"altair.webp","optimizedPath":"altair.optimized.png"},"ariadne.optimized.png":{"width":600,"height":300,"webpPath":"ariadne.optimized.webp","optimizedPath":"ariadne.optimized.optimized.png"},"ariadne.png":{"width":1000,"height":500,"webpPath":"ariadne.webp","optimizedPath":"ariadne.optimized.png"},"feat_toolstwo.optimized.png":{"width":600,"height":249,"webpPath":"feat_toolstwo.optimized.webp","optimizedPath":"feat_toolstwo.optimized.optimized.png"},"feat_toolstwo.png":{"width":989,"height":411,"webpPath":"feat_toolstwo.webp","optimizedPath":"feat_toolstwo.optimized.png"},"graphiql.optimized.png":{"width":600,"height":300,"webpPath":"graphiql.optimized.webp","optimizedPath":"graphiql.optimized.optimized.png"},"graphiql.png":{"width":1000,"height":500,"webpPath":"graphiql.webp","optimizedPath":"graphiql.optimized.png"},"graphqleditor.optimized.png":{"width":600,"height":300,"webpPath":"graphqleditor.optimized.webp","optimizedPath":"graphqleditor.optimized.optimized.png"},"graphqleditor.png":{"width":1000,"height":500,"webpPath":"graphqleditor.webp","optimizedPath":"graphqleditor.optimized.png"},"lighthouse.optimized.png":{"width":600,"height":300,"webpPath":"lighthouse.optimized.webp","optimizedPath":"lighthouse.optimized.optimized.png"},"lighthouse.png":{"width":1000,"height":500,"webpPath":"lighthouse.webp","optimizedPath":"lighthouse.optimized.png"}}},{"content":"\\r\\n\\r\\nIf you\u2019re interested in a [writeup about GraphQL itself head on over here](https://blog.graphqleditor.com/why-you-should-try-graphql/). In this piece, we\u2019ll take a look at some of the many handy GraphQL tools that make using it even more worthwhile. Bear in mind there\u2019s quite a few of them so we\u2019re not going to get through the lot of them in one go.\\r\\n\\r\\n## Prisma\\r\\n\\r\\nAs mentioned before, working with GraphQL will require you to set up a database. Well, there\u2019s also BaaS so you can outsource it, but what if you don\'t want to? This is where Prisma comes in, it\u2019s a clever middle ground between doing it yourself and outsourcing.\\r\\n**Prisma is an ORM library** that lets you interact with the database from the server in the language you choose. So if you want to write to your MySQL database you don\'t have to do it in SQL, Prima lets you do it in Python, JavaScript or some other language you prefer. \\r\\n\\r\\nYou might think: *\\"Yeah, but that\u2019s just what a regular ORM library does\\"*. True, but Prisma comes with a few added functions:\\r\\n\\r\\n- database agnostic: Prisma currently supports MySQL, PostgreSQL, MariaDB, SQLite, and AWS Aurora, with more to come soon,\\r\\n- supports TypeScript, JavaScript, Flow, and Go,\\r\\n- provides premade basic CRUD queries.\\r\\n\\r\\n![Prisma GraphQL](prisma.png)\\r\\n\\r\\n##### Source: [prisma.io](https://www.prisma.io/)\\r\\n\\r\\n## Relay\\r\\n\\r\\n**Relay is a JavaScript framework** created by Facebook for fetching and managing GraphQL data. Relay is supposed to be the go-to tool for GraphQL users with a focus on validating and optimizing your code. Another focal point is being a **bridge between GraphQL and React**. Relay lets you set up your data requirements using GraphQL and then it will handle the fetching, collecting queries into network requests to get you exactly what you wanted.\\r\\n\\r\\nRelay is composed of three main loosely coupled modules:\\r\\n\\r\\n- Relay Compiler: a GraphQL compiler that analyzes, validates, and optimizes GraphQL in your code.\\r\\n- Relay Runtime: a full-featured GraphQL runtime for building higher level client APIs\\r\\n- Relay/React: a product API that integrates Relay Runtime with React\\r\\n\\r\\n![Relay GraphQL](relay.png)\\r\\n\\r\\n##### Source: [relay.dev](https://relay.dev/)\\r\\n\\r\\n## Apollo\\r\\n\\r\\n**The APOLLO platform** is an implementation of GraphQL that transfers data from the server to your UI. **Apollo-client** is a comprehensive state management library for JavaScript that lets you manage both local and remote data with GraphQL. The aim is to enable you to build UI components that fetch data via GraphQL. **Apollo-server** is a quick way for building an API for GraphQL using data from any source by using a spec-compliant server that can be queried from any GraphQL client, including the Apollo-client. \\r\\n\\r\\nLet\u2019s look at the Apollo-client features:\\r\\n\\r\\n- a declarative approach to data fetching, all the logic for retrieving data, tracking, loading and uploading it to the UI is contained in a single query,\\r\\n- designed for modern React, the Apollo client takes advantage of the latest React features such as hooks,\\r\\n- adaptable, can be dropped into any JavaScript app seamlessly,\\r\\n- universally compatible, can be used with any GraphQL API.\\r\\n\\r\\n![Apollo GraphQL](apollo.png)\\r\\n\\r\\n##### Source: [apollographql.com](https://www.apollographql.com/)\\r\\n\\r\\n## Hasura\\r\\n\\r\\n**Hasura** is a GraphQL engine that boasts its high speed and performance. It gives you instant **realtime GraphQL APIs on any Postgres database**, with remote schemas for business logic and webhook triggers on database events. \\r\\n\\r\\nThe focus is to help quickly build GraphQL apps backed by Postgres or use Postgres to help move existing apps to GraphQLs:\\r\\n\\r\\n- realtime, convert GraphQL queries to live queries via subscriptions,\\r\\n- fast and instantly ready to use, simply point it to a Postgres database and instantly get a GraphQL API,\\r\\n- powerful queries, Hasura has built-in filtering, pagination, pattern search, bulk insert, update, delete mutations,\\r\\n- fairly new and in rapid development with a bunch of features coming soon.\\r\\n\\r\\n![Hasura GraphQL](hasura.png)\\r\\n\\r\\n##### Source: [hasura.io](https://hasura.io/)\\r\\n\\r\\n## URQL\\r\\n\\r\\n**urql is a versatile and highly adaptable GraphQL client** by Formidable labs. It uses React hooks and components and intends to be a lighter client than the others. A versatile tool that you can **customize to fit your needs** and fine-tune as you get further along working with GraphQL. \\r\\n\\r\\nThe aim is hitting a middle ground, keeping it somewhat simple while also being able to handle complex assignments by:\\r\\n\\r\\n- performance and functionality, significantly lighter than other clients,\\r\\n- customization, the client provides a few default Exchanges, easily customizable code that handles interactions with the API, app or framework,\\r\\n- instantly ready to use, urql is basically ready for work right off the bat and does not require extensive configuration like some other clients,\\r\\n- named after an iconic sitcom character.\\r\\n\\r\\n![URQL GraphQL](urql.png)\\r\\n\\r\\n##### Source: [formidable.com/urql/](https://formidable.com/open-source/urql/)\\r\\n\\r\\n\\r\\nWell, that\u2019s it for the first look at GraphQL tools. Remember that that\u2019s only five of them and GraphQL has plenty of other tools to choose from. So if I missed your favorite, just mention it in the comments and stay tuned for the next parts! \\r\\n","data":{"title":"GraphQL tools & libraries","date":"2020-08-28T11:12:00.284Z","image":"feat_tools.png","author":"Michal"},"path":"graphql-tools-partone","images":{"apollo.optimized.png":{"width":600,"height":300,"webpPath":"apollo.optimized.webp","optimizedPath":"apollo.optimized.optimized.png"},"apollo.png":{"width":1000,"height":500,"webpPath":"apollo.webp","optimizedPath":"apollo.optimized.png"},"feat_tools.optimized.png":{"width":600,"height":252,"webpPath":"feat_tools.optimized.webp","optimizedPath":"feat_tools.optimized.optimized.png"},"feat_tools.png":{"width":1000,"height":420,"webpPath":"feat_tools.webp","optimizedPath":"feat_tools.optimized.png"},"hasura.optimized.png":{"width":600,"height":300,"webpPath":"hasura.optimized.webp","optimizedPath":"hasura.optimized.optimized.png"},"hasura.png":{"width":1000,"height":500,"webpPath":"hasura.webp","optimizedPath":"hasura.optimized.png"},"prisma.optimized.png":{"width":600,"height":300,"webpPath":"prisma.optimized.webp","optimizedPath":"prisma.optimized.optimized.png"},"prisma.png":{"width":1000,"height":500,"webpPath":"prisma.webp","optimizedPath":"prisma.optimized.png"},"relay.optimized.png":{"width":600,"height":300,"webpPath":"relay.optimized.webp","optimizedPath":"relay.optimized.optimized.png"},"relay.png":{"width":1000,"height":500,"webpPath":"relay.webp","optimizedPath":"relay.optimized.png"},"urql.optimized.png":{"width":600,"height":300,"webpPath":"urql.optimized.webp","optimizedPath":"urql.optimized.optimized.png"},"urql.png":{"width":1000,"height":500,"webpPath":"urql.webp","optimizedPath":"urql.optimized.png"}}},{"content":"\\r\\nGraphQL started back in 2012 at Facebook HQ. Before being publicly released in 2015 it was used internally as a cure to the underperformance observed in mobile apps on slower networks. GraphQL is a query language for APIs, its main advantage is allowing clients to define exactly what type of data is required. The centerpiece of any GraphQL project is its schema.\\r\\n\\r\\n**GraphQL schema** is a set of rules describing the functionality available to the client, including specification of operations (queries and mutations) that can be executed to execute against your data graph. \\r\\n\\r\\nIf you ever decide to build a GraphQL service at some point you would need to chose which approach you want to affiliate with more:\\r\\n\\r\\n- **Schema-first** - prioritizing process of designing the schema,\\r\\n- **Code-first (resolver-first)** - approach prioritizing code over schema, where the GraphQL schema is generated programmatically.\\r\\n\\r\\nIn either case, we will end up with a fully functional GraphQL service, but this choice will influence your project in terms of the amount of work you will need to put to achieve certain things like scaling your project etc.\\r\\n\\r\\n![Schema-first vs code-first](vs.png)\\r\\n\\r\\n\\r\\n## Schema-first\\r\\n\\r\\nSchema-first is an approach that puts schema as your source of truth and forces your code to follow the definitions stored in your schema. In general, prioritizing thinking about the schema. If schema design falls short, you might end up with an API that\'s ignoring your business needs and needs of your end-users.\\r\\n\\r\\n\\r\\n**Some of the pros:**\\r\\n- it should most of the times results in a better-designed API,\\r\\n- it\'s more abstract and less dependent by following the dependency inversion principle (DIP),\\r\\n- Schema-first approach reduces development time by allowing frontend and backend teams simultaneously (schema data is easily mockable i.e. with [graphql-editor mock backend feature \ud83d\ude80](https://app.graphqleditor.com/explore-projects/twitter)),\\r\\n\\r\\n**Some of the cons/difficulties:**\\r\\n- the schema definition must be constantly synced with the resolvers, otherwise might cause serious problems,\\r\\n- might lead to code redundancy as SDL definitions are not so easily reusable,\\r\\n- difficulty in combining distributed schemas into a single schema (require using 3rd party tools like [graphql-editor](http://graphqleditor.com/) or [graphql-tools](https://github.com/ardatan/graphql-tools))\\r\\n\\r\\n\\r\\n## Code-first\\r\\n\\r\\nCode-first (often called resolver-first) is a process where the schema is defined and implemented programmatically. The design process begins with coding the resolvers and the SDL version of the GraphQL schema is a generated artifact (created with a script, not manually). \\r\\n\\r\\n**Some of the pros:**\\r\\n- can work as a single source of truth as it keeps stored both the schema definitions as well as resolvers,\\r\\n- code-first can  easily overcome difficulties met in schema-first approach, without the usage of a vast amount of tools,\\r\\n- better manageable if you expect your schema to grow in complexity or size,\\r\\n\\r\\n**Some of the cons/difficulties:**\\r\\n- having both the definitions and resolves might be less readable,\\r\\n- your API design is easier influenced by implementation rather than business needs,\\r\\n- backward-incompatible changes can slip in more easily compared to schema\'s first approach.\\r\\n\\r\\n\\r\\n\\r\\n## The evolution\\r\\n\\r\\nWhen GraphQL was publicly released in the 2015 ecosystem we know haven\'t existed (quite obvious) and the only things that we could lean on were the official GraphQL specification and `graphql-js` (the reference implementation in JavaScript) until 2016 when `graphql-tools` repo was founded which firstly promoted schema-first approach by separating two layers of working with schema:\\r\\n\\r\\n- **the schema definition** - writing GraphQL schema definition using Schema Definition Language (SDL),\\r\\n- **the schema implementation** - writing required resolvers. \\r\\n\\r\\nAfter that, the schema-first become default approach but seeing its limitations people started looking for some workarounds which led to first code-first frameworks being released. The Code-first approach is becoming so popular that almost every GraphQL implementation now has its code-first alternative, or even focusing on only the code-first path.\\r\\n\\r\\n| Language | Schema-first implementation  | Code-first implementation | \\r\\n| ------------- |:-------------:|:-----------:|\\r\\n| JavaScript/TypeScript    | [Apollo server](https://www.apollographql.com/docs/apollo-server/) | [Nexus](https://nexus.js.org/docs/getting-started) |\\r\\n| PHP (Laravel) | [Lighthouse]() | [laravel-graphql](https://github.com/rebing/graphql-laravel)  |\\r\\n| PHP (WP) | x |  [WPGraphQL](https://docs.wpgraphql.com/)  |\\r\\n| Python   | [Ariadne](https://ariadnegraphql.org/docs/intro)     | [Graphene](https://docs.graphene-python.org/en/latest/quickstart/)|\\r\\n| .NET| [GraphQL for .NET](https://graphql-dotnet.github.io/docs/getting-started/introduction)  | [GraphQL for .NET](https://graphql-dotnet.github.io/docs/getting-started/introduction)  |\\r\\n| Rust| x   | [Juniper](https://github.com/graphql-rust/juniper) |\\r\\n\\r\\n\\r\\nWhat would 2020 bring? Well, I can\'t wait to find out :)\\r\\n\\r\\n![GraphQL Evolution](evolution_of_graphql.png)\\r\\n##### Source: [prisma.io/blog](https://www.prisma.io/blog/the-problems-of-schema-first-graphql-development-x1mn4cb0tyl3)\\r\\n","data":{"title":"GraphQL - schema-first vs code-first","date":"2020-08-27T14:12:00.284Z","image":"feat_vs.png","author":"Tomek"},"path":"graphql-schemafirst-codefirst","images":{"evolution_of_graphql.optimized.png":{"width":600,"height":252,"webpPath":"evolution_of_graphql.optimized.webp","optimizedPath":"evolution_of_graphql.optimized.optimized.png"},"evolution_of_graphql.png":{"width":1000,"height":420,"webpPath":"evolution_of_graphql.webp","optimizedPath":"evolution_of_graphql.optimized.png"},"feat_vs.optimized.png":{"width":600,"height":252,"webpPath":"feat_vs.optimized.webp","optimizedPath":"feat_vs.optimized.optimized.png"},"feat_vs.png":{"width":1000,"height":420,"webpPath":"feat_vs.webp","optimizedPath":"feat_vs.optimized.png"},"vs.optimized.png":{"width":600,"height":252,"webpPath":"vs.optimized.webp","optimizedPath":"vs.optimized.optimized.png"},"vs.png":{"width":1000,"height":420,"webpPath":"vs.webp","optimizedPath":"vs.optimized.png"}}},{"content":"\\r\\n\\r\\n\\r\\nGraphQL schema is a set of rules describing the functionality available to the client, including specification of operations (queries and mutations) that can be executed to execute against your data graph. When building a GraphQL service, there is a choice that needs to be made whether you want to follow the code-first or schema-first path: \\r\\n\\r\\n- Schema-first - which prioritizes process of designing the schema which puts schema as your source of truth and forces your code to follow the definitions stored in your schema,\\r\\n\\r\\n- Code-first (resolver-first) - is an approach where the GraphQL schema is implemented programmatically.\\r\\n\\r\\nIn either case, we will end up with a fully functional GraphQL service, but this choice will influence your project in terms of the amount of work you will need to put to introduce some features (but it\'s a topic that deserves to be covered in a separate post).\\r\\n\\r\\n\\r\\n## Code-first framework for GraphQL Server development\\r\\n\\r\\nThe rapid growth of GraphQL\'s popularity generated the natural need for different tools, both schema-first and code-first oriented, facilitating GraphQL working experience. One of the tools representing the code-first approach is [GraphQL Nexus framerwork](https://nexus.js.org/).\\r\\n\\r\\nGraphQL Nexus is a GraphQL framework for building your GraphQL Server, where the schema is defined and implemented programmatically. GraphQL Nexus relies on a Node.js and TypeScript thanks to which it can provide features such as:\\r\\n\\r\\n- **Type-Safety** -  type-definitions are being generated as you proceed with the development process & inferred in your code, providing you with auto-completion and error catching,\\r\\n\\r\\n- **Compatibility with GraphQL Ecosystem** - GraphQL Nexus relies heavily on graphql-js and works well with its existing types when constructing the schema which makes the auto-generated schema compatible with most popular tools like Apollo Server etc.,\\r\\n \\r\\n- **Data-Agnostic** - GraphQL Nexus is a declarative syntax layered on the top of the graphql-js library which basically means that you can achieve with it all that you can do with graphql-js or apollo-tools.\\r\\n\\r\\n\\r\\nHaving figured out all the types you need for your schema all you need to do is simply use `makeSchema` function to create the schema instance that would be used as the foundation for your GraphQL server.\\r\\n\\r\\n```tsx\\r\\nconst schema = makeSchema({\\r\\n  // The programmatically defined building blocks of your GraphQL schema\\r\\n  types: [User, Query, Mutation],\\r\\n\\r\\n  // Specify where the generated TS typings and SDL should be located\\r\\n  outputs: {\\r\\n    typegen: __dirname + \'/generated/typings.ts\',\\r\\n    schema: __dirname + \'/generated/schema.graphql\',\\r\\n  },\\r\\n\\r\\n  // All input arguments and return types are non-null by default\\r\\n  nonNullDefaults: {\\r\\n    input: true,\\r\\n    output: true,\\r\\n  },\\r\\n})\\r\\n\\r\\n// ... feed the `schema` into your GraphQL server (e.g. apollo-server or graphql-yoga)\\r\\n```\\r\\n\\r\\n## Getting started\\r\\n\\r\\nAs previously mentioned GraphQL Nexus relies heavily on `graphql-js` and it\'s also required for the installation:\\r\\n\\r\\n```\\r\\nnpm install nexus\\r\\nnpm install graphql # required as a peer dependency\\r\\n```\\r\\nThe best way to begin with GraphQL Nexus is of course the [official documentation](https://nexus.js.org/docs/getting-started). After familiarizing with it the next step could be playing around with their [official examples](https://github.com/prisma/nexus/tree/develop/examples) and the [online Playground](https://nexus.js.org/playground). Have fun!\\r\\n","data":{"title":"GraphQL Nexus - code-first GraphQL server development","date":"2020-08-25T11:37:00.284Z","image":"feat_nexus.png","author":"Tomek"},"path":"graphql-nexus-codefirst-graphql-server","images":{"feat_nexus.optimized.png":{"width":600,"height":252,"webpPath":"feat_nexus.optimized.webp","optimizedPath":"feat_nexus.optimized.optimized.png"},"feat_nexus.png":{"width":1000,"height":420,"webpPath":"feat_nexus.webp","optimizedPath":"feat_nexus.optimized.png"}}},{"content":"\\r\\nFly is a smart, decentralized hosting that allows your application to run faster by assigning virtual machines in the data centers that are located close to your users.  When users connect to your global IPs, Fly dynamically assigns compute powers in datacenters closest to that particular user\'s location, contrary to solutions globally duplicating resources in every datacenter near where your customers are. So basically Fly is a solution allowing you to run Docker images on servers in many different cities and a global router connecting users to the nearest available instance.\\r\\n\\r\\n- **Location-Smart** - when a user connects to a Fly application, the system determines the nearest location for the lowest latency and starts the application there.\\r\\n\\r\\n- **Auto-scaling** - with Fly new instances are being created as more connections appear at a specific location,\\r\\n\\r\\n- **Agile** - your applications adjust to users\' demand, relocating power to the locations where demand is expected to be higher,\\r\\n\\r\\n\\r\\n## GraphQL Server example with Fly\\r\\n\\r\\nCreators of [Fly provided an example presenting the performance benefits](https://github.com/fly-examples/edge-apollo-cache) coming from using their service combined with a global Redis cache and Apollo Server. These three technologies power a GraphQL server able to perform queries super efficiently.\\r\\n\\r\\n1. When a query arrives at the Apollo Server, it is being filtered through the set of defined GraphQL types and being matched with corresponding resolvers. \\r\\n\\r\\n2. When a REST query is executed, the server will respond with a JSON containing the requested data and cache the results (if it was configured to do so). Next incoming queries will be checked if the server already has cached results ready to be served.\\r\\n\\r\\n3. The app creates the RedisCache (either locally or using Fly\'s global Redis service), environment variables with a connection string to the server. The last step is the creation of an Apollo Server using provided configurations so it could start listening for incoming requests.\\r\\n\\r\\n\\r\\n[Fly](fly.io) offers significant performance improvement over traditional hosting. Here are some sample results of the response times test performed for this example app. As you can see results when being hosted on Fly looks much better than results of requests made to the Open Library API directly:\\r\\n\\r\\n| Request Method | Test 1 | Test 2 | Test 3 |\\r\\n| ------------- |:-------------:|:-----------:|:-------------:\\r\\n| Open Library API     | 2.06s | 1.70s |1.24s|\\r\\n| Fly.io (uncached)    | 1.01s      | 1.03s |2.27s|\\r\\n| Fly.io (cached)| 0.13s    | 0.11s |0.09s|\\r\\n\\r\\n##### Source: [github.com/fly-examples](https://github.com/fly-examples/edge-apollo-cache)\\r\\n\\r\\nThe above results were possible thanks to requests being served from the node located closest to the user\'s querying for data, as well as using Redis to cache responses. After the first request made to a specific location Redis will keep data live for approximately an hour, so the next matching requests being sent to this location could be served significantly faster.\\r\\n\\r\\n\\r\\nIf you are still skeptical just visit the example app page on [GitHub](https://github.com/fly-examples/edge-apollo-cache). There is a detailed instruction provided on how to deploy it using Fly so you could test it yourself. \\r\\n","data":{"title":"Fly - decentralized GraphQL server close to your users","date":"2020-08-18T11:17:00.284Z","image":"feat_fly.png","author":"Tomek"},"path":"fly-decentralized-graphql-server","images":{"feat_fly.optimized.png":{"width":600,"height":252,"webpPath":"feat_fly.optimized.webp","optimizedPath":"feat_fly.optimized.optimized.png"},"feat_fly.png":{"width":1000,"height":420,"webpPath":"feat_fly.webp","optimizedPath":"feat_fly.optimized.png"}}},{"content":"\\r\\nUniversal React Query Library (URQL) is a highly customizable GraphQL client, exposed as a set of React components by [Formidable](https://formidable.com/), aiming to become a lightweight alternative that would uphold the principal values of the GraphQL protocol & SDL.\\r\\n\\r\\nCurrently, the most popular client libraries come with large API footprints. URQL\'s  main goal is to simplify some of the most popular aspects arising when using GraphQL by providing:\\r\\n\\r\\n### 1. The Declarative Queries\\r\\n\\r\\nURQL Client internally manages the lifetime and updates for query & mutation operations in the background:\\r\\n- when a cache invalidates their results you may receive updated data,\\r\\n- when your app stops being interested in results URQL will teardown the operation (it will stop requesting new data, stop updating results)\\r\\n\\r\\n![URQL Declarative Queries](urql-declarative-queries.png)\\r\\nSource: [Uql Docs](https://formidable.com/open-source/urql/docs/basics/getting-started/)\\r\\n\\r\\n### 2. The abstracted caching\\r\\n\\r\\nCaching is handled & customizable with so-called Exchanges. The default `cacheExchange` offers basic cache implementation that will avoid sending the same requests to a GraphQL API repeatedly by caching the result of each query. For more complex cases containing data interdependencies, URQL offers normalized caching provided by [`@urql/exchange-graphcache`](https://github.com/FormidableLabs/urql/tree/main/exchanges/graphcache) package.\\r\\n\\r\\n### 3. The central point of extensibility and integration with GraphQL API\\r\\n\\r\\nURQL provides `Exchanges` to abstract how the Client interacts with frameworks, GraphQL API, or your app. URQL\'s  `Exchanges` have access to all operations and all results (the concept is very similar to middlewares in Redux). The core package\'s default behaviors are implemented using Exchanges as both operations as their results are treated as a stream of events:\\r\\n\\r\\n![URQL Extensibility provided by Exchanges](urql-extensibility.png)\\r\\nSource: [Uql Docs](https://formidable.com/open-source/urql/docs/basics/getting-started/)\\r\\n\\r\\n## Features\\r\\n\\r\\n- **Built to be easy to use** -  URQL prioritizes usability and adaptability aiming to be the first-choice pick for both, newcomers as well as GraphQL power-users,\\r\\n- **Performant and functional** - Lightweight & powerful GraphQL client, easy to use with React, Preact, and Svelte, makes URQL a great alternative to other bulky GraphQL clients.\\r\\n- **Logical default behavior and caching** - URQL enables you to use GraphQL in your apps out of the box without complex configurations, large API overhead, and all that fuss.\\r\\n- **Easily extensible** - one of the most interesting concepts presented in URQL are *Exchanges*. They are a kind of middleware that will help you change how you fetch, cache, or subscribe to data.\\r\\n\\r\\n## Basic Usage\\r\\n\\r\\nThe method `createClient` creates the GraphQL client which requires providing API\'s URL as a bare minimum. This Client will manage all your operations. To make it work in React & Preact provide it via the Context API with the help of the `Provider` export.\\r\\n\\r\\n```react\\r\\nimport { createClient, Provider } from \'urql\';\\r\\nconst client = createClient({\\r\\n  url: \'http://localhost:3000/graphql\',\\r\\n});\\r\\nconst App = () => (\\r\\n  <Provider value={client}>\\r\\n    <YourRoutes />\\r\\n  </Provider>\\r\\n);\\r\\n```\\r\\nSource: [Uql Docs](https://formidable.com/open-source/urql/docs/basics/getting-started/)\\r\\n\\r\\nTo get more details instructions & exmaples makes sure to visit [official URQL documentation](https://formidable.com/open-source/urql/docs/).\\r\\n","data":{"title":"URQL - Universal React Query Library (GraphQL Client)","date":"2020-08-11T06:37:00.284Z","image":"feat_urql.png","author":"Tomek"},"path":"urql-graphql-client","images":{"feat_urql.optimized.png":{"width":600,"height":252,"webpPath":"feat_urql.optimized.webp","optimizedPath":"feat_urql.optimized.optimized.png"},"feat_urql.png":{"width":1000,"height":420,"webpPath":"feat_urql.webp","optimizedPath":"feat_urql.optimized.png"},"urql-declarative-queries.optimized.png":{"width":600,"height":243,"webpPath":"urql-declarative-queries.optimized.webp","optimizedPath":"urql-declarative-queries.optimized.optimized.png"},"urql-declarative-queries.png":{"width":1418,"height":574,"webpPath":"urql-declarative-queries.webp","optimizedPath":"urql-declarative-queries.optimized.png"},"urql-extensibility.optimized.png":{"width":600,"height":294,"webpPath":"urql-extensibility.optimized.webp","optimizedPath":"urql-extensibility.optimized.optimized.png"},"urql-extensibility.png":{"width":1400,"height":686,"webpPath":"urql-extensibility.webp","optimizedPath":"urql-extensibility.optimized.png"}}},{"content":"\\r\\nConfiguration of a boilerplate for your newly started projects is a tedious, repeatable job ... which you can forget about thanks to [@karanpratapsingh](https://github.com/karanpratapsingh), who has made a full-stack boilerplate following some of the best patterns & practices learned from most-popular codebase and developers he has worked with. All that to make it possible to bootstrap your GraphQL-first app in React with just a couple clicks.\\r\\n\\r\\nNo matter if are starting a simple personal project or enterprise app you are getting a scalable full-stack starter kit following good architecture patterns, which is super significant as your project grows.\\r\\n\\r\\n\\r\\n## Tech stack\\r\\n \\r\\n- **React (with TypeScript)** - the frontend part is powered by React with TypeScript, a JavaScript extension providing types that would save you much time catching errors.\\r\\n- **GraphQL (with Apollo)** - as already mentioned at the beginning, this is a GraphQL-first approach using most popular GraphQL implementation - Apollo,\\r\\n- **Prisma** - Prisma is an open-source modern ORM that makes database access easy with an auto-generated query builder. In this starterkit its begin used for PostgreSQL but the out is open for suggestions so if you would see other ORM or drivers here just submit a PR,\\r\\n- **Jest** - Jest is a [JavaScript-based Testing Framework](https://jestjs.io/) working fine with numerous languages and frameworks, among others, React & TypeScript. The boilerplate comes with sample tests that are easily extendable for future modules as simplicity is one of the Jest\'s top principles.\\r\\n\\r\\n![Tech stack of Full Stack Starterkit ](tech-stack.png)\\r\\n\\r\\n## Project architecture\\r\\n\\r\\nThe library is using yarn workspaces which makes it easier to split the monorepo into packages responsible for a database connection, GraphQL part etc. It makes it really helpful if you choose to split GraphQL into its own set of microservices. The packages are organized as below:\\r\\n\\r\\n![Project architecture](architecture.png)\\r\\n##### Source: [karanpratapsingh/fullstack-starterkit](https://github.com/karanpratapsingh/fullstack-starterkit)\\r\\n\\r\\n## Getting started\\r\\n\\r\\nIf you are ready to start your next GraphQL+React project begin with creating `.env` files at both `backend/.env` as well as `web/.env` following the `.env.template` files located in those directories. The next step would be installing dependencies. The author recommends using `yarn` instead of npm as this boilerplate uses `yarn workspaces` heavily. To run backend & frontend use:\\r\\n```\\r\\nyarn start:backend\\r\\nyarn start:web\\r\\n```\\r\\nbut make sure to provide your own `DATABASE_URL` rather than default one from `.env.template` as it might be changed or deleted anytime, as mentioned by the library creator. If you like the idea of GraphQL-first full-stack boilerplate please show its maintainers some love and [leave a star](https://github.com/karanpratapsingh/fullstack-starterkit) :)\\r\\n","data":{"title":"Full stack Starterkit - GraphQL-first boilerplate that scales","date":"2020-08-05T12:37:00.284Z","image":"feat_starterkit.png","author":"Tomek"},"path":"graphql-first-fullstack-boilerplate","images":{"architecture.optimized.png":{"width":600,"height":273,"webpPath":"architecture.optimized.webp","optimizedPath":"architecture.optimized.optimized.png"},"architecture.png":{"width":2500,"height":1137,"webpPath":"architecture.webp","optimizedPath":"architecture.optimized.png"},"feat_starterkit.optimized.png":{"width":600,"height":252,"webpPath":"feat_starterkit.optimized.webp","optimizedPath":"feat_starterkit.optimized.optimized.png"},"feat_starterkit.png":{"width":1000,"height":420,"webpPath":"feat_starterkit.webp","optimizedPath":"feat_starterkit.optimized.png"},"tech-stack.optimized.png":{"width":600,"height":86,"webpPath":"tech-stack.optimized.webp","optimizedPath":"tech-stack.optimized.optimized.png"},"tech-stack.png":{"width":2297,"height":331,"webpPath":"tech-stack.webp","optimizedPath":"tech-stack.optimized.png"}}},{"content":"\\r\\nSince its open-sourcing, GraphQL keeps on gaining popularity and is becoming used by more & more development teams. Why? What\'s its secret? It\'s simple, GraphQL makes describing the complex data dependencies easy and it can be usee with any programming language. The rising popularity created a demand for different tools and libraries facilitating GraphQL implementation & usage across different technologies and vice-versa. **Sqlmancer** is one of them.\\r\\n\\r\\n## Goals & Features\\r\\n\\r\\nSqlmancer is a Node.js library simplifying GraphQL integration with SQL by translating GraphQL queries into SQL statements in a smart way. The flexibility offered by Sqlmancer allows you to create the queries and mutations that suit your schema as well as leaving the decisions to you what types you want to expose in your schema by offering a number of convenient directives. The last but not least, Sqlmancer put annotation over transformation using directives mostly to annotate your schema rather than changing its behavior, aiming to be as aspect-oriented as possible.\\r\\n\\r\\nSome of the notable features of Sqlmancer:\\r\\n- **Various dialects supported** - you can incorporate Sqlmancer into existing projects regardless of what flavor of SQL you\'re using as it supports Postgres, MySQL, MariaDB, and SQLite.\\r\\n\\r\\n- **Advanced sorting & filtering** - Add complex sorting and filtering to your data-fetching, including:\\r\\n  - filtering using logical operators,\\r\\n  - filtering and sorting by fields\\r\\n  - filtering by aggregate fields of related models.\\r\\n\\r\\n- **Performance** - Sqlmancer makes the N+1 problem the song of the past by building a single SQL query to fetch all necessary data, regardless of query depth.\\r\\n\\r\\n- **Custom scalars & Abstract types** - Use the scalars that make sense and easily add unions and interfaces into your schema using views or single table inheritance features.\\r\\n\\r\\n## How it works\\r\\n\\r\\nSqlmancer generates a type-safe database client basing on your GraphQL schema and metadata provided through a set of schema directives, giving you the ability to query your server for complex data structures with a single SQL query:\\r\\n\\r\\n![Sqlmancer sample resolver](sqlmancer_query.png)\\r\\n##### Source: [sqlmancer.netlify.app](https://sqlmancer.netlify.app/introduction)\\r\\n\\r\\nwhile keeping your resolver as simple as possible:\\r\\n\\r\\n![Sqlmancer sample query](sqlmancer_resolver.png)\\r\\n\\r\\n##### Source: [sqlmancer.netlify.app](https://sqlmancer.netlify.app/introduction)\\r\\n\\r\\nCool, right? If you are interested in for a detailed guide on how to work with the library make sure to visit [official Sqlmancer documentation](https://sqlmancer.netlify.app/introduction) \\r\\n\\r\\n## Still in development \\r\\n\\r\\nSqlmancer is still in development. The API is still subject to changes so be aware that there might be some breaking changes coming anytime. As mentioned by the creator feedback and suggestions from the community are more than welcome so if you find a bug, have a feature request, or just want to contribute to this awesome project, feel free to an open issue.\\r\\n","data":{"title":"Sqlmancer - translate GraphQL queries into SQL statements","date":"2020-07-31T11:12:00.284Z","image":"feat_gqlsql.png","author":"Tomek"},"path":"sqlmancer-graphql-to-sql","images":{"feat_gqlsql.optimized.png":{"width":600,"height":252,"webpPath":"feat_gqlsql.optimized.webp","optimizedPath":"feat_gqlsql.optimized.optimized.png"},"feat_gqlsql.png":{"width":1000,"height":420,"webpPath":"feat_gqlsql.webp","optimizedPath":"feat_gqlsql.optimized.png"},"sqlmancer_query.optimized.png":{"width":600,"height":487,"webpPath":"sqlmancer_query.optimized.webp","optimizedPath":"sqlmancer_query.optimized.optimized.png"},"sqlmancer_query.png":{"width":1522,"height":1236,"webpPath":"sqlmancer_query.webp","optimizedPath":"sqlmancer_query.optimized.png"},"sqlmancer_resolver.optimized.png":{"width":600,"height":149,"webpPath":"sqlmancer_resolver.optimized.webp","optimizedPath":"sqlmancer_resolver.optimized.optimized.png"},"sqlmancer_resolver.png":{"width":1354,"height":336,"webpPath":"sqlmancer_resolver.webp","optimizedPath":"sqlmancer_resolver.optimized.png"}}},{"content":"\\r\\nGraphQL started at Facebook back in 2012, it was developed internally before being released as open-source in 2015. In 2018 the project was moved to the newly created GraphQL Foundation, hosted by the Linux foundation. GraphQL creator Lee Byron has stated his aim is to make it ubiquitous across web platforms. Let\'s look at how plausible that perspective is.\\r\\n\\r\\n## A bit of theory\\r\\nGraphQL is a query language for APIs, its main advantage is allowing clients to define exactly what type of data is required. Developers create a schema that contains all the data clients can query through the service. This schema contains object types that determine the object you can request and the types it has. The schema is the basis all queries get checked against and then, after being validated, executed. Each field in the schema is attached to a function, called a resolver, which gets called to produce the values when a query is executed.\\r\\n![GraphQL vs REST](graphql_vs_rest.jpg)\\r\\n\\r\\n## A bit of practice\\r\\nLet\u2019s check out how it actually works by looking at a simple example like a forum, blog or social media. In our example let\u2019s say users have four properties: username, email, location and ID and can create posts with titles. Now if you need to create a profile component that only shows the username and ID, you don\'t need the user\u2019s email and location. With REST and other web service architectures, the API returns all user data and there\u2019s no way to request specifically what you need without fetching unnecessary data. Doesn\'t sound like a big problem? Just look at Facebook accounts and how many variables they have and you\u2019ll easily get why they started developing GraphQL.\\r\\n\\r\\n[![Part of a GraphQL blog schema](schema.png)](https://graphqleditor.com/)\\r\\n\\r\\nGraphQL allows you to request exactly the parameters you want and the API responds with only the data you requested. It also does this via a single endpoint that handles all the client\u2019s requests. That was just a basic query. One of the advantages of GraphQL is the ability to nest queries so it can be expanded to fetch a number of variables. \\r\\n\\r\\n[![User data GraphQL query](userdata_query.png)](https://graphqleditor.com/)\\r\\n\\r\\n\\r\\nLet\u2019s go back to the above-mentioned example of a blog/forum/social media API. What if your profile component needs to be a bit more complex? We\u2019ll make a query that requests some basic user info as well as post titles for that particular user so that the profile provides a glimpse of the user\u2019s activity as well as basic information.\\r\\n\\r\\n\\r\\n## Why development teams are adopting GraphQL?\\r\\n\\r\\nOne of the surveys directed to a variety of companies having experience with GraphQL asked their CTOs and lead developers why they decided to pivot to GraphQL. The survey identified six main benefits (*Development Velocity, Modularity, Scalability, Performance, Reliability, Security*) and asked responders how strongly they would agree/disagree with the following statements:\\r\\n\\r\\n- *We were able to speed up our development using GraphQL*\\r\\n\\r\\n- *We were able to scale our projects faster with GraphQL*\\r\\n\\r\\n-  *It was easier to unify our APIs (e.g., Microservices, legacy endpoints, third-party services, etc.)*\\r\\n\\r\\n- *There has been an increase in performance using GraphQL*\\r\\n\\r\\n- *Our architecture is more stable, with decreased downtime, and fewer errors*\\r\\n\\r\\nThe results are:\\r\\n\\r\\n![Chart presenting why companies adopted GraphQL](survey1.png)\\r\\n###### Source: [Novvum @medium](https://medium.com/novvum/why-companies-of-various-sizes-chose-graphql-and-what-they-experienced-7a9d47d06bee)\\r\\n\\r\\n![Chart presenting benefits of implementing GraphQL](survey2.png)\\r\\n\\r\\n###### Source: [Novvum @medium](https://medium.com/novvum/why-companies-of-various-sizes-chose-graphql-and-what-they-experienced-7a9d47d06bee)\\r\\n\\r\\nThe interpretation of the survey\'s results was summed up closed in the table below. The most important thought is that GraphQL managed to provide what teams were looking for that small to medium as well as large enterprise teams. \\r\\n\\r\\n| Team size          | What they wanted to achieve                                     | What they\'ve achived                      |\\r\\n| ------------------ | --------------------------------------------------------------- | ----------------------------------------- |\\r\\n| 50-100 & 100+ devs | Faster development speed, better scalability, better modularity | Faster development, better scalability    |\\r\\n| 10-50 devs         | Better modularity, higher performance                           | Faster development, better infrastructure |\\r\\n| up to 10 devs      | Faster development, better modularity                           | Faster development, better scalability    |\\r\\n\\r\\n## Simple and flexible\\r\\n\\r\\nGraphQL not only straightforward, but it\'s also extremely adaptable. GraphQL is client-driven and it\u2019s creators emphasize they were focused on the needs of the client, not the server. That\u2019s also why graphQL is so flexible so that it\u2019s as easy as possible to use for clients.  You can use GraphQL with:\\r\\n- Python,\\r\\n- React \\r\\n- Java,\\r\\n- C++, \\r\\n- PHP, \\r\\n\\r\\nand a number of others as it\u2019s meant to be a one size fits all solution that retrieves data regardless of the service, platform, or coding language. Can it become widely used across all platforms? Time will tell, but it certainly has all the tools for that.\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Why you should try GraphQL?","date":"2020-07-28T10:17:00.284Z","image":"usegql_feat.png","author":"Michal"},"path":"why-you-should-try-graphql","images":{"graphql_vs_rest.jpg":{"width":725,"height":480,"webpPath":"graphql_vs_rest.webp","optimizedPath":"graphql_vs_rest.optimized.jpg"},"graphql_vs_rest.optimized.jpg":{"width":600,"height":397,"webpPath":"graphql_vs_rest.optimized.webp","optimizedPath":"graphql_vs_rest.optimized.optimized.jpg"},"schema.optimized.png":{"width":600,"height":271,"webpPath":"schema.optimized.webp","optimizedPath":"schema.optimized.optimized.png"},"schema.png":{"width":1223,"height":552,"webpPath":"schema.webp","optimizedPath":"schema.optimized.png"},"survey1.optimized.png":{"width":600,"height":388,"webpPath":"survey1.optimized.webp","optimizedPath":"survey1.optimized.optimized.png"},"survey1.png":{"width":700,"height":453,"webpPath":"survey1.webp","optimizedPath":"survey1.optimized.png"},"survey2.optimized.png":{"width":600,"height":387,"webpPath":"survey2.optimized.webp","optimizedPath":"survey2.optimized.optimized.png"},"survey2.png":{"width":700,"height":452,"webpPath":"survey2.webp","optimizedPath":"survey2.optimized.png"},"usegql_feat.optimized.png":{"width":600,"height":252,"webpPath":"usegql_feat.optimized.webp","optimizedPath":"usegql_feat.optimized.optimized.png"},"usegql_feat.png":{"width":1000,"height":420,"webpPath":"usegql_feat.webp","optimizedPath":"usegql_feat.optimized.png"},"userdata_query.optimized.png":{"width":600,"height":227,"webpPath":"userdata_query.optimized.webp","optimizedPath":"userdata_query.optimized.optimized.png"},"userdata_query.png":{"width":1554,"height":588,"webpPath":"userdata_query.webp","optimizedPath":"userdata_query.optimized.png"}}},{"content":"\\r\\nGraphQL Query Generator is an interesting library brought to you by the IBM team, which\'s the main idea is to allow users to **generate randomized GraphQL queries** from any given GraphQL schema.\\r\\n\\r\\nThe first thought that comes to your mind might be:\\r\\n> *\\"Why I may ever want a bunch of randomized queries?\\"*\\r\\n\\r\\nbut giving it a second thought it might be quite useful. The team behind the GraphQL Query Generator suggested **two basic use-cases** for their library:\\r\\n\\r\\n- **Engineering** - when operating a GraphQL service you might find this library useful for:\\r\\n  - developing a collection of test modules of GraphQL queries,\\r\\n  - developing a test group of queries to check the effect of performance improvements,\\r\\n- **Scientific** - to learn about the characteristics of various GraphQL services.\\r\\n\\r\\n## Queries generation\\r\\n\\r\\nThe library provides two functions for generating random GraphQL queries, both expecting a GraphQL schema, as well as specific  instructions provided in configuration object as an input:\\r\\n\\r\\n- `getRandomQuery(schema: GraphQLSchema, config: Configuration)` - this function produces a random query from the given schema, considering configuration passed as an input,\\r\\n\\r\\n- `getRandomMutation(schema: GraphQLSchema, config: Configuration)` -  that produces a random mutation from the given schema, considering passed configuration.\\r\\n\\r\\n![Diagram representing how GraphQL Query Generator works](graphql_query_generator_diagram.png)\\r\\n\\r\\n##### Source: [github.com/IBM](https://github.com/IBM/graphql-query-generator)\\r\\n\\r\\nThe configuration object accepts a set of predefined properties i.e.:\\r\\n- `maxDepth` - that defines the maximum depths of the query/mutation to generate,\\r\\n- `argumentsToIgnore` - in which you can  list arguments names that should be ignored,\\r\\n- `considerInterfaces`- which a signal for the generator that it should create queries containing interfaces,\\r\\n- `considerUnions` - that creates queries that contain unions etc.\\r\\n\\r\\nThe full list of available properties is available in the [GraphQL Query Generator docs](https://github.com/IBM/graphql-query-generator).\\r\\n\\r\\n### Sample GraphQL Query Generator configuration object\\r\\n\\r\\n![Sample configuration object](sample_configuration.png)\\r\\n\\r\\n##### Source: [github.com/IBM/graphql-query-generator](https://github.com/IBM/graphql-query-generator)\\r\\n\\r\\n\\r\\n## Great addition\\r\\n\\r\\nGraphQL Query Generator is a great addition to the already broad spectrum of GraphQL tools. Its a relatively new library that is worth experimenting with as maybe you could find some other innovative ways it could be used by the GraphQL community.\\r\\n","data":{"title":"GraphQL Query Generator by IBM","date":"2020-07-22T11:37:00.284Z","image":"feat_query_gen.png","author":"Tomek"},"path":"graphql-query-generator","images":{"feat_query_gen.optimized.png":{"width":600,"height":252,"webpPath":"feat_query_gen.optimized.webp","optimizedPath":"feat_query_gen.optimized.optimized.png"},"feat_query_gen.png":{"width":1000,"height":420,"webpPath":"feat_query_gen.webp","optimizedPath":"feat_query_gen.optimized.png"},"graphql_query_generator_diagram.optimized.png":{"width":600,"height":352,"webpPath":"graphql_query_generator_diagram.optimized.webp","optimizedPath":"graphql_query_generator_diagram.optimized.optimized.png"},"graphql_query_generator_diagram.png":{"width":3124,"height":1832,"webpPath":"graphql_query_generator_diagram.webp","optimizedPath":"graphql_query_generator_diagram.optimized.png"},"sample_configuration.optimized.png":{"width":600,"height":249,"webpPath":"sample_configuration.optimized.webp","optimizedPath":"sample_configuration.optimized.optimized.png"},"sample_configuration.png":{"width":1674,"height":696,"webpPath":"sample_configuration.webp","optimizedPath":"sample_configuration.optimized.png"}}},{"content":"\\r\\nIf you\u2019ve read an article or even some brief description of GraphQL, it probably included a line about what it does better than REST and other APIs. Glancing over the question like that isn\'t really fair though is it? You won\'t get the whole picture without really looking at each API\u2019s uses and advantages so let\u2019s try to dig a bit into that here.\\r\\n\\r\\n## GraphQL - the new standard\\r\\nGraphQL is a flexible system for requesting data that focuses on pinpoint requests and delivering exactly what is required. What sets GraphQL apart from other APIs is its unique approach, it\u2019s client-driven. Instead of handling it as usual i.e. server to a client, here the client decides how everything is handled. The main benefits are:\\r\\n\\r\\n- **adaptability** - the client decides what data they want, how they want it and what format they want to get it in,\\r\\n- **efficiency** - delivers exactly what the client requests without over fetching,\\r\\n- **flexibility** - GraphQl is cross-platform and supports more than a dozen languages (Perl, Java, Python, PHP among others).\\r\\n\\r\\nThe most well-known example of GraphQL application is probably GitHub. They switched to it in 2016 citing scalability and flexibility as the two major reasons. REST simply wasn\'t cutting it for them, because it often required multiple requests to get the data you wanted and also over-fetched data on each of those requests. With GitHub\u2019s rapid growth and user base in the tens of millions, you can imagine how big a concern that had to be. GraphQL provided exactly the alternative they needed because it\u2019s focused on the client being able to request particular data in a specific format for a specific use.\\r\\n\\r\\n![GraphQL](gql.png)\\r\\n\\r\\n## REST - still most popular one (?)\\r\\n\\r\\nAfter voicing some complaints about it it\u2019s only fair to take a look at REST. Even though some question if it\u2019s not outdated it\u2019s still the most commonly used API. REST is a stateless architecture for data transfer. RESTful systems put an emphasis on statelessness and hypermedia. Unlike GraphQL here the concerns of client and server are separated. The usually mentioned advantages are:\\r\\n\\r\\n- **performance** - best suited for systems requiring rapid iteration and HTTP standardized verbiage,\\r\\n- **scalability** - allows the support of large numbers of components and interactions among them,\\r\\n- **simplicity** - REST has a uniform interface which simplifies and decouples the architecture,\\r\\n- **modifiability** - components can be modified to fit changing needs even while the application is running.\\r\\n\\r\\nAs mentioned above, REST is still the most popular API. Twitter, Facebook, Google, and Paypal are all using RESTful APIs. REST can tie together a variety of resources that can be requested in a number of ways and in different formats for various purposes. If you need a more general-purpose API than the pinpoint GraphQL this is the one for you.\\r\\n\\r\\n![REST](rest.png)\\r\\n\\r\\n## gRPC - performance at all costs\\r\\n\\r\\ngRPC is a lightweight and quick system for requesting data, it\u2019s a fresh take on an old method called Remote Procedure Call or RPC. The main difference here is how it defines it\u2019s contract negotiations. REST defines interactions through standardized terms in its requests, GraphQL runs requests against a created schema to fetch exactly what is required. RPC functions on contracts, the negotiation is defined by the relationship between the server and the client not by the architecture. Most of the power relies on the client-side while handling and computations are offloaded to a remote server hosting the resource. To put it short the key advantages are:\\r\\n\\r\\n- it\u2019s lightweight, requires very little resources which makes it a handy solution for even extremely low powered situations\\r\\n- it\u2019s efficient, gPRC uses protobufs, a method of serializing structured data which focuses on serializing communication in an effective manner\\r\\n- it\u2019s open-source and can be freely used, modified or forked\\r\\n\\r\\nIn short, gRPC is suited for systems that need a set amount of data or processing routinely and in which the requester is low power or wants to preserve resources. The best examples are immensely popular IoT devices like voice controllers, smart light switches, smoke alarms locks, and cameras. \\r\\n\\r\\n![gRPC](grpc.png)\\r\\n##### Source: [grpc.io](https://grpc.io/docs/what-is-grpc/introduction/)\\r\\n\\r\\n## One size does not fit all\\r\\n\\r\\nAs you can see each of these options has its own applications and advantages. There is no clear winner here and what you should use, or rather what you want to use, depends mostly on your aims and approach. So now that you hopefully know a bit about each of them, look into what would best fit your project and pick the right one for yourself.\\r\\n","data":{"title":"GraphQL vs REST vs gRPC","date":"2020-07-20T14:12:00.284Z","image":"vs_feat.png","author":"Michal"},"path":"graphql-rest-grpc","images":{"gql.optimized.png":{"width":600,"height":252,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1000,"height":420,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"grpc.optimized.png":{"width":600,"height":252,"webpPath":"grpc.optimized.webp","optimizedPath":"grpc.optimized.optimized.png"},"grpc.png":{"width":1000,"height":420,"webpPath":"grpc.webp","optimizedPath":"grpc.optimized.png"},"rest.optimized.png":{"width":600,"height":252,"webpPath":"rest.optimized.webp","optimizedPath":"rest.optimized.optimized.png"},"rest.png":{"width":1000,"height":420,"webpPath":"rest.webp","optimizedPath":"rest.optimized.png"},"vs_feat.optimized.png":{"width":600,"height":252,"webpPath":"vs_feat.optimized.webp","optimizedPath":"vs_feat.optimized.optimized.png"},"vs_feat.png":{"width":1000,"height":420,"webpPath":"vs_feat.webp","optimizedPath":"vs_feat.optimized.png"}}},{"content":"\\r\\n**GraphQL is a new approach** for building an API that aims to get the better of two basic **RESTful APIs limitations** which are data filters & relationships. These two classic REST flaws force REST users to always get the full payload in response & hit multiple data sources separately.\\r\\n \\r\\n## What is GraphQL\\r\\n\\r\\n**GraphQL is a data query and manipulation language** for APIs created and open-source by Facebook to solve the problem of unoptimized data flow in their mobile app. In general, GraphQL is a syntax that describing the way of requesting data from the server. The main difference comparing Graph QL to traditional REST API is that the response format is described in the query and defined by the client rather than the server. Another important thing about GraphQL is that it is language agnostic.\\r\\n\\r\\n## Basic structure\\r\\n\\r\\nThe core notion of using GraphQL is a *schema*.  Designing a schema is one of the first steps in the development process, casting a shadow over the rest of the project. A carefully planned Graph QL schema is the core of a well-designed and secure product. GraphQL Schema is a center-piece of any Graph QL project and it strictly defines its structure & regulates how the data can be accessed.\\r\\n\\r\\n##### GraphQL Queries & Mutations\\r\\nThere are two basic types of GrahQL operations which are GraphQL Queries & GraphQL Mutations:\\r\\n- *GraphQL Queries* - query allows you to read or fetch data from the server-side,\\r\\n- *GraphQL Mutations* - mutations are used to write or post values.\\r\\n\\r\\n![GraphQL Query & Response](graphql_query_response.png)\\r\\n\\r\\nThe performed operations have a form of a string that a GraphQL server can parse and respond to with requested data in a specific format i.e JSON.\\r\\n\\r\\n##### GraphQL Resolvers\\r\\nIn order to understand what we are querying for the GraphQL server needs to have a defined set of functions/rules that our server would use to generate the response. These functions are called GraphQL Resolvers and they are responsible for handling our queries.\\r\\n\\r\\n![Basic GraphQL resolver function](graphql_resolvers.png)\\r\\n\\r\\n## GraphQL vs REST\\r\\n\\r\\nImagine we want to retrieve posts from a company blog using RESTful API. First, we need to `GET api/posts`, but posts have other data like authors so we need to call REST API again to get the details of the posts i.e. authors ending up with two server requests instead of one, and as you continue to scale, you may have even more requests to different endpoints in order to fetch all the needed data. \\r\\n\\r\\nThe performance drop, especially on slow cellular connections,  was the main problem Facebook engineers observed, and the urge to find its solution was a substructure for GraphQL. In GraphQL API we have a single endpoint being able to process complex requests. You query the GraphQL server for specific data and it will respond with what was requested, which results in fewer bits transferred over the wire.\\r\\n\\r\\n![GraphQL vs REST the main difference](graphql_vs_rest.png)\\r\\n\\r\\n## Learn GraphQL\\r\\nAs you can see GraphQL is a very interesting concept. In the past couple of years, it gained a lot of traction and became a skill much appreciated and often required in job offers. If you are interested in deepening your knowledge of GraphQL there are plenty of neat resources you can learn from. \\r\\n\\r\\n##### Knowlege base\\r\\n1. [GrapQL Official Documentation](https://graphql.org/learn/) is the best place to start your GraphQL learning.\\r\\n2. [GraphQL Weekly](https://graphqlweekly.com/) is a newsletter with GraphQL tutorials, news, and everything related to GraphQL.\\r\\n3. [How to GraphQL](https://www.howtographql.com/) is a website that will explain to you in detail what is GraphQL and\\r\\nguide your steps from GraphQL newbie to releasing your production GraphQL project.\\r\\n\\r\\n[![static GraphQL docs generated by GraphQL Editor](graphql_docs.gif)](https://graphqleditor.com/)\\r\\n\\r\\n### GraphQL Tools\\r\\n\\r\\n1.  [GraphCMS](https://graphcms.com/) a tool that allows you to build a hosted GraphQL backend for your web project along with tools to manage its content.\\r\\n\\r\\n2. [GraphQL Editor](https://graphqleditor.com/) is a graphic playground for GraphQL allowing you to build & manage your graphql schema faster giving you a set of GraphQL tools to:\\r\\n    - bulletproof GraphQL IDE (error handling, type validation),\\r\\n    - generate static GraphQL docs,\\r\\n    - preview GraphQL queries with a Live JAMStack Engine & Mock Backend.\\r\\n\\r\\n3. [Dgraph](https://launchpad.graphql.com/new) is a native GraphQL database to help you build apps faster.\\r\\n\\r\\n4. [Hasura](https://hasura.io/) makes your PostgreSQL database instantly available over GraphQL API.\\r\\n\\r\\n5. [Apollo](https://www.apollographql.com/) a platform that allows you to combine databases, different APIs, and microservices into a single data source that you can query using GraphQL.\\r\\n\\r\\n","data":{"title":"Introduction to GraphQL","date":"2020-07-02T10:06:00.284Z","image":"gql_intro_feat.png","author":"Tomek"},"path":"introduction-to-graphql","images":{"gql_intro_feat.optimized.png":{"width":600,"height":252,"webpPath":"gql_intro_feat.optimized.webp","optimizedPath":"gql_intro_feat.optimized.optimized.png"},"gql_intro_feat.png":{"width":1000,"height":420,"webpPath":"gql_intro_feat.webp","optimizedPath":"gql_intro_feat.optimized.png"},"graphql_docs.gif":{"width":600,"height":335,"webpPath":"graphql_docs.webp","optimizedPath":"graphql_docs.optimized.gif.png"},"graphql_docs.optimized.gif.png":{"width":600,"height":335,"webpPath":"graphql_docs.optimized.gif.webp","optimizedPath":"graphql_docs.optimized.gif.optimized.png"},"graphql_query_response.optimized.png":{"width":600,"height":252,"webpPath":"graphql_query_response.optimized.webp","optimizedPath":"graphql_query_response.optimized.optimized.png"},"graphql_query_response.png":{"width":1000,"height":420,"webpPath":"graphql_query_response.webp","optimizedPath":"graphql_query_response.optimized.png"},"graphql_resolvers.optimized.png":{"width":600,"height":165,"webpPath":"graphql_resolvers.optimized.webp","optimizedPath":"graphql_resolvers.optimized.optimized.png"},"graphql_resolvers.png":{"width":1488,"height":408,"webpPath":"graphql_resolvers.webp","optimizedPath":"graphql_resolvers.optimized.png"},"graphql_vs_rest.optimized.png":{"width":600,"height":252,"webpPath":"graphql_vs_rest.optimized.webp","optimizedPath":"graphql_vs_rest.optimized.optimized.png"},"graphql_vs_rest.png":{"width":1000,"height":420,"webpPath":"graphql_vs_rest.webp","optimizedPath":"graphql_vs_rest.optimized.png"}}},{"content":"\\r\\nCoronavirus and the lockdowns it forced has probably sped up the transition to working from home in many jobs by at least a decade. Workers who previously spend time sitting in cubicles or offices found out they could have just as well worked from home. Millions started looking for software that would help them do that. \\r\\n\\r\\nEnter Zoom, a somewhat popular video-conferencing program made all the way back in 2011. It was already fairly popular before the pandemic, but this year it\u2019s popularity has exploded. The daily average user numbers went from around 10 million in December to over 300 million in April. \\r\\n\\r\\n## The Good\\r\\n\\r\\nZoom became the go-to choice for many mainly because it\u2019s really easy to use and free (well at least the basic version is) The usually highlighted advantages of Zoom are:\\r\\n\\r\\n- simple and easy to use interface\\r\\n- good audio and video quality\\r\\n- smooth and easy to set up conference calls even for large groups up to 100 people\\r\\n- compatibility with various systems: Windows, macOS, Linux, Android, and iOS\\r\\n- ability to share slides and content\\r\\n- scheduling conferences via a calendar that can be shared with others\\r\\n- virtual backgrounds\\r\\n\\r\\n![Leading video-call platfrom](video_call.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\nZoom also helped itself by making the program free to use for K-12 schools in the US since early March, just as the lockdowns were starting. It also received a lot of free publicity from famous users, even the UK government used it to host sessions.\\r\\n\\r\\n## The Bad\\r\\n\\r\\nWell, it\u2019s not all as rosy as it sounds. Zoom has been involved in some controversies that have become more and more apparent as it gained popularity. The main point of criticism has been lackluster security. \\r\\n\\r\\n- In 2019 Apple was forced to remove Zoom from Macs after it turned out a security flaw could let websites hijack users\' cameras. Although the company quickly addressed this with fixes and a lengthy blog post, it wasn\'t a good look.\\r\\n\\r\\n- Zoom has no end-to-end encryption, despite some advertising materials claiming otherwise. It stores all the keys involved in user data encryption in its own cloud infrastructure. Which means it can access user data at will.\\r\\n\\r\\n- Zoom calls have random generated IDs consisting between 9 and 11 digits and these can apparently be brute-forced or even randomly guessed which means hackers can get into meetings.\\r\\n\\r\\n![Security controversies](hack.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\nThe flaws were pretty notorious and led to a phenomenon called *zoom bombing* where pranksters would join meetings to broadcast inappropriate content. It got so bad the FBI had to officially warn schools.\\r\\n\\r\\n## The Ugly\\r\\n\\r\\nRemember that thing about Zoom having access to user data? Well, it turns out that\u2019s not an accident.\\r\\n\\r\\n- This month Zoom admitted to closing three meetings commemorating the Tiananmen Square crackdown and suspended the accounts of activists who organized them. This led to teachers voicing concerns about how they\u2019re supposed to cover such topics in classes hosted on the platform.\\r\\n\\r\\n- In April the New York Times found out Zoom\u2019s data mining feature was automatically sending user\u2019s names and emails to LinkedIn allowing participants to access other users\' profile data.\\r\\n\\r\\n- In March Motherboard found out Zoom\u2019s iOS app was automatically sending device analytics to Facebook without informing the user and did it even if the user did not have a Facebook account. There was no mention of this in the privacy policy either.\\r\\n\\r\\n![Privacy concerns](privacy.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\nSo far this has led to a couple of lawsuits, an inquiry by the Federal Trade Commission and outright bans from some tech companies and the UK\u2019s ministry of defense. Not good news for the company to put it mildly. Yet despite all that Zoom is still hugely popular and looks like it will stay that way despite its flaws. To be fair it\'s not like it\u2019s main competitors like Microsoft Teams and Google Hangouts don\'t have any either, so pick your poison.\\r\\n","data":{"title":"Zooming on Zoom","date":"2020-06-29T11:12:00.284Z","image":"feat_zoom.png","author":"Michal"},"path":"zoom-security-controversies","images":{"feat_zoom.optimized.png":{"width":600,"height":252,"webpPath":"feat_zoom.optimized.webp","optimizedPath":"feat_zoom.optimized.optimized.png"},"feat_zoom.png":{"width":1000,"height":420,"webpPath":"feat_zoom.webp","optimizedPath":"feat_zoom.optimized.png"},"hack.optimized.png":{"width":600,"height":252,"webpPath":"hack.optimized.webp","optimizedPath":"hack.optimized.optimized.png"},"hack.png":{"width":1000,"height":420,"webpPath":"hack.webp","optimizedPath":"hack.optimized.png"},"privacy.optimized.png":{"width":600,"height":252,"webpPath":"privacy.optimized.webp","optimizedPath":"privacy.optimized.optimized.png"},"privacy.png":{"width":1000,"height":420,"webpPath":"privacy.webp","optimizedPath":"privacy.optimized.png"},"video_call.optimized.png":{"width":600,"height":252,"webpPath":"video_call.optimized.webp","optimizedPath":"video_call.optimized.optimized.png"},"video_call.png":{"width":1000,"height":420,"webpPath":"video_call.webp","optimizedPath":"video_call.optimized.png"}}},{"content":"\\r\\nA while ago I wrote about [Super Graph which turns GraphQL queries into a single SQL query](https://blog.graphqleditor.com/super-graph-datafetching-simplified/). Today let\'s take a look at a very similar Java project called Elide.\\r\\n\\r\\n![Elide\'s logo](elide.png)\\r\\n\\r\\n## What\'s Elide\\r\\n\\r\\nElide is a Java library provided by [Yahoo!](https://github.com/yahoo) which aims to boost the development velocity of your projects by enabling you to stand up a JSON API or GraphQL web service with minimal effort starting from a JPA annotated data model. Elide allows you to quickly build and deploy production-ready  JSON-API & GraphQL service letting you fetch entire object graphs in a single round trip. It supports multiple data model mutations in a single request in both JSON-API & GraphQL service. Creating objects, setting up relationships as well as updating or deleting, all is handled in a single atomic request. \\r\\n\\r\\n- **Production Quality** - build and deploy production-ready web services that expose your data as a service the way you need it.\\r\\n\\r\\n- **Security** - control access to your data by defining custom rules and annotating your models.\\r\\n\\r\\n- **Mobile-Friendly** - get only the data you asked for; fetch entire object graphs in a single round trip.\\r\\n\\r\\n- **Single Atomic Request** - Create objects, set up relationships, update, delete - all together in a single atomic request.\\r\\n\\r\\n- **Customize** - define custom behaviors for your data model operations, data validation annotations & request lifecycle hooks.\\r\\n\\r\\n\\r\\nElide is 100% open source under the commercial-friendly Apache 2.0 License.\\r\\n\\r\\n## How to use Elide\\r\\n\\r\\n**1. Define a model** - as mentioned above Elide bases on a JPA annotated data model so our first step it setting it up & including relationships to other models using Java, Kotlin, Groovy or other JVM languages,\\r\\n\\r\\n**2 Secure** - next step is securing access to our model\'s fields and entities through a declarative permission syntax,\\r\\n\\r\\n**3. Expose** - then making instances of your new model accessible through a top-level collection or if you prefer restricted access through relationships to other models,\\r\\n\\r\\n**4. Deploy & Query** - once all above is done you are good to deploy and query your data with JSON or GraphQL requests.\\r\\n\\r\\n![How to use Elide](using_elide.png)\\r\\n##### Source: [elide.io](https://elide.io/)\\r\\n\\r\\nIf you want to learn more about Elide or thinking about incorporating it to your product make sure the check [Elide\'s documentation](https://elide.io/pages/guide/01-start.html).\\r\\n","data":{"title":"Elide - Opinionated APIs for web & mobile","date":"2020-06-17T13:17:00.284Z","image":"elide_feat.png","author":"Tomek"},"path":"elide-opinionated-apis","images":{"elide.optimized.png":{"width":600,"height":100,"webpPath":"elide.optimized.webp","optimizedPath":"elide.optimized.optimized.png"},"elide.png":{"width":635,"height":106,"webpPath":"elide.webp","optimizedPath":"elide.optimized.png"},"elide_feat.optimized.png":{"width":600,"height":252,"webpPath":"elide_feat.optimized.webp","optimizedPath":"elide_feat.optimized.optimized.png"},"elide_feat.png":{"width":1000,"height":420,"webpPath":"elide_feat.webp","optimizedPath":"elide_feat.optimized.png"},"using_elide.optimized.png":{"width":600,"height":289,"webpPath":"using_elide.optimized.webp","optimizedPath":"using_elide.optimized.optimized.png"},"using_elide.png":{"width":1200,"height":578,"webpPath":"using_elide.webp","optimizedPath":"using_elide.optimized.png"}}},{"content":"\\r\\nThe last few weeks we looked at various types of licenses and what they entail. Now that we know a little bit about them it\u2019s time to look at the approach of using multiple licenses or hybrid software licensing.\\r\\n\\r\\n## The ins and outs\\r\\nMulti licensing is the practice of licensing your work under multiple different licenses so that others can choose under which license they want to use it or work on it. The practice emerged in the early aughts addressing the need for making open source development profitable. It allowed developers to create proprietary variants of copyleft software and was intended for those who wanted to work on it, but either wanted to monetize their work later or just didn\'t want to publish their source code. The usual way to go about this is dual-licensing software under a permissive license like MIT and a copyleft license like GPL. \\r\\n>For example Perl is licensed under GPL and their Artistic License to make it available to both groups.\\r\\n\\r\\n![MIT and GPL](mit_gpl.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Takes two to tango\\r\\nGPL is a copyleft license, that means under this license any derivative work has to be licensed under GPL (or a compatible copyleft license). That\'s why it\u2019s often called a viral license because it carries over from project to project. This led to the approach of dual-licensing and by that way giving the developer community a choice between using the copyleft or the proprietary variant:\\r\\n\\r\\n- those who wanted their work to remain copyleft and free to use would choose the GPL license.\\r\\n- those who wanted their work to be monetized later or didn\'t want to publish their source code would choose the proprietary license.\\r\\n\\r\\n\\r\\n## But wait, there\u2019s more\\r\\nIssues with license compatibility made some even use tri-licensing to maximize compatibility. Like Mozlilla with both Firefox and Thunderbird being licensed under their Mozilla Public License, GPL v2 and LGPL v2.1 Mozilla later updated their license to include compatibility clauses for GPL which made tri-licensing a bit redundant. \\r\\n>Ruby used a similar approach using Ruby license, GPL v2 and the 2-clause BSD license.\\r\\n\\r\\n## Why should I?\\r\\nToday the growing popularity of permissive licenses, as well as fixing some of the compatibility issues in copyleft licenses, has somewhat simplified software licensing. However some issues are still present, especially in connection with copyleft licenses. GPL is still widely used and is incompatible or only one way compatible with numerous other licenses. That makes multi-licensing a viable approach with some advantages:\\r\\n\\r\\n- **project flexibility** - developers can choose whether they want their work to be copyleft or proprietary and if they want to make their source code public and available for modification or not,\\r\\n\\r\\n- **best of both worlds** - combining wide ranging continuous code improvement through the community while maintaining the possibility of monetization through commercial licensing,\\r\\n\\r\\n- **variability** - you can offer a freemium version for everyone to work on and a subscription based commercial premium version for end-users,\\r\\n\\r\\n- **simplicity** - avoiding various headaches with license compatibility.\\r\\n\\r\\n\\r\\nSo if it\u2019s so great why doesn\'t everyone do it? Well the obvious drawback is the added work in maintaining more than one license. In a community that values simplicity more straightforward approaches are usually favoured. But hey who says you can\'t zig when everyone else zags?\\r\\n","data":{"title":"Software licensing - All about multi-licensing","date":"2020-06-15T11:12:00.284Z","image":"multi_licensing_feat.png","author":"Michal"},"path":"software-licensing-multi-licensing","images":{"mit_gpl.optimized.png":{"width":600,"height":252,"webpPath":"mit_gpl.optimized.webp","optimizedPath":"mit_gpl.optimized.optimized.png"},"mit_gpl.png":{"width":1000,"height":420,"webpPath":"mit_gpl.webp","optimizedPath":"mit_gpl.optimized.png"},"multi_licensing_feat.optimized.png":{"width":600,"height":252,"webpPath":"multi_licensing_feat.optimized.webp","optimizedPath":"multi_licensing_feat.optimized.optimized.png"},"multi_licensing_feat.png":{"width":1000,"height":420,"webpPath":"multi_licensing_feat.webp","optimizedPath":"multi_licensing_feat.optimized.png"}}},{"content":"\\r\\n\\r\\n**[Super Graph](https://supergraph.dev/docs/home)** is a service that creates a high-performance GraphQL API, all happens instantly and without any code. The core concept of Super Graph is to reduce development time by simplifying database operations and it\'s achieved by translating your [GraphQL queries](https://graphql.org/learn/queries/)  into a single & blazingly fast SQL query.\\r\\n\\r\\n>*It aims to cut development time by reducing the boilerplate when developing GraphQL APIs that use an SQL database.* \\r\\n\\r\\nBy giving GraphQL API for PostgreSQL database written in Go, Super Graphs aims to reduce development time when developing GraphQL APIs that use refers to a SQL database by automatically generating SQL queries along with some most commonly used features such as authentication, Rails integration, remote joins, support for JWT tokens, DB migrations, seeding and more.\\r\\n\\r\\n\\r\\n>*Super Graph will learn your database and generate the most efficient SQL query.*\\r\\n\\r\\nInstead, just describe the data you need in GraphQL and give that to Super Graph it\'ll automatically learn your database and generate the most efficient SQL query fetching your data in the JSON structure you expected.\\r\\n\\r\\n![GraphQL query](graphql.png)\\r\\n###### Source: [supergrapqh.dev](https://supergraph.dev/docs/home)\\r\\n\\r\\nAnd as a result of data fetched by Super Graph you will be given a JSON with all the data needed without writing any code or SQL.\\r\\n\\r\\n![Data fecthed from GraphQL from previous picture](data.png)\\r\\n###### Source: [supergrapqh.dev](https://supergraph.dev/docs/home)\\r\\n\\r\\n## Why Super Graph?\\r\\n\\r\\nThe creator of Super Graph, [Vikram Rangnekar](https://twitter.com/dosco), found that on average developers spend too much time on building API backends (development, updating, maintenance) and it always comes to figuring out what the UI needs then build an endpoint for it which always comes with a struggle with providing the data in the form that the frontend expects to see. Being weary by the idea of writing the same code again and again he decided to build a compiler that converts GraphQL to highly efficient SQL.\\r\\n\\r\\nThe above-mentioned compiler is the heart of Super Graph providing everything you needed for your app. No more spending weeks or months writing backend API code. Just make the query you need and Super Graph will do the rest.\\r\\n","data":{"title":"Super Graph - turn GraphQL queries into a single SQL query","date":"2020-06-11T15:12:00.284Z","image":"supergraph_feat.png","author":"Tomek"},"path":"super-graph-datafetching-simplified","images":{"data.optimized.png":{"width":600,"height":483,"webpPath":"data.optimized.webp","optimizedPath":"data.optimized.optimized.png"},"data.png":{"width":880,"height":709,"webpPath":"data.webp","optimizedPath":"data.optimized.png"},"graphql.optimized.png":{"width":600,"height":383,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":880,"height":562,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"supergraph_feat.optimized.png":{"width":600,"height":252,"webpPath":"supergraph_feat.optimized.webp","optimizedPath":"supergraph_feat.optimized.optimized.png"},"supergraph_feat.png":{"width":1000,"height":420,"webpPath":"supergraph_feat.webp","optimizedPath":"supergraph_feat.optimized.png"}}},{"content":"\\r\\nEULAs or End User License Agreements everyone knows what they are, nobody reads them. You\u2019ve probably clicked \u201cI agree\u201d without as much as a glance many times yourself. But what if you actually need one for your program or app?\\r\\n\\r\\n\\r\\n## The basics\\r\\n\\r\\nThe End User License Agreement is basically a contract between the seller and buyer (or provider and user) of the software. Usually they\u2019re presented in a click-through fashion only requiring clicking accept to install or use the program. Most EULA\u2019s:\\r\\n\\r\\n- **STATE** how the software can be used and any limitations on that. Such as forbidding reverse engineering it, studying the source code or limiting the devices the software can be used on,\\r\\n- **EXPLAIN** how the provider complies with rules and consumer protection laws, pertaining to the platform relevant to the software,\\r\\n- **ENSURE** the publisher has the rights it needs to protect its interests in regards to the software (especially in cases like microtransactions within games and apps),\\r\\n- **PROTECT** the provider from being sued by the user for any damage caused by the software or any adverse effects of using it not as intended.\\r\\n\\r\\n## Where do I get one?\\r\\n\\r\\nSo now that you know what it does, how do you get one? There\u2019s three options:\\r\\n\\r\\n- **Hiring a lawyer to write you one** - this is the surefire option if you want to absolutely be sure there\u2019s no holes or mistakes. Fork up the money and hire a professional to write one for you, the obvious drawback is that it will cost you (a lot).\\r\\n\\r\\n- **Using a template** - there\'s a bunch of EULA templates available for use for free. You could use one but you would need to modify it to fit your software\u2019s particularities. Yeah it might be a little complicated but let\u2019s be honest it\u2019s not as hard as programming. Oh and obviously since you\u2019re acting as you own lawyer here if you make any mistakes that\u2019s on you.\\r\\n\\r\\n- **Using one provided by a distribution platform** - thankfully some platforms like Apple\u2019s iTunes Store and Google Play provide a default licensing template. While these are a free and low-effort option you should keep in mind they are drafted to ensure the interests of the platform operator, not yours. They might favor customer interests over the developers or they might not be fitted to your type of software. So you really should still read and carefully amend them to fit what you need. Also bear in mind that if you\'re releasing on multiple platforms you might end up with a number of different licensing terms applying to your software.\\r\\n\\r\\n![End User License Agreement](deal.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Key issues to look for\\r\\n\\r\\nNow that you know where to get one it\u2019s time to look at what you should focus on in one.\\r\\n\\r\\n- **Scope** - make sure that the license explains what the user can and cannot do. Remember that excessive prohibitions might not be legal, as Steam found out when the Court of Justice of the EU ruled that publishers cannot forbid users from reselling their downloaded games.\\r\\n\\r\\n- **Online features and services** - if your software has or requires online services make sure that is also covered in the license.  Activision recently found this out the hard way after shutting down their online song database for Guitar Hero and getting hit with requests for refunds. So if you\u2019re planning on discontinuing online services at some point or even at least ensuring you\u2019re protected in case of downtime it\u2019s prudent to include that in the license.\\r\\n\\r\\n- **Uploading and third party content** - if the user can upload content to your or a 3rd party server the EULA should lay down guidelines on how that is handled. How the publisher can use that content and what the users can upload.\\r\\n\\r\\n- **Updates and additional content** -  if you\u2019re planning on providing updates or additional content (either free or paid for) the EULA should cover that as well or you\u2019ll end up having to fiddle around with this every time you do so.\\r\\n\\r\\n- **Distribution platform** - unless you\u2019re distributing by yourself you\u2019re probably going to need to look at the Terms and Conditions for the platforms you\u2019re planning on distributing your software on. For an example some platforms might require you to adhere to their policies on refunds or advertising. As mentioned above some distribution platforms will provide a standard EULA so if you\u2019re planning on releasing on multiple different platforms you\u2019ll need to look through them.\\r\\n\\r\\nAll in all it\u2019s simply a good idea to make sure your EULA covers what you want and does not have any holes. Sure usually people will at most give it a glance before clicking \u2018agree\u2019 but some might read it and on occasion you can even get into some trouble if it\u2019s badly written. Better safe than sorry.  \\r\\n","data":{"title":"Everything you need to know about EULA","date":"2020-06-08T10:17:00.284Z","image":"eula_feat.png","author":"Michal"},"path":"everything-about-eula","images":{"deal.optimized.png":{"width":600,"height":252,"webpPath":"deal.optimized.webp","optimizedPath":"deal.optimized.optimized.png"},"deal.png":{"width":1000,"height":420,"webpPath":"deal.webp","optimizedPath":"deal.optimized.png"},"eula_feat.optimized.png":{"width":600,"height":252,"webpPath":"eula_feat.optimized.webp","optimizedPath":"eula_feat.optimized.optimized.png"},"eula_feat.png":{"width":1000,"height":420,"webpPath":"eula_feat.webp","optimizedPath":"eula_feat.optimized.png"}}},{"content":"\\r\\n\\r\\nTechnology is changing. Lately, the changes seem to happen even more rapidly than ever before. It feels like new exciting technology is being announced every month or week, each looking promising and bringing some extra qualities to our life.\\r\\n\\r\\nWhich one of those new technologies will have the biggest influence on our lives? The answer would be different for each of us. My personal favorites are GraphQL & 5G which address the same problem - how to **provide data better, faster & in the more accessible way**.\\r\\n\\r\\n## The rise of 5G\\r\\n\\r\\nPromising and interesting are the words commonly used to describe 5G. A while ago world heard about the concept of 5G but it was a distant vision. Now as the technology is being slowly tested in different parts of the world we are a couple of steps away from having it widely accessible. Of course, it will take some time to get the infrastructure in place, as well as apply 5G as a standard in the new devices but we are moving forward in the right direction. Some say that 5G is still theoretical and will need to prove its speed and reliability \\"on production\\" but that\'s how it works in the tech world.\\r\\n\\r\\n![5G speed](5g_speed.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## GraphQL \\r\\n \\r\\nSimilarly to the 5G, [GraphQL](https://graphqleditor.com/) is about getting your data faster. Backing in 2012 during the mobile app boom team of Facebook mobile app engineers realized that the way that the data to the app is being served is not enough. They started working on a new way that would suit modern devs\' needs better.  The result of their work is known as GraphQL - a new language agnostic, standard for querying data. GraphQL uses types to make sure the client asks only for data possible to be returned, as well as giving frontend power to query & mutate data. It heavily reduces the number of bits transferred which results in better performance even on slow cellular connections.\\r\\n\\r\\n## The importance of \\"Zero-latency\\"\\r\\n \\r\\nSpeed is the benchmark for wireless network performance and 5G offers data transfer close-to-zero latency. Data transmission in real-time allows much more advanced concepts to be implemented as the loading time will no longer hinder their functionality especially i.e the IoT. Imagine self-driving cars reacting with a delay to the hazard detected on the road. The reaction time between our human and the brain is around ten milliseconds. An autonomous vehicle analyzing data with a latency of 1 millisecond will make it react **1000x faster than a human**. Self-driving cars are a bit futuristic example but imagine the quality improvement of apps demanding very up to date data or how 5G could unleash the potential of **brilliant concepts currently being held back by the technology**.\\r\\n\\r\\n![Ideads held back by the tech](future.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## The synergy\\r\\n\\r\\nNow imagine the quality of accessing data combining GraphQL with 5G. Cool right? This might erase words such a \\"laggy\\" or \\"delay\\" from our vocabulary! The data access speed is what modern users, businesses, and the applications they are using daily really need. The global pandemic forced us to change the way we live. It\'s influence on every aspect of our lives such as how we work, spend free time, communicate, shop etc. makes zero-latency even more important nowadays. I believe that GraphQL & 5G will have a key role in modern development and would have a great (non-directly) influence on the new way of living.\\r\\n","data":{"title":"Technologies that will change the world","date":"2020-05-29T10:37:00.284Z","image":"tech_feat.png","author":"Tomek"},"path":"5g-will-change-the-world","images":{"5g_speed.optimized.png":{"width":600,"height":252,"webpPath":"5g_speed.optimized.webp","optimizedPath":"5g_speed.optimized.optimized.png"},"5g_speed.png":{"width":1000,"height":420,"webpPath":"5g_speed.webp","optimizedPath":"5g_speed.optimized.png"},"future.optimized.png":{"width":600,"height":252,"webpPath":"future.optimized.webp","optimizedPath":"future.optimized.optimized.png"},"future.png":{"width":1000,"height":420,"webpPath":"future.webp","optimizedPath":"future.optimized.png"},"tech_feat.optimized.png":{"width":600,"height":252,"webpPath":"tech_feat.optimized.webp","optimizedPath":"tech_feat.optimized.optimized.png"},"tech_feat.png":{"width":1000,"height":420,"webpPath":"tech_feat.webp","optimizedPath":"tech_feat.optimized.png"}}},{"content":"\\r\\nIf you\u2019ve read a little bit about software licensing or Linux you probably know a few things about copyleft and it\u2019s restrictions and requirements. If not and you\u2019re just curious about what copyleft is, welcome anyway.\\r\\n\\r\\n\\r\\n## A little history\\r\\n\\r\\nTo give you a bit of history, copyleft is a concept created in the mid-80s by **Richard Stallman**. Long story short, he was working on a Lisp interpreter and when another company called Symbolics asked him if they could use it, he provided it to them via public domain. Symbolics improved the interpreter, but when Stallman wanted to access those improvements they refused. This highlighted a pretty big flaw in using the public domain, especially for cooperative works. Anyone could break away at any time and restrict access to their modifications.\\r\\n\\r\\nThis prompted Stallman to create a new type of license called **Emacs General Public License** (this later evolved into the popular GNU GPL). The concept was based around four freedoms:\\r\\n\\r\\n- **freedom 0** - to run the program in any way and for any purpose\\r\\n- **freedom 1** - to study the source code and change it\\r\\n- **freedom 2** - to copy and share the program with others\\r\\n- **freedom 3** - to distribute copies of your modified version\\r\\n\\r\\nThis however was not yet copyleft. In order to protect those rules from being changed a further rule had to be added, that all derivative works also follow those same rules. So that the author of a modified or improved version could not impose any restrictions that violate those basic rules. Today it simply means that any modified or improved version has to be distributed under the same type of license i.e. copyleft.\\r\\n\\r\\n![CopyLeft](copy_left.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\nThese rules allow a certain degree of flexibility as long as it does not infringe on their basic premise. For example you can require modified versions to use a different name or logo than yours or to identify their modifications.\\r\\n\\r\\n\\r\\n## Advantages\\r\\n\\r\\n**Copyleft licenses** are sometimes referred to as *viral licenses* because all derivative work \u2018carries\u2019 the copyleft license. Despite that moniker, there are actually significant advantages to using them:\\r\\n\\r\\n- preventing companies from using software and giving nothing back to the community,\\r\\n- preventing others from using your work to create a competing product.\\r\\n\\r\\nThe first argument being a reference to situations like the above-mentioned Symbolics affair. The second refers to cases where a company can create a product that will compete with yours by using your own code. Taking into account that it may also have significantly more resources available it might not be a fair competition at all.\\r\\n\\r\\n\\r\\n## Strong vs weak copyleft\\r\\n\\r\\nAnother advantage is that the **copyleft is quite flexible in applying its core rules**. This has led to two main branches of licenses called strong and weak copyleft.\\r\\n\\r\\n- **strong copyleft** -  means the provisions of the original license are imposed on all derivative work. Derivative work can be relicensed under a different copyleft license, but only if it is compatible with the original license. The most popular examples are GNU GPL and EU Public License.\\r\\n\\r\\n- **weak copyleft** - is a compromise between strong copyleft and permissive licenses. It allows more flexibility in the provisions such as linking from code licensed under different types of licenses (even non-opensource ones) or incorporating code in larger software (even if it isn\'t copyleft). The most popular examples are LGPL and the Mozilla Public License.\\r\\n\\r\\n\\r\\n## Popularity\\r\\n\\r\\nAll in all, copyleft remains immensely popular among developers, even though it has been declining for the past few years. According to WhiteSource three of the six most widely used licenses are copyleft with versions two and three of GPL carrying the torch. Lots of popular programs like **VLC media player, 7-zip, Firefox, and Openoffice are licensed under copyleft licenses**.\\r\\n\\r\\n![Copyleft programs](copeleft_examples.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Read up\\r\\n\\r\\nMost developers advise those considering a copyleft license for their work to think about the long term plans and goals of their project. Another important factor is considering the environment where you want your project to fit in, platform or language, and how compatible your chosen license is with those most used there. So read up before you make up your mind.\\r\\n","data":{"title":"Software Licensing - what is the Copyleft","date":"2020-05-25T10:17:00.284Z","image":"copyleft_feat.png","author":"Michal"},"path":"what-is-a-copyleft","images":{"copeleft_examples.optimized.png":{"width":600,"height":252,"webpPath":"copeleft_examples.optimized.webp","optimizedPath":"copeleft_examples.optimized.optimized.png"},"copeleft_examples.png":{"width":1000,"height":420,"webpPath":"copeleft_examples.webp","optimizedPath":"copeleft_examples.optimized.png"},"copyleft_feat.optimized.png":{"width":600,"height":252,"webpPath":"copyleft_feat.optimized.webp","optimizedPath":"copyleft_feat.optimized.optimized.png"},"copyleft_feat.png":{"width":1000,"height":420,"webpPath":"copyleft_feat.webp","optimizedPath":"copyleft_feat.optimized.png"},"copy_left.optimized.png":{"width":600,"height":252,"webpPath":"copy_left.optimized.webp","optimizedPath":"copy_left.optimized.optimized.png"},"copy_left.png":{"width":1000,"height":420,"webpPath":"copy_left.webp","optimizedPath":"copy_left.optimized.png"}}},{"content":"\\r\\nA while ago the dev world heard the news that Ryan Dahl, who previously created Node.js, has released a new JavaScript & TypeScript scripting environment.\\r\\n\\r\\n**[Deno](https://deno.land/)** is based on V8 and written in Rust & TypeScript and it aims to provide a productive and secure scripting environment that a modern programmer needs.\\r\\n\\r\\n## What\'s wrong with Node?\\r\\n\\r\\n> *At times Node is like nails on a chalkboard to me.* - Ryan Dahl \\r\\n\\r\\nIn 2018 during a JSConf Ryan Dahl gave a keynote speech called *\\"Design Mistakes in Node\\"* where he highlighted some of the most disturbing him Node\'s flaws or, as he called them, *his regrets* like:\\r\\n- the build system (sticking to GYP)\\r\\n- removing promises\\r\\n- node modules\\r\\n- security flaws i.e. linter having full access to your device & network\\r\\n\\r\\nand some more. During that talk, he has also shown the world **Deno\'s prototype**.\\r\\n\\r\\n\\r\\n![Node modules flaws](node_modules_flaws.png)\\r\\n\\r\\n## Why Deno?\\r\\n\\r\\nDeno is an anagram for Node and it aims to do the same job as a Node in a better way. Deno comes with some pretty interesting built-in features & concepts:\\r\\n\\r\\n- **Secure by default** - utilize the fact that JavaScript is a secure sandbox. Deno has no file, network, or environment access unless explicitly enabled.\\r\\n- **TypeScript Support** - TypeScript is great & Deno supports TypeScript out of the box.\\r\\n- **Simplified modules system** - with no attempt to achieve compatibility with Node modules, Deno offers totally different & simplified approach where standard modules are hosted at `[deno.land/std](deno.land/std)` and are distributed via URLs (you can still use third party modules from any location on the web)\\r\\n- **Single executable** - Deno ships only a single executable with minimal linkage\\r\\n\\r\\n\\r\\n## Will Deno replace Node.js?\\r\\n\\r\\nDeno is a new kid on the block. It offers some major improvements to some of the Node weaknesses. Although it rapidly gained a lot of attention **(almost 60K stars on GitHub)**, it\'s just a 1.0 version and it\'s defiantly not production-ready yet. Despite its many flaws, Node.js is the widest use & mature JavaScript runtime. There are thousands of hudge, corporate projects running it and they will keep doing so. Deno is  worth keeping your eyes on & if you are interested in its concept and learning more about Deno you should definitely watch Rayan\'s keynote:\\r\\n\\r\\n[![10 things I regret about Node.js by Ryan Dahl](jsconf.png)](https://www.youtube.com/watch?v=M3BM9TB-8yA)\\r\\n\\r\\n","data":{"title":"Deno - Node.js successor (?)","date":"2020-05-20T13:37:00.284Z","image":"deno_feat.png","author":"Tomek"},"path":"deno-node-successor","images":{"deno_feat.optimized.png":{"width":600,"height":252,"webpPath":"deno_feat.optimized.webp","optimizedPath":"deno_feat.optimized.optimized.png"},"deno_feat.png":{"width":1000,"height":420,"webpPath":"deno_feat.webp","optimizedPath":"deno_feat.optimized.png"},"jsconf.optimized.png":{"width":600,"height":336,"webpPath":"jsconf.optimized.webp","optimizedPath":"jsconf.optimized.optimized.png"},"jsconf.png":{"width":1035,"height":579,"webpPath":"jsconf.webp","optimizedPath":"jsconf.optimized.png"},"node_modules_flaws.optimized.png":{"width":600,"height":300,"webpPath":"node_modules_flaws.optimized.webp","optimizedPath":"node_modules_flaws.optimized.optimized.png"},"node_modules_flaws.png":{"width":1000,"height":500,"webpPath":"node_modules_flaws.webp","optimizedPath":"node_modules_flaws.optimized.png"}}},{"content":"\\r\\nLast time we took a swing at breaking down the various types of software licenses. While useful if you wanted to get a hang of some basics, if you wanted to actually pick a license for your software you\u2019d probably need a bit more info on the various particular licenses that are publicly available. So without further ado that\u2019s exactly what we\u2019ll try to do here.\\r\\n\\r\\n## Compatibility\\r\\n\\r\\nFirst let\u2019s talk about compatibility, a topic particularly important for copyleft licenses. Let\u2019s say code under license A is compiled with code under license B to form a new work, is that permissible under license law? Well, that depends on the particular licenses. In general copyleft licenses are compatible with other open-source licenses as long as:\\r\\n\\r\\n- the open-source license does not have any additional requirements or restrictions that are not in the copyleft license (for example the original BSD license contains an advertising clause that makes it incompatible with copyleft licenses like GPL)\\r\\n\\r\\n- the open-source license has an explicit compatibility clause in it (for example the European Public License has a compatibility clause for GPL)\\r\\n\\r\\n![Picking a license is an important choice](picking_license.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\n\\r\\n## GNU family breakdown\\r\\n\\r\\nThe GNU license family serves as a prime example of copyleft licenses. Let\u2019s break them down:\\r\\n\\r\\n- **General Public License (GPL)** - the most popular GNU license by far. It\u2019s current version is GPLv3 and has added compatibility clauses for many other free software licenses such as MIT and BSD (a full list is available at gnu.org) However GPL is incompatible with many digital distribution platforms such as Apple\u2019s app store. This is because copyleft licenses have a \u2018free to copy\u2019 rule while digital distribution platforms often use DRM especially to prevent copying and sharing of paid software.\\r\\n\\r\\n- **Lesser General Public License (LGPL)** - is somewhat of a compromise between a copyleft and permissive license. It allows developers to include components licensed under LGPL even into proprietary software and without the requirement of sharing the source code, unlike strong copyleft licenses (such as the above mentioned GPL)\\r\\n\\r\\n- **GNU Affero General Public License (AGPL)** - is a modified GPL license with one added requirement: if you run a modified program on a server and let other users communicate with it there, your server must also allow them to download the source code corresponding to the modified version running there.\\r\\n\\r\\n\\r\\n## Popular permissive licenses breakdown\\r\\n\\r\\nPermissive licenses contain few restrictions on reuse and therefore are generally compatible and interoperable with most other licenses.\\r\\n\\r\\n- **The MIT License** - currently the most popular software license in use. Known for its small size and few restrictions the MIT license is highly compatible with other licenses, even copyleft licenses like GPL. However it is worth noting that compatibility only goes one way: MIT licensed software can be re-licensed as GPL software, but not the other way around.\\r\\n\\r\\n\\r\\n- **Apache 2.0** - is a permissive open source license. In terms of popularity, it comes second only to the MIT license. Software released under this license can be freely used, modified, distributed and sold. Additionally, a modified version of an Apache-licensed product can be released under any license of your choice. Similarly to the MIT License, it is one way compatible with GPLv3 ie. Apache 2 software can be included in GPLv3 projects, but GPLv3 software cannot be included in Apache projects. Unlike other permissive licenses Apache provides not only copyright but also an explicit patent license. \\r\\n\\r\\n![Software licences](licences.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\n\\r\\n## BSD Licenses family breakdown\\r\\nBerkeley Software Distribution or BSD is actually a family of licenses. \\r\\n\\r\\n- **Original BSD** - the original 4 clause permissive license (also called BSD-old or simply 4-clause BSD) caused some problems due to having an advertising clause, which required authors of all derivative works to acknowledge the original source in all advertising material, causing mounting numbers of acknowledgments down the line.\\r\\n\\r\\n- **BSD 3** - the currently widely used 3 clause permissive license (also called BSD-new or modified BSD) allows redistribution for any purpose as long as the license\u2019s copyright notices and warranty disclaimers are maintained. It also contains a specific clause restricting the use of the names of contributors for endorsement of a derived work without specific permission.\\r\\n\\r\\n- **BSD 2** - a further simplified 2 clause permissive license (also called Simplified BSD or FreeBSD) that omits the above mentioned non-endorsement clause.\\r\\n\\r\\n- **BSD 0** - an even further simplified license created by removing the requirements to include the copyright notice, license text or disclaimer in either source or binary forms. This makes it essentially a public domain equivalent license.\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Software licensing Part II - a deeper dive into license types","date":"2020-05-18T11:12:00.284Z","image":"lic_feat2.png","author":"Michal"},"path":"software-licensing-cheat-sheet-part2","images":{"licences.optimized.png":{"width":600,"height":252,"webpPath":"licences.optimized.webp","optimizedPath":"licences.optimized.optimized.png"},"licences.png":{"width":1000,"height":420,"webpPath":"licences.webp","optimizedPath":"licences.optimized.png"},"lic_feat2.optimized.png":{"width":600,"height":252,"webpPath":"lic_feat2.optimized.webp","optimizedPath":"lic_feat2.optimized.optimized.png"},"lic_feat2.png":{"width":1000,"height":420,"webpPath":"lic_feat2.webp","optimizedPath":"lic_feat2.optimized.png"},"picking_license.optimized.png":{"width":600,"height":252,"webpPath":"picking_license.optimized.webp","optimizedPath":"picking_license.optimized.optimized.png"},"picking_license.png":{"width":1000,"height":420,"webpPath":"picking_license.webp","optimizedPath":"picking_license.optimized.png"}}},{"content":"\\r\\nFor many reasons, it\'s wise to use React\'s built-in state management capabilities rather than an external global state like compatibility, simplicity etc. Unfortunately, it has some limitations like:\\r\\n\\r\\n- Context can only store a single value\\r\\n- Component\'s state can only be shared by pushing it up to the common ancestor \\r\\n\\r\\nThese make it difficult to code-split the parts of the React three where the state has to live from where the state is used. Just a few days ago **Facebook had open-sourced it\'s state management library** that could above mentioned limitations.\\r\\n\\r\\n## Recoil\\r\\n\\r\\n[Recoil](https://github.com/facebookexperimental/Recoil) is an experimental state management library for React apps aiming to improve the above-mentioned flaws of React\'s built-in state management while keeping the API, the semantics & behavior as *Reactish* as possible. Recoil provides several capabilities that are difficult to achieve with React alone while being compatible with the newest features of React.\\r\\n\\r\\n>*Recoil defines a directed graph orthogonal to but also intrinsic and attached to your React tree. State changes flow from the roots of this graph (which we call atoms) through pure functions (which we call selectors) and into components.*\\r\\n\\r\\n## Atoms & Selectors\\r\\n\\r\\nThe core concept of Recoil is the data-flow where data travels from `Atoms` (shared state) through `Selectors` (pure functions) down into React components building your app.\\r\\n\\r\\n![Recoil Atoms Concept](atoms.png)\\r\\n\\r\\n##### Source: [David McCabe @ recoiljs.org](https://recoiljs.org/)\\r\\n\\r\\n**Atoms are units of the state** that components can subscribe to. They contain the source of truth for our application state.  **Selectors transform this state either synchronously or asynchronously**. Atoms are created by using the `atom()` function:\\r\\n\\r\\n```react\\r\\nconst fontSizeState = atom({\\r\\n  key: \'fontSizeState\',\\r\\n  default: 14,\\r\\n});\\r\\n```\\r\\n##### Source: [recoiljs.org](https://recoiljs.org/docs/basic-tutorial/intro)\\r\\n\\r\\nA *selector is a pure function* that accepts atoms or other selectors as an input. When these inputs are changed, the selector function will be re-evaluated. React components can subscribe to selectors and when the selectors change they will re-rendered as well. \\r\\n\\r\\nSelectors are defined using the `selector()` function:\\r\\n```react\\r\\nconst fontSizeLabelState = selector({\\r\\n  key: \'fontSizeLabelState\',\\r\\n  get: ({get}) => {\\r\\n    const fontSize = get(fontSizeState);\\r\\n    const unit = \'px\';\\r\\n\\r\\n    return `${fontSize}${unit}`;\\r\\n  },\\r\\n});\\r\\n```\\r\\n#### Source: [recoiljs.org](https://recoiljs.org/docs/basic-tutorial/intro)\\r\\n\\r\\nThe approach presented by Recoil offers:\\r\\n\\r\\n- boilerplate-free API where the shared state has the same simple get/set interface as React local state,\\r\\n- compatibility with Concurrent Mode and other new React features as they become available,\\r\\n- code-splitting possibility thanks to incremental & distributed state definition,\\r\\n- the state can be replaced without modifying the components that use it.\\r\\n- derived data can move between being synchronous and asynchronous without modifying the components that use it.\\r\\n- backward-compatibility of application state; persisted states can survive application changes.\\r\\n\\r\\n\\r\\n**Recoil** works and thinks just like React providing a **fast & flexible** shared state.  Add Recoil to your app and check how it will influence its state management. \\r\\n","data":{"title":"Recoil - experimental state management library for React","date":"2020-05-15T10:47:00.284Z","image":"recoil_feat.png","author":"Tomek"},"path":"recoil-react-state-management-library","images":{"atoms.optimized.png":{"width":600,"height":235,"webpPath":"atoms.optimized.webp","optimizedPath":"atoms.optimized.optimized.png"},"atoms.png":{"width":1279,"height":500,"webpPath":"atoms.webp","optimizedPath":"atoms.optimized.png"},"recoil_feat.optimized.png":{"width":600,"height":252,"webpPath":"recoil_feat.optimized.webp","optimizedPath":"recoil_feat.optimized.optimized.png"},"recoil_feat.png":{"width":1000,"height":420,"webpPath":"recoil_feat.webp","optimizedPath":"recoil_feat.optimized.png"}}},{"content":"\\r\\nDespite project documentation is very important for both people who will use our software as well as fellow developers who will work on our code in the future, creating it is a tedious job and has always been a least like part of the software development process.\\r\\n\\r\\nAutomatization has always been a holy grail for us here at **[GraphQL Editor](https://graphqleditor.com/)**. We believe that we should simplify the process by its automation where it\'s possible and focus on what we love the most - writing code.\\r\\n\\r\\n![Autogenerated docs are a dream of many developers](schema_doc.png)\\r\\n\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\nThat\'s why in the latest update of GraphQL Editor we have presented the **[Dynamic Documentation Generation](https://app.graphqleditor.com/)** feature. GraphQL Editor\'s built-in documentation generator lets you focus on writing great schema code instead of constantly changing your documentation to keep it always up-to-date as it\'s generated directly from a **GraphQL schema in less than 5 seconds!**\\r\\n\\r\\nYour fully documented **GraphQL schema** is just a couple clicks away, all you need is:\\r\\n\\r\\n1. A valid GraphQL Schema designed or imported to GraphQL Editor (you can import from file or URL)\\r\\n2. Click the \ud83d\ude80 icon in the top-right part of the interface to deploy a _Mock Backend_ for your schema\\r\\n3. Click the \ud83d\udcd6 icon in the top-left area to _Generate the documentation_\\r\\n\\r\\nAnd that\'s all! Now you can enjoy your **Autogenerated documentation of your GraphQL Schema**.\\r\\n\\r\\n![Autogenerate documentation from a GraphQL Schema](https://dev-to-uploads.s3.amazonaws.com/i/kb1ugj81fuoaovhlkm7i.gif)](https://graphqleditor.com/)\\r\\n\\r\\nDynamically generated schema documentation will allow you to:\\r\\n\\r\\n- keep your documentation up-to-date with zero effort,\\r\\n- export your docs to a folder with static generated HTML files,\\r\\n- save your precious time\\r\\n- make your users and fellow developers happy!\\r\\n\\r\\n![Export your schema documentation as static HTML](doc_export.png)\\r\\n\\r\\n**GraphQL Documentation Generator** is the first small milestone on our automatization road map. We believe it would save GraphQL users a lot of time allowing them to focus their force on crucial issues. Some major automatizations are yet to come so stay tuned!\\r\\n","data":{"title":"GraphQL documentation generator","date":"2020-05-13T13:37:00.284Z","image":"docs_feat.png","author":"Tomek"},"path":"graphql-documentation-generator","images":{"docs_feat.optimized.png":{"width":600,"height":252,"webpPath":"docs_feat.optimized.webp","optimizedPath":"docs_feat.optimized.optimized.png"},"docs_feat.png":{"width":1000,"height":420,"webpPath":"docs_feat.webp","optimizedPath":"docs_feat.optimized.png"},"doc_export.optimized.png":{"width":600,"height":375,"webpPath":"doc_export.optimized.webp","optimizedPath":"doc_export.optimized.optimized.png"},"doc_export.png":{"width":961,"height":600,"webpPath":"doc_export.webp","optimizedPath":"doc_export.optimized.png"},"faker.optimized.png":{"width":600,"height":337,"webpPath":"faker.optimized.webp","optimizedPath":"faker.optimized.optimized.png"},"faker.png":{"width":676,"height":380,"webpPath":"faker.webp","optimizedPath":"faker.optimized.png"},"schema_doc.optimized.png":{"width":600,"height":252,"webpPath":"schema_doc.optimized.webp","optimizedPath":"schema_doc.optimized.optimized.png"},"schema_doc.png":{"width":1000,"height":420,"webpPath":"schema_doc.webp","optimizedPath":"schema_doc.optimized.png"}}},{"content":"\\r\\nIf you\u2019ve ever made an app, program, or just written some code, chances are you\u2019re familiar with terms like open source, freeware, and proprietary. You usually find them in the software license. Comprehending license is very important as the penalties for license noncompliance can be severe. There are many different types of software licenses, but today let\'s focus on the basic types you need to understand.\\r\\n\\r\\nIn general, there are 5 types of software licenses: \\r\\n\\r\\n- permissive, \\r\\n- protective, \\r\\n- non-commercial, \\r\\n- proprietary,\\r\\n- public domain.\\r\\n\\r\\nThose determine how the subject software can be used or redistributed, the license will state exactly what the user can and can\'t do with the software. What these types mean and which one you should pick for your software? So let\u2019s break them down using some well-known examples.\\r\\n\\r\\n![Type of software licenses](licenses.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Public Domain\\r\\n\\r\\nThe public domain is the most straightforward of the bunch. It\u2019s not exactly a license, it\u2019s more accurately a waiver of property rights. The author simply donates his/her work to the public domain. That means there is no copyright, patent or trademark and the software is free for use, modification, distribution or sale without any restrictions or even mentioning the original author. According to analysts, the public domain is the 7th most popular type of license used mainly in smaller SourceForge and GitHub projects. \\r\\n\\r\\nLicense examples:\\r\\n- Creative Commons CC0\\r\\n- Unlicense\\r\\n- BSD0\\r\\n\\r\\nSoftware examples: SQLite, I2P, ImageJ\\r\\n\\r\\n\\r\\n## Proprietary license\\r\\n\\r\\nThat\u2019s your traditional run of the mill copyright. The user pays and is able to use the software within the limitations set by the license. The limitations can be various: \\r\\n\\r\\n- a timed subscription \\r\\n- one user per license\\r\\n- DRM\\r\\n- user tiers (standard, gold, platinum etc.)\\r\\n\\r\\n\\r\\nThe most well-known example is, of course, Windows with various editions of their system like Home, Pro or Enterprise. Other examples include Skype, macOS and Adobe Photoshop.\\r\\n\\r\\n## Permissive licenses\\r\\n\\r\\nBy far the most popular type of license, this group contains some of the most commonly used licenses like MIT or BSD. A permissive software license allows everyone to use, share and modify the software for free as long as they credit the original creator. However derivative work can later be relicensed under a different license and made proprietary. So someone who uses your free software to create their own can charge others for it. That\u2019s why while Android is free, apps made using it can be sold on the market.\\r\\n\\r\\nLicense examples: \\r\\n- MIT License\\r\\n- Apache 2.0\\r\\n- BSD licenses\\r\\n\\r\\nSoftware examples: .NET Core, Django, React\\r\\n\\r\\n![There are many licenses types](licenses2.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Protective licenses\\r\\n\\r\\nAlso known as copyleft, these licenses also allow free use, copying and modification of the software with credit to the original creator. The main difference from other types of licenses is that under copyleft all derivative work also has to follow the same copyleft license ie. be free for use, copying and modification. Copyleft is covered under the GNU family of public licenses GPL, LGPL and AGPL. As far as software is concerned Linux, GIMP and MySQL are some pretty widely known examples.\\r\\n\\r\\nLicense examples:\\r\\n- GNU General Public License\\r\\n- Mozilla Public License\\r\\n- Eclipse Public License\\r\\n\\r\\nSoftware examples: Notepad ++, WebKit engine, Launchpad\\r\\n\\r\\n\\r\\n## Non-commercial licenses\\r\\n\\r\\nAlso known as freeware or freemium, the key difference here is that \u2018free\u2019 in freeware refers to the price, not the actual freedom of usage like the above-mentioned licenses. While the price is free the license can restrict usage or offer additional features for payment. Some popular games like League of Legends use this model by providing the base game for free and having microtransactions for various items, cosmetics and bonuses. Others use popups, ads or other means to convince the user to upgrade from free to premium. \\r\\n\\r\\n## Summary\\r\\n\\r\\nSo now the next time you see that you\u2019ll know exactly what type of license it is, before once again clicking close. Next time we\u2019ll take a more in-depth look at the various types of licenses, compatibility and stuff like dual-licensing. Stay tuned!\\r\\n\\r\\n","data":{"title":"Software licensing cheat sheet","date":"2020-05-12T10:17:00.284Z","image":"lic_feat.png","author":"Michal"},"path":"software-licensing-cheat-sheet","images":{"licenses.optimized.png":{"width":600,"height":252,"webpPath":"licenses.optimized.webp","optimizedPath":"licenses.optimized.optimized.png"},"licenses.png":{"width":1000,"height":420,"webpPath":"licenses.webp","optimizedPath":"licenses.optimized.png"},"licenses2.optimized.png":{"width":600,"height":252,"webpPath":"licenses2.optimized.webp","optimizedPath":"licenses2.optimized.optimized.png"},"licenses2.png":{"width":1000,"height":420,"webpPath":"licenses2.webp","optimizedPath":"licenses2.optimized.png"},"lic_feat.optimized.png":{"width":600,"height":252,"webpPath":"lic_feat.optimized.webp","optimizedPath":"lic_feat.optimized.optimized.png"},"lic_feat.png":{"width":1000,"height":420,"webpPath":"lic_feat.webp","optimizedPath":"lic_feat.optimized.png"}}},{"content":"\\r\\n\\r\\nTypeScript is a superset of JavaScript which provides a lot of benefits like autocompletion, type checking, classes, interfaces, and many more. Many developers have fallen in love with it since first use and consider is a one and only choice when writing modern web apps.\\r\\n\\r\\nYesterday Microsoft dev team announced the release candidate version of **TypeScript 3.9 RC**. This version focuses mostly on improvements in performance and stability improvements like:\\r\\n\\r\\n- speeding up the compiler\\r\\n- improved editing experience\\r\\n- removal of some bug fixes & crashes\\r\\n\\r\\n\\r\\n\\r\\n## Performance improvements\\r\\n\\r\\nThe new version provides some serious performances improvements. After detecting poor compilation speed with material-ui packages, the series of fixed were made to improve cases involving large unions, intersections, conditional & mapped types. It is said that version 3.9 achieved a **~40% reduction in material-ui\u2019s compile-time**.\\r\\n\\r\\n![Reduced material-ui compile-time](reduced_time.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n\\r\\n## Improvements in Inference and Promise.all\\r\\n\\r\\nRecent versions of TypeScript have had some changes to the way `Promise.all` and `Promise.race` functions are declared which generated few regressions linked to mixing `null`//`undefined` values. In 3.9 that was fixed along with some improvements to the inference process. \\r\\n\\r\\n## CommonJS Auto-Imports in JavaScript\\r\\n\\r\\nA major improvement are polished auto-imports in JavaScript files using CommonJS modules. TypeScript 3.8 by default assumed that you wanted an ECMAScript-style import regardless of your file. In version 3.9 RC TypeScript automatically detects the types of imports you\u2019re using in your project to keep your file\u2019s style consistent.\\r\\n\\r\\n![TypeScript 3.9 offers improved auto-imports in JavaScript](autoimports.gif)\\r\\n\\r\\n##### Source: [devblogs.miscrosoft.com](https://devblogs.microsoft.com/typescript/announcing-typescript-3-9-rc/)\\r\\n\\r\\n\\r\\n## The `awaited` Type is gone (as for now)\\r\\n\\r\\nA new type of operator called `awaited` with a goal to accurately design the unwrapping of `Promise` in JavaScript is still in progress. The dev team decided to pull the feature out of our main branch as `awaited` is still in progress and requires some more work before they can roll it out to everyone with confidence.\\r\\n\\r\\n\\r\\n--- \\r\\n\\r\\nQuite a lot right? And these are only some of the changes! If you would like to read more about the new version the Microsoft dev blog contains the whole list of [features and improvements available inTypScript 3.9 RC](https://devblogs.microsoft.com/typescript/announcing-typescript-3-9-rc/). \\r\\n","data":{"title":"What\'s new in TypeScript 3.9 RC","date":"2020-04-29T13:23:04.284Z","image":"ts_feat.png","author":"Tomek"},"path":"typescript-39-rc","images":{"autoimports.gif":{"width":600,"height":335,"webpPath":"autoimports.webp","optimizedPath":"autoimports.optimized.gif.png"},"autoimports.optimized.gif.png":{"width":600,"height":335,"webpPath":"autoimports.optimized.gif.webp","optimizedPath":"autoimports.optimized.gif.optimized.png"},"reduced_time.optimized.png":{"width":600,"height":252,"webpPath":"reduced_time.optimized.webp","optimizedPath":"reduced_time.optimized.optimized.png"},"reduced_time.png":{"width":1000,"height":420,"webpPath":"reduced_time.webp","optimizedPath":"reduced_time.optimized.png"},"ts_feat.optimized.png":{"width":600,"height":252,"webpPath":"ts_feat.optimized.webp","optimizedPath":"ts_feat.optimized.optimized.png"},"ts_feat.png":{"width":1000,"height":420,"webpPath":"ts_feat.webp","optimizedPath":"ts_feat.optimized.png"}}},{"content":"\\r\\nReact is one of the most popular web frameworks. Well, not exactly a framework but rather a frontend library but it\u2019s often described this way and usually being mentioned or compared to other frameworks.\\r\\n\\r\\nWhat\'s special about React is that it first introduced us the component-based architecture giving the direction for the web development industry. Seeing how well it was received, many other frameworks decided to adopt this approach as well.\\r\\n\\r\\nReact\'s modular nature created an ecosystem of UI libraries that is growing rapidly. You probably all know the most popular ones:\\r\\n\\r\\n- [Material UI](https://material-ui.com/),\\r\\n- [React Bootstrap](https://react-bootstrap.github.io/),\\r\\n- [Blueprint UI](https://blueprintjs.com/),\\r\\n- [Ant Design](https://ant.design/),\\r\\n\\r\\nbut there are plenty of smaller/less known libraries which are also awesome. Let\'s take a look at some of them! \\r\\n\\r\\n## Grommet\\r\\n\\r\\n[Grommet](https://v2.grommet.io/) is a React-based framework that allows you to tailor the component library to align with your product/company style. The accessibility & modularity provided by Grommet allows you even to control the way your components interact with each other. Along with a framework you get access to icons assets pack as well as some experimental features like *Grommet Designer* which allows you to build your components using a dedicated interface or *Grommet Themer* a useful tool to import your company style details into Grommet designer.\\r\\n\\r\\n[GitHub](https://github.com/grommet/grommet) | [Website](https://v2.grommet.io/)\\r\\n\\r\\n![Grommet](grommet.png)\\r\\n\\r\\n## Chakra UI\\r\\n\\r\\n[Chakra UI](https://chakra-ui.com/) is another simple and very accessible component library for React. Chakra UI strictly follows the standards, all components come with proper attributes and keyboard interactions out of the box giving all the building blocks you need to build your new awesome React app!\\r\\n\\r\\n[GitHub](https://github.com/chakra-ui/chakra-ui) | [Website](https://chakra-ui.com/)\\r\\n\\r\\n![Chakra UI](chakra.png)\\r\\n\\r\\n## Rebass\\r\\n\\r\\n[Rebass](https://rebassjs.org/) is a  very simple yet powerful UI components library featuring simple & quickly accessible mobile-first responsive styles with array-based syntax. Rebass contains only 18 essential, light-weight components based on the Styled System library. Easily customizable, capable of creating very powerful things, Rebass is being described as the \\"Bootstrap of React\\". Sounds promising right?\\r\\n\\r\\n[GitHub](https://github.com/rebassjs/rebass) | [Website](https://rebassjs.org)\\r\\n\\r\\n![Rebass](rebass.png)\\r\\n\\r\\n## Evergreen\\r\\n\\r\\n[Evergreen](https://evergreen.segment.com/) is a React UI Framework maintained by Segment for building beautiful web products. It contains a set of components working out of the box. Evergreen\'s components are built on top of a React UI Primitive which makes them highly flexible & comparable. If you are looking for a production-grade UI set for your projects Evergreen is a great choice!\\r\\n\\r\\n[GitHub](https://github.com/segmentio/evergreen) | [Website](https://evergreen.segment.com/)\\r\\n\\r\\n![Evergreen](evergreen.png)\\r\\n\\r\\n## React Suite\\r\\n\\r\\n[React Suite](https://github.com/rsuite/rsuite) is a suite of well-designed  React components. React SUite offers components designed attention to detail as well as a developer-friendly UI environment. React Suite is a set of ready-to-go libraries suiting even the most sophisticated enterprise product needs. \\r\\n\\r\\n[GitHub](https://github.com/rsuite/rsuite) | [Website](https://rsuitejs.com/en/)\\r\\n\\r\\n![React Suite](react-suite.png)\\r\\n","data":{"title":"5 React UI Libraries you need to check out in 2020","date":"2020-04-25T10:47:00.284Z","image":"react_feat.png","author":"Tomek"},"path":"react-ui-libraries-2020","images":{"chakra.optimized.png":{"width":600,"height":366,"webpPath":"chakra.optimized.webp","optimizedPath":"chakra.optimized.optimized.png"},"chakra.png":{"width":1280,"height":780,"webpPath":"chakra.webp","optimizedPath":"chakra.optimized.png"},"evergreen.optimized.png":{"width":600,"height":366,"webpPath":"evergreen.optimized.webp","optimizedPath":"evergreen.optimized.optimized.png"},"evergreen.png":{"width":1280,"height":780,"webpPath":"evergreen.webp","optimizedPath":"evergreen.optimized.png"},"grommet.optimized.png":{"width":600,"height":366,"webpPath":"grommet.optimized.webp","optimizedPath":"grommet.optimized.optimized.png"},"grommet.png":{"width":1280,"height":780,"webpPath":"grommet.webp","optimizedPath":"grommet.optimized.png"},"react-suite.optimized.png":{"width":600,"height":366,"webpPath":"react-suite.optimized.webp","optimizedPath":"react-suite.optimized.optimized.png"},"react-suite.png":{"width":1280,"height":780,"webpPath":"react-suite.webp","optimizedPath":"react-suite.optimized.png"},"react_feat.optimized.png":{"width":600,"height":252,"webpPath":"react_feat.optimized.webp","optimizedPath":"react_feat.optimized.optimized.png"},"react_feat.png":{"width":1000,"height":420,"webpPath":"react_feat.webp","optimizedPath":"react_feat.optimized.png"},"rebass.optimized.png":{"width":600,"height":366,"webpPath":"rebass.optimized.webp","optimizedPath":"rebass.optimized.optimized.png"},"rebass.png":{"width":1280,"height":780,"webpPath":"rebass.webp","optimizedPath":"rebass.optimized.png"}}},{"content":"\\r\\nIt\'s official, **Node.js v14** is live and it\'s packed with new awesome features. The highlights in this release include an upgrade of V8 and many other improvements. Let\'s see what has changed and what\'s new \\r\\n\\r\\n## What\'s new in Node.js v 14\\r\\n\\r\\nNode.js is a JavaScript runtime using an event-driven I/O model which makes it extremely efficient when it comes to making scalable network applications.\\r\\nNode.js offers a lot for developers and the latest version adds even more!\\r\\n\\r\\n### 1. V8 engine upgraded to version 8.1 \\r\\n\\r\\nThe new version of JavaScript engine bringing performance improvements as well as some new features like:\\r\\n\\r\\n- **Optional Chaining** - which allows accessing the value of a property located deep within a chain of connected objects without the need to expressly validate that each reference in the chain,\\r\\n- **Nullish Coalescing**  - a logical operator returning its right-hand side operand when its left-hand side operand is null/undefined (and otherwise returning its left-hand side operand),\\r\\n- **`Intl.DisplayNames`** - providing the consistency of language, region, and script display names translations,\\r\\n- **`Intl.DateTimeFormat`** - `calendar` and `numberingSystem` options enabled.\\r\\n\\r\\n### 2. Experimental Web Assembly System Interface\\r\\n\\r\\nThe 14.x release includes an experimental implementation of the Web Assembly System Interface (WASI) in order to provide better performance, cross-platform support, and could drastically simplify usage of native modules.\\r\\n\\r\\n![Node.js v14 was released](node_js.png)\\r\\n##### Credits: [undraw.co](https://undraw.co/)\\r\\n\\r\\n### 3. Experimental Async Local Storage API\\r\\n\\r\\nThe numerous attempts to manage context across Async Calls resulted in experimental Async Hooks API being introduced in earlier versions of Node.js. As Async Local Storage was a key use case of Async Hooks API, the 14.x release brings an [experimental Async Local storage API](https://nodejs.org/api/async_hooks.html#async_hooks_class_asynclocalstorage). \\r\\n\\r\\n### 4. Diagnostic Report goes Stable\\r\\n\\r\\nThe diagnostic report was originally released in v12 as an experimental feature. in v14 it\'s been promoted to a stable feature. It provides triggered/on-demand reports containing useful insights about issues occurring on production including but not limited to unexpected errors, crashes, memory leaks, extensive CPU usage etc.\\r\\n\\r\\n### 5. Hardening of the streams APIs\\r\\n\\r\\nLatest release contains numerous changes to Streams implementation aiming to improve consistency across the Streams APIs i.e.:\\r\\n- `http.OutgoingMessage` is similar to `stream.Writable` \\r\\n- `net.Socket` behaves exactly like `stream.Duplex`.\\r\\n- `autoDestroy` option is set \'true\' by default and makes stream always call `_destroy` after ending\\r\\n\\r\\n### 6. Removal of Experimental Modules Warning\\r\\n\\r\\nDespite the need to include the `experimental-modules` flag was removed in v13 running EcmaScript Modules in Node.js would still result in a warning `ExperimentalWarning: The ESM module loader is experimental`. This warning was removed in v14 but the ESM implementation still remains experimental so be cautious when using ESM in production environments.\\r\\n\\r\\n\\r\\nQuite a lot right? Node.js 14 will be the `Current` release for the next 6 months and then promoted to Long-term Support (LTS) in October 2020. This update looks really awesome and if you can\'t wait to get your hand on it [download Node.js version 14](https://nodejs.org/en/download/current/).\\r\\n","data":{"title":"What\'s new in Node.js v14","date":"2020-04-22T13:37:00.284Z","image":"node14_feat.png","author":"Tomek"},"path":"whats-new-in-nodejs-v14","images":{"node14_feat.optimized.png":{"width":600,"height":252,"webpPath":"node14_feat.optimized.webp","optimizedPath":"node14_feat.optimized.optimized.png"},"node14_feat.png":{"width":1000,"height":420,"webpPath":"node14_feat.webp","optimizedPath":"node14_feat.optimized.png"},"node_js.optimized.png":{"width":600,"height":266,"webpPath":"node_js.optimized.webp","optimizedPath":"node_js.optimized.optimized.png"},"node_js.png":{"width":814,"height":361,"webpPath":"node_js.webp","optimizedPath":"node_js.optimized.png"}}},{"content":"\\r\\n **[GraphQL Centaur](https://github.com/graphql-editor/graphql-centaur)** is a CLI tool with a goal to provide seamless experience creating GraphQL as a service. \\r\\n\\r\\nGraphQL Centaur generates Mongo/[Stucco-js](https://github.com/graphql-editor/stucco-js) database resolvers in TypeScript from any give GraphQL Schema.\\r\\n\\r\\nGenerate fully-functional basic resolvers with Centaur CLI, customize them the way that suits your project and enjoy your GraphQL based backend.\\r\\n\\r\\n## Installation\\r\\n\\r\\nIf you want to install GraphQL Centaur globally run:\\r\\n```\\r\\nnpm i -g graphql-centaur\\r\\n```\\r\\nto install it inside your backend repo performer:\\r\\n```\\r\\nnpm i graphql-centaur\\r\\n```\\r\\nthen use with `npx` or as a `package.json` script.\\r\\n\\r\\n\\r\\n|Database|Support|\\r\\n|--------|----------|\\r\\n|MongoDB|YES|\\r\\n|JavaScript|YES| \\r\\n|TypeScript|YES|\\r\\n|PostgreSQL|SOON|\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n## Resolver generation\\r\\n\\r\\nFirst time when you generate a resolver centaur will also generate needed libraries for collections, DB, Utils and [graphql-zeus](https://github.com/graphql-editor/graphql-zeus) definitions, then given the following schema:\\r\\n\\r\\n```tsx\\r\\ntype Person{\\r\\n    firstName: String!\\r\\n}\\r\\ntype Query{\\r\\n    people: [Person]!\\r\\n}\\r\\nschema{\\r\\n    query: Query\\r\\n}\\r\\n```\\r\\n\\r\\nafter choosing the following elements:\\r\\n\\r\\n- `Query`\\r\\n- `people`\\r\\n- `CRUD`\\r\\n- `listFilter`\\r\\n\\r\\nGraphQL Centaur should generate TypeScript resolver placed in `$src/Query/people.ts` directory:\\r\\n\\r\\n```tsx\\r\\nimport { FieldResolveInput, FieldResolveOutput } from \\"stucco-js\\";\\r\\nimport { PersonCollection } from \\"../db/collections\\";\\r\\nimport { DB } from \\"../db/mongo\\";\\r\\nimport { Utils } from \\"../Utils\\";\\r\\nimport { Person, ResolverType, ValueTypes } from \\"../graphql-zeus\\";\\r\\n\\r\\nexport const handler = async (): Promise<FieldResolveOutput> => {\\r\\n    const db = await DB();\\r\\n    const col = await db.collection(PersonCollection);\\r\\n    return Utils.CursorToGraphQLArray<Person>(\\r\\n        await col.find({}),\\r\\n    );\\r\\n};\\r\\n```\\r\\n\\r\\nand append correct entries to the [`stucco.json`](https://github.com/graphql-editor/stucco-js) file:\\r\\n\\r\\n```tsx\\r\\n{\\r\\n    \\"resolvers\\":{\\r\\n        \\"Query.people\\":{\\r\\n            \\"resolve\\":{\\r\\n                \\"name\\":\\"lib/Query/people\\"\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nAfter running **[Stucco-js](https://github.com/graphql-editor/stucco-js)**, your resolver should work out of the box. Of course, some resolver types, however, might need a little bit of custom code to make them work the way you want, but basically **you have just generated your GraphQL Backend!**\\r\\n\\r\\n## Available Resolvers\\r\\n\\r\\nResolvers are split into the following categories:\\r\\n\\r\\n|Category|Resolver|Desc|\\r\\n|--------|----------|----------|\\r\\n|**CRUD**|*Create*|Create an object in your database and return it|\\r\\n|**CRUD**|*Update*|Update an object in your database and return it|\\r\\n|**CRUD**|*List*|List all objects of selected type|\\r\\n|**CRUD**|*Get* by parameter|Get object by parameter from the database|\\r\\n|**CRUD**|*Remove*|Remove an object from the database and return true|\\r\\n|**COMMON**|*Pipe*|Pipe the arguments of the query as the source for the next resolver|\\r\\n|**COMMON**|*Resolver*|Simple Resolver you need to write|\\r\\n|**COMMON**|*Rest*|Rest proxy resolvers for pointing to existing REST APIs|\\r\\n|**COMMON**|*Source*|A Resolver that receives source from the parent resolver|\\r\\n|**COMMON**|*SourcedCRUD*|The same as CRUD, but also use source|\\r\\n\\r\\nGraphQL Centaur is also compatible with [GraphQL Editor projects](https://graphqleditor.com/).\\r\\n","data":{"title":"Generate GraphQL resolvers easily with GraphQL Centaur CLI","date":"2020-04-21T15:10:00.284Z","image":"cent_logo_b.png","author":"Tomek"},"path":"graphql-centaur-cli","images":{"cent_logo_b.optimized.png":{"width":600,"height":252,"webpPath":"cent_logo_b.optimized.webp","optimizedPath":"cent_logo_b.optimized.optimized.png"},"cent_logo_b.png":{"width":1000,"height":420,"webpPath":"cent_logo_b.webp","optimizedPath":"cent_logo_b.optimized.png"}}},{"content":"\\r\\n<sub> *A guest blog post for [GraphQL Editor blog]\\r\\n(https://blog.graphqleditor.com/) by Kuba Kami\u0144ski from [InfoTech](https://technikum.infotech.edu.pl/)* </sub>\\r\\n\\r\\nWe are living in a world in which technology changes every day. The web pages older than 3 years for us it is something old and out of date. It\'s not surprising that web pages should be upgraded every day to become more user-friendly, efficient, aesthetic and secure. Abilities that give us these possibilities are accessible by modern web technologies.  It\u2019s important for web programmers who want to stay at the top of their game and for newcomers looking for their first job. Today we will be looking at the most wanted of them in 2020. So the web programming frameworks are divided into three groups: frontend, backend & data layer.\\r\\n\\r\\n## FRONTEND LAYER\\r\\nAt the overlap called *frontend frameworks*, we can see the top 3 of the most used web languages. These are the most appreciated frontend frameworks by respondents:\\r\\n\\r\\n### React\\r\\n\\r\\n[React](https://reactjs.org/) is a JavaScript framework that provides an option to create a user interface. React was released on March 1, 2013. It is declarative to make a work painless to create interactive UIs. As we can observe the number of programmists that are using this language is increasing year by year. On the label, we can see the number of users that have tried React but would not use it again is quite small. React has a dominant position among frontend frameworks.\\r\\n\\r\\n![React](react.png)\\r\\n\\r\\n### Vue.JS\\r\\n\\r\\nVue.js is a progressive framework for building user interfaces. What changes Vue from others is designed from the ground up to be incrementally adoptable. The first release of vue.js was February 2014. The Vue.js wasn\'t quite popular since 2016. As we can see in 2017 people started the interest in this language. Still, this language is very low on usage in everyday tasks. The number of people that are using Vue is increasing, but the number of users willing to learn is lowering year by year.\\r\\n\\r\\n![Vue.js](vue.png)\\r\\n\\r\\n### Angular\\r\\nAngular is a cross-platform, fast and very performant frontend framework allowing you to quickly create UI views. Simple, yet powerful template syntax, high-performance, complex choreographies makes Angular a solid player among frontend frameworks with a pretty strong community using it on a daily basis.\\r\\n\\r\\n![Angular](angular.png)\\r\\n\\r\\n## BACKEND LAYER\\r\\nAt the tuck called \u201cback end frameworks\u201d under it, we got seven other tucks with the language but I will focus on the top 3. Upcoming languages are:\\r\\n\\r\\n### Express\\r\\n\\r\\n[Express](https://expressjs.com/) is a Node.js web application framework that provides a robust set of features for web and mobile applications. Express is a front-end framework that uses HTTP utility methods. The number of peoples that are using it on a daily basis is pretty high.\\r\\n\\r\\n![Express](express.png)\\r\\n\\r\\n### NEXT.js\\r\\n\\r\\n[Next.js](https://nextjs.org/) is a static site generator with a lot of useful features like customizable server, routing, plugins as well as complete control over Babel and Webpack.  Next.js is relatively and its popularity hasn\'t skyrocket yet but I am sure it will very soon.\\r\\n\\r\\n![Next.js](next.png)\\r\\n\\r\\n### Koa\\r\\n\\r\\n[Koa](https://koajs.com/) is a new web framework designed by the team behind Express, which aims to be a smaller, more expressive, and more robust foundation for web applications and APIs. The number of users that are using koa is still low but it\'s definitely a framework to follow.\\r\\n\\r\\n![Koa](koa.png)\\r\\n\\r\\n## DATA LAYER\\r\\n\\r\\nAt the tuck called data layer, we can see under it more overlaps with the names of the programming languages to work on data layer:\\r\\n\\r\\n### Redux\\r\\n\\r\\n[Redux](https://redux.js.org/) is a data layer programing language that works as a javascript apps container. It\u2019s centralizing all your apps to let you undo/redo state persistence. Redux lets you easily change things. The percents of users using Redux is increasing rapidly. In the two last years, the percentage of people that never heard of it didn\u2019t increase enough.\\r\\n  \\r\\n![Redux](redux.png)\\r\\n\\r\\n### GraphQL\\r\\n\\r\\n[GraphQL](https://graphql.org/) is an amazing opportunity to maximize your efficiency on your web page. GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. GraphQL was getting his fame in 2017 when the number of users that didn\u2019t know this language downgrade by almost half. The number of voters that want to learn it was highering in the years 2017-2018 but in 2019 the percent lowered and the percent of the users that are using it on a daily basis was bigger. \\r\\n\\r\\n![GraphQL](graphql.png)\\r\\n","data":{"title":"Most wanted web technologies of 2020","date":"2020-04-20T11:17:00.284Z","image":"feat2020.png","author":"Infotech"},"path":"web-technologies-of-2020","images":{"angular.optimized.png":{"width":600,"height":173,"webpPath":"angular.optimized.webp","optimizedPath":"angular.optimized.optimized.png"},"angular.png":{"width":1627,"height":469,"webpPath":"angular.webp","optimizedPath":"angular.optimized.png"},"apollo.optimized.png":{"width":600,"height":178,"webpPath":"apollo.optimized.webp","optimizedPath":"apollo.optimized.optimized.png"},"apollo.png":{"width":1623,"height":482,"webpPath":"apollo.webp","optimizedPath":"apollo.optimized.png"},"express.optimized.png":{"width":600,"height":173,"webpPath":"express.optimized.webp","optimizedPath":"express.optimized.optimized.png"},"express.png":{"width":1627,"height":468,"webpPath":"express.webp","optimizedPath":"express.optimized.png"},"feat2020.optimized.png":{"width":600,"height":252,"webpPath":"feat2020.optimized.webp","optimizedPath":"feat2020.optimized.optimized.png"},"feat2020.png":{"width":1000,"height":420,"webpPath":"feat2020.webp","optimizedPath":"feat2020.optimized.png"},"graphql.optimized.png":{"width":600,"height":178,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":1625,"height":481,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"koa.optimized.png":{"width":600,"height":175,"webpPath":"koa.optimized.webp","optimizedPath":"koa.optimized.optimized.png"},"koa.png":{"width":1621,"height":474,"webpPath":"koa.webp","optimizedPath":"koa.optimized.png"},"next.optimized.png":{"width":600,"height":175,"webpPath":"next.optimized.webp","optimizedPath":"next.optimized.optimized.png"},"next.png":{"width":1625,"height":475,"webpPath":"next.webp","optimizedPath":"next.optimized.png"},"react.optimized.png":{"width":600,"height":173,"webpPath":"react.optimized.webp","optimizedPath":"react.optimized.optimized.png"},"react.png":{"width":1624,"height":469,"webpPath":"react.webp","optimizedPath":"react.optimized.png"},"redux.optimized.png":{"width":600,"height":175,"webpPath":"redux.optimized.webp","optimizedPath":"redux.optimized.optimized.png"},"redux.png":{"width":1626,"height":475,"webpPath":"redux.webp","optimizedPath":"redux.optimized.png"},"vue.optimized.png":{"width":600,"height":172,"webpPath":"vue.optimized.webp","optimizedPath":"vue.optimized.optimized.png"},"vue.png":{"width":1627,"height":467,"webpPath":"vue.webp","optimizedPath":"vue.optimized.png"}}},{"content":"\\r\\nAs GraphQL\'s premise was well-received by the dev community a new ecosystem of GraphQL-facilitating tools is growing rapidly. Libraries, editors, generators are showing up regularly having one thing in common, to make GraphQL adoption an easy-ride. GraphQLize is one of them. \\r\\n\\r\\n## What is GraphQLize?\\r\\n\\r\\n**GraphQLize** is an open-source library JVM library written in Clojure with Java interoperability, aiming to simplify the process of exposing GraphQL APIs over relational databases like **PostgreSQL or MySQL**. How does it work? GraphQLize is generating the GraphQL schema & queries resolvers using JDBC metadata. So basically GraphQLize will help provides **fully-featured GraphQL implementation with just a few lines of code**.\\r\\n\\r\\n## Getting started \\r\\n\\r\\nGraphQLize currently supports:\\r\\n- Postgres 9.4+\\r\\n- MySQL 8.0+\\r\\n\\r\\nGetting started is quite simple. In general, you will need to:\\r\\n\\r\\n1. Add the GraphQLize dependency to your project.\\r\\n2. Initialize GraphQLize Resolver providing the Java SQL data-source.\\r\\n3. Add a GraphQL API endpoint and use the GraphQlize resolver\\r\\n\\r\\nThe actual implementation of these steps will vary based on which language and framework you are using. Right now GraphQLize works with:\\r\\n- Java,\\r\\n- Kotlin,\\r\\n- Scala,\\r\\n- Clojure.\\r\\n\\r\\nThe detailed implementation guide is available in [GraphQLize official documentation](https://www.graphqlize.org/docs/graphqlize/intro).\\r\\n\\r\\n## How it works\\r\\n\\r\\n### Types & fields\\r\\n\\r\\n**GraphQLize uses JDBC metadata to generate GraphQL types & queries**. It takes your database and for every table & view, it generates a GraphQL type. The `field` names of a generated GraphQL `type` represent the column names of the corresponding database table or view. GraphQLize generates the field name by converting the column name to its camelCase version. Standard GraphQL scalar types, as well as some custom scalar types, are supported.\\r\\n\\r\\n![Generate GraphQL API from PostgreSQL database](postgresql.png)\\r\\n![Generate GraphQL API from MySQL databases](mysql.png)\\r\\n\\r\\n###### Source: [graphqlize.org/docs](https://www.graphqlize.org/docs/graphql_schema/types-and-fields)\\r\\n\\r\\n### Supported relationships\\r\\n\\r\\nGraphQLize successfully identifies the relationships between tables in our database & use them to generate GraphQL schema containing appropriate fields.\\r\\n\\r\\n![One to one relation](one-one.png)\\r\\n![One to many relation](one-many.png)\\r\\n![Many to many relation](many-many.png)\\r\\n\\r\\n###### Source: [graphqlize.org/docs](https://www.graphqlize.org/docs/graphql_schema/relationships)\\r\\n\\r\\n## On its way to being production-ready\\r\\n\\r\\nGraphQLize is in its alpha stage aiming to gather as much feedback from the communities as possible. GraphQLize codebase & API are not stable yet and there might be some breaking changes coming. GraphQLize team claims it will be production-ready in a few months so stay tuned!\\r\\n","data":{"title":"GraphQLize - generate GraphQL API from PostgreSQL/MySQL databases","date":"2020-04-16T13:37:00.284Z","image":"graphqlize_feat.png","author":"Tomek"},"path":"graphqlize-instant-graphql-api-from-postgresql-mysql","images":{"graphqlize_feat.optimized.png":{"width":600,"height":252,"webpPath":"graphqlize_feat.optimized.webp","optimizedPath":"graphqlize_feat.optimized.optimized.png"},"graphqlize_feat.png":{"width":1000,"height":420,"webpPath":"graphqlize_feat.webp","optimizedPath":"graphqlize_feat.optimized.png"},"many-many.optimized.png":{"width":600,"height":280,"webpPath":"many-many.optimized.webp","optimizedPath":"many-many.optimized.optimized.png"},"many-many.png":{"width":1038,"height":485,"webpPath":"many-many.webp","optimizedPath":"many-many.optimized.png"},"mysql.optimized.png":{"width":600,"height":149,"webpPath":"mysql.optimized.webp","optimizedPath":"mysql.optimized.optimized.png"},"mysql.png":{"width":1036,"height":257,"webpPath":"mysql.webp","optimizedPath":"mysql.optimized.png"},"one-many.optimized.png":{"width":600,"height":207,"webpPath":"one-many.optimized.webp","optimizedPath":"one-many.optimized.optimized.png"},"one-many.png":{"width":1038,"height":358,"webpPath":"one-many.webp","optimizedPath":"one-many.optimized.png"},"one-one.optimized.png":{"width":600,"height":217,"webpPath":"one-one.optimized.webp","optimizedPath":"one-one.optimized.optimized.png"},"one-one.png":{"width":1033,"height":374,"webpPath":"one-one.webp","optimizedPath":"one-one.optimized.png"},"postgresql.optimized.png":{"width":600,"height":149,"webpPath":"postgresql.optimized.webp","optimizedPath":"postgresql.optimized.optimized.png"},"postgresql.png":{"width":1036,"height":257,"webpPath":"postgresql.webp","optimizedPath":"postgresql.optimized.png"}}},{"content":"\\r\\n\\r\\nIf you\u2019ve ever struggled to find vulnerabilities in your GraphQL code, this tool should be able to help. **InQL Scanner**, developed by [Doyensec](https://www.doyensec.com/) Research Island initially for their internal use, is now free to use and [available on GitHub](https://github.com/doyensec/inql). InQL Scanner is a stand-alone security tool, but its use can broaden by using it as a Burp Suite extension. It enables you to quickly extract and inspect metadata information. You can then more easily identify security issues which due to the descriptive nature of GraphQL would be otherwise hard to detect.\\r\\n\\r\\n## What does it do?\\r\\n\\r\\nUsing InQL command from Python will result in issuing an Introspection query for **queries**, **mutations**, and **subscriptions**, as well as their respective fields and arguments. Optional arguments include targeting Remote GraphQL Endpoints, accessing API Authentication Key, replacing known GraphQL argument types with placeholder values, and generating documentation. The results can be generated in HTML or JSON schema formats.\\r\\n\\r\\n![Secure your GraphQL code](secure-graphql.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Burp Suite Extension\\r\\n\\r\\nAs Doyensec is considering integrating InQL with [Burp\u2019s BApp Store](https://portswigger.net/bappstore), it is good to have a closer look at the functionality of the extension. According to the creators of the scanner, it enables you to:\\r\\n- Search for known GraphQL URL paths; the tool will grep and match known values to detect GraphQL endpoints within the target website,\\r\\n- Search for exposed GraphQL development consoles (GraphiQL, GraphQL Playground, and other common utilities),\\r\\n- Use a custom GraphQL tab displayed on each HTTP request/response containing GraphQL,\\r\\n- Leverage the template generation by sending those requests to Burp\u2019s Repeater tool,\\r\\n- Configure the tool by using a custom settings tab,\\r\\n\\r\\nwhile maintaining the basic functionality of the tool described in the last paragraph. Instructions on how to use the tool, examples of documentation pages, and templates generation are available on [InQL GitHub page](https://github.com/doyensec/inql).\\r\\n\\r\\n## Are there any downsides?\\r\\n\\r\\nInQL is definitely worth trying out and running your code through it. InQL Scanner itself is a handy tool, however, its functionality seems to be limited in the stand-alone version. Using it as a Burp Suite extension significantly increases the scope of the tool\u2019s functionality. And if you\u2019re not satisfied with Burp\u2019s essential manual tools, acquiring an extended license will cost you ~ \u20ac349 per user, per year. As GraphQL is rapidly growing in popularity, we should expect that there will be more and more people taking advantage of its limitations. Securing your code may be a good investment now before the frequency and severity of the attacks against it increases.\\r\\n","data":{"title":"InQL Scanner - find security flaws in your GraphQL code","date":"2020-04-10T13:37:00.284Z","image":"inql-feature.png","author":"Jakub"},"path":"inql-graphql-security-scanner","images":{"inql-feature.optimized.png":{"width":600,"height":252,"webpPath":"inql-feature.optimized.webp","optimizedPath":"inql-feature.optimized.optimized.png"},"inql-feature.png":{"width":1000,"height":420,"webpPath":"inql-feature.webp","optimizedPath":"inql-feature.optimized.png"},"secure-graphql.optimized.png":{"width":600,"height":252,"webpPath":"secure-graphql.optimized.webp","optimizedPath":"secure-graphql.optimized.optimized.png"},"secure-graphql.png":{"width":1000,"height":420,"webpPath":"secure-graphql.webp","optimizedPath":"secure-graphql.optimized.png"}}},{"content":"\\r\\n<sub> *A guest blog post for [GraphQL Editor blog]\\r\\n(https://blog.graphqleditor.com/) by Marcin, Adam & Norbert from [InfoTech](https://technikum.infotech.edu.pl/)* </sub>\\r\\n\\r\\n---\\r\\nAwaited by everyone, the ninth version of Angular carries with it a lot of news and features. Primarily, Ivy became official compiler and functionalities brought into it, significantly improved performance and also streamline the process of debugging, testing and building web applications. In addition, changes were made to the entire framework. \\r\\n\\r\\n## Project Ivy has arrived\\r\\n\\r\\n[Angular](https://angular.io/) is one of the best open-source frameworks that allows building web apps. Developed by Google, it has evolved over the years into versatile framework development, having all the necessary tools and resources to create web applications. \\r\\n\\r\\nThe biggest change introduced in Angular 9 is the replacement of the existing ViewEngine (VE) compiler with the [Ivy compiler](https://angular.io/guide/ivy). In short, it is a tool that will be crucial for the further development of Angular and that has allowed eliminating several errors with large bundles and application performance resulting in a significant performance jump.\\r\\n\\r\\n![Angular is one of the major JavaScript frameworks](frameworks.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\nIn Angular 8 to activate Ivy you had to add the following lines in the tsconfig.json file:\\r\\n\\r\\n```\\r\\n\\"angularCompilerOptions\\": {  \\r\\n  \\"enableIvy\\": true  \\r\\n}\\r\\n```\\r\\n\\r\\nIn Angular 9 as Ivy became the default compiler this is no longer necessary. Ivy is radically different from anything we have seen in mainstream frameworks because it uses incremental DOM, and it upgraded since 8th versions and offers numerous advantages as:\\r\\n\\r\\n- Improved building,\\r\\n- Easier debugging,\\r\\n- Faster testing,\\r\\n- TypeScript 3.7 support,\\r\\n- Improved type checking,\\r\\n- IDE & language service improvements.\\r\\n\\r\\nand our personal favorite which is ...\\r\\n\\r\\n## Improved bundle size\\r\\n\\r\\nIvy is reducing the size of JavaScript packages which is a great improvement for programmers trying to speed up their applications. Smartphones and other similar mobile devices make up about half of the websites\' traffic worldwide. A large proportion of these mobile devices gain access to websites from locations with slow internet connections. Sadly this is still a major issue that needs to be considered while building an app. Rebuilding existing API to reduce the number of resources they need to download and increase application performance for mobile users could turn out to be quite costly and can pose an unexpected risk to their projects. Of course, there is always a [GraphQL](https://graphqleditor.com/) but since you need to convince your team first it takes time. Taking all that improved bundle size feature turns out really useful! If you would like to check in detail what has changed make sure to visit angular\'s [official blog about the Angular 9 update](https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3).\\r\\n\\r\\n![Ivy offers improved bundle size](ivy_size.png)\\r\\n\\r\\n##### Source: [angular.io](https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3)\\r\\n\\r\\n## Update today\\r\\n\\r\\nIt\u2019s the biggest actualization for about three years, so do not feel overwhelmed. \\r\\nIf you haven\u2019t updated your projects yet, [update.angular.io](https://update.angular.io/) might come in handy! Certainly, working on a refreshed framework will be much more pleasant from now on. The mass of changes inevitably also heralds a lot of problems, but certainly, the next updates bring necessary corrections and patches. We wish you fruitful work! \\r\\n\\r\\n","data":{"title":"What\u2019s new in Angular 9?","date":"2020-04-09T11:17:00.284Z","image":"angular.png","author":"Infotech"},"path":"new-angular-9","images":{"angular.optimized.png":{"width":600,"height":247,"webpPath":"angular.optimized.webp","optimizedPath":"angular.optimized.optimized.png"},"angular.png":{"width":1229,"height":505,"webpPath":"angular.webp","optimizedPath":"angular.optimized.png"},"frameworks.optimized.png":{"width":600,"height":260,"webpPath":"frameworks.optimized.webp","optimizedPath":"frameworks.optimized.optimized.png"},"frameworks.png":{"width":1500,"height":650,"webpPath":"frameworks.webp","optimizedPath":"frameworks.optimized.png"},"ivy_size.optimized.png":{"width":600,"height":338,"webpPath":"ivy_size.optimized.webp","optimizedPath":"ivy_size.optimized.optimized.png"},"ivy_size.png":{"width":1393,"height":785,"webpPath":"ivy_size.webp","optimizedPath":"ivy_size.optimized.png"}}},{"content":"\\r\\n\\r\\nGraphQL was publicly released in 2015. Following this, a new ecosystem began to shape around it as it\'s premise was well-received by the dev community. GraphQL is basically a **query-language for your API** which is language & database-agnostic. A GraphQL query is a string sent to the runtime that returns JSON to the client. This simple idea began the creation of a wide set of open-source libraries, tools, clients etc., aiming to make using GraphQL an effortless experience.\\r\\n\\r\\n**GraphQL popularity is constantly rising**. As the number of companies incorporating GraphQL is growing, the awesome tools supporting GraphQL are being developed daily. gqless is one of them!\\r\\n\\r\\n![GQLess invisible queries](gqless.gif)\\r\\n\\r\\n\\r\\n# How does it work?\\r\\n\\r\\n**[gqless](https://gqless.dev/)** is an awesome GraphQL client built by Sam Denty. It\'s allowing you to wrap components in `graphql()` which makes gqless perform an additional render of your entire application with all the available GraphQL objects, but without the data i.e.:\\r\\n\\r\\n- Arrays will have a length of 1\\r\\n- Scalars will return null\\r\\n\\r\\nAfter this is done the gqless will generate queries & fetch data to re-render the whole app with the newly available data as a final outcome.\\r\\n\\r\\ngqless is a new & very interesting approach to a GraphQL client offering:\\r\\n\\r\\n- **Invisible data fetching** - runtime generated queries with JS getters\\r\\n- **Strongly typed** - built-in TypeScript support \\r\\n- **Production-ready features** - it offers built-in cache,e extensions and more\\r\\n\\r\\n![gqless example](code.png)\\r\\n\\r\\n##### Source: [gqless.dev](https://gqless.dev/)\\r\\n\\r\\nTry gqless and find out how enjoyable & easy it is to use GraphQL with auto-generated queries offered by gqless.\\r\\n\\r\\n```\\r\\nyarn add gqless\\r\\nyarn add @gqless/cli -D\\r\\n\\r\\n# or\\r\\nnpm install gqless\\r\\nnpm install @gqless/cli --save-dev\\r\\n```\\r\\n\\r\\nHave fun!\\r\\n","data":{"title":"GQLess - a GraphQL client without queries","date":"2020-04-06T13:37:00.284Z","image":"gqless_feat.png","author":"Tomek"},"path":"gqless-new-graphql-client","images":{"code.optimized.png":{"width":600,"height":345,"webpPath":"code.optimized.webp","optimizedPath":"code.optimized.optimized.png"},"code.png":{"width":910,"height":524,"webpPath":"code.webp","optimizedPath":"code.optimized.png"},"gqless.gif":{"width":600,"height":172,"webpPath":"gqless.webp","optimizedPath":"gqless.optimized.gif.png"},"gqless.optimized.gif.png":{"width":600,"height":172,"webpPath":"gqless.optimized.gif.webp","optimizedPath":"gqless.optimized.gif.optimized.png"},"gqless_feat.optimized.png":{"width":600,"height":252,"webpPath":"gqless_feat.optimized.webp","optimizedPath":"gqless_feat.optimized.optimized.png"},"gqless_feat.png":{"width":1000,"height":420,"webpPath":"gqless_feat.webp","optimizedPath":"gqless_feat.optimized.png"}}},{"content":"\\r\\nThe Guild is an open-source group focused on enabling developers to maximize the benefits offered by GraphQL. [The Guild](https://github.com/the-guild-org/Stack) stands behind such notable GraphQL libraries as:\\r\\n\\r\\n- GraphQL Code Generator\\r\\n- GraphQL Inspector\\r\\n- GraphQL-CLI\\r\\n\\r\\nand other useful packages. A couple of days ago the Guild revealed their latest project - **[GraphQL Mesh](https://github.com/Urigo/graphql-mesh)**.\\r\\n\\r\\n\\r\\n## GraphQL Mesh\\r\\n\\r\\nI believe this library may solve one of the most important issues standing in the way of global GraphQL adoption which is a fear of the unknown. The reason many developers haven\'t decided to try GraphQL is some uncertainty about the possible implementation issues that might arise during the transition process, with GraphQL Mesh you can easily use GraphQL specification with legacy API services!\\r\\n\\r\\n![GraphQL Mesh](gql_m.png)\\r\\n##### Source: [Medium/The-Guild](https://medium.com/the-guild/graphql-mesh-query-anything-run-anywhere-433c173863b5)\\r\\n\\r\\n\\r\\n## How it works\\r\\n\\r\\n**GraphQL Mesh** is an open-source library with a goal to provide developers access to services using other API specifications like **openapi/Swagger, json-schema, SOAP, gRPC, SQL, Mongoose, GraphQL, Federated GraphQL, queue systems, SQL** with GraphQL queries, mutations & subscriptions without changing the source service.\\r\\n\\r\\nIn short GraphQL Mesh takes your existing services\u2019 APIs specification and tries wrapping it with a GraphQL layer. But it doesn\'t stop here. GraphQL Mesh allows you to easily extend or modify your new schema, providing a fully-typed GraphQL SDK. This makes working with your new schema a lot easier as you are sure on any step that you are using the right object structure.\\r\\n\\r\\n\\r\\n## Local schema vs Gateway\\r\\n\\r\\nThe output of GraphQL Mesh is a generated code that you can use both ways as:\\r\\n\\r\\n- **Local Schema** - import it from the autogenerated directory and use GraphQL execute to run queries and mutations locally in your application putting GraphQL engine in charge of fetching & running data from your source API.\\r\\n\\r\\n- **Gateway** - use your new schema as a shared gateway for multiple applications and run it on your own server which would be responsible for all schema operations.\\r\\n\\r\\nWhatever you prefer to make sure to check a [detailed description of how it works & usage examples](https://medium.com/the-guild/graphql-mesh-query-anything-run-anywhere-433c173863b5) provided by the Guild & keep in mind that GraphQL Mesh is in still its early stage so there might some breaking changes coming.\\r\\n\\r\\nGuild members have been using GraphQL Mesh for a while internally for their customers and they claim it has been a huge upgrade. If anything was holding you back from trying GraphQL now you have lost your excuse! Try GraphQL Mesh today :)\\r\\n","data":{"title":"GraphQL Mesh","date":"2020-03-27T10:01:00.284Z","image":"feat_m.png","author":"Tomek"},"path":"the-graphql-mesh","images":{"feat_m.optimized.png":{"width":600,"height":252,"webpPath":"feat_m.optimized.webp","optimizedPath":"feat_m.optimized.optimized.png"},"feat_m.png":{"width":1000,"height":420,"webpPath":"feat_m.webp","optimizedPath":"feat_m.optimized.png"},"gql_m.optimized.png":{"width":600,"height":403,"webpPath":"gql_m.optimized.webp","optimizedPath":"gql_m.optimized.optimized.png"},"gql_m.png":{"width":2172,"height":1460,"webpPath":"gql_m.webp","optimizedPath":"gql_m.optimized.png"}}},{"content":"\\r\\nNode.js is the most popular choice when building the backend for your app, no matter if you prefer a traditional REST API or using it to build something modern like the GraphQL server.\\r\\n\\r\\n\\r\\n## Node.js\\r\\n\\r\\nNode.js is a JavaScript runtime using an event-driven I/O model which makes it extremely efficient when it comes to making scalable network applications. It\'s cross-platform, so whether you are building a mobile app, web app or IoT, Node will do the job. It\'s light, it\'s scalable & it delivers! Whether you are building a side project or working on an enterprise app Node.js will fit your needs.\\r\\n\\r\\n![NodeJS work with any technology](node.png)\\r\\n\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Best practices\\r\\n\\r\\nNode.js offers a lot, but to bring to the best you need to know and follow its best practices. If you are wondering where to find them the awesome open-source community is here to help!\\r\\n\\r\\nThis repo is **[the largest compilation of best Node.js content](https://github.com/goldbergyoni/nodebestpractices)** available online. It contains:\\r\\n\\r\\n- more than 80 best practices,\\r\\n- useful style guides\\r\\n- architectural patterns\\r\\n\\r\\nAs it\'s maintained by the community the \\"Node.JS Best Practices\\" is growing rapidly and new pull requests with fresh Node.js content are being created on a daily basis.\\r\\n\\r\\n\\r\\nBest practices are divided into 7 groups of which each of them contains numerous good practices gathered from the community:\\r\\n\\r\\n1. Project structure \\r\\n2. Error handling \\r\\n3. Code style\\r\\n4. Testing & Quality\\r\\n5. Going to production\\r\\n6. Security\\r\\n7. Performance\\r\\n\\r\\nEach good practice contains a TL;DR summary as well well as a link to extended content including:\\r\\n- detailed information\\r\\n- code examples\\r\\n- important quotes from different sources\\r\\n\\r\\nAwesome, right? Rember to show the repo maintainers some love and leave them a star or contribute if you have some useful Node.js tips!\\r\\n","data":{"title":"Node.js best practices","date":"2020-03-24T11:17:00.284Z","image":"feat_node.png","author":"Tomek"},"path":"nodejs-best-practices","images":{"feat_node.optimized.png":{"width":600,"height":252,"webpPath":"feat_node.optimized.webp","optimizedPath":"feat_node.optimized.optimized.png"},"feat_node.png":{"width":1000,"height":420,"webpPath":"feat_node.webp","optimizedPath":"feat_node.optimized.png"},"node.optimized.png":{"width":600,"height":252,"webpPath":"node.optimized.webp","optimizedPath":"node.optimized.optimized.png"},"node.png":{"width":1000,"height":420,"webpPath":"node.webp","optimizedPath":"node.optimized.png"}}},{"content":"\\r\\nYesterday **Nat Friedman the CEO of GitHub** announced that they have signed an agreement to acquire npm.\\r\\n\\r\\n[npm](https://www.npmjs.com/) is the world\u2019s biggest software registry. The npm team maintains many software development tools and is a critical part of the [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript) ecosystem. Thanks to the contributions of the open-source fans from the whole world npm stats look impressive, with: \\r\\n\\r\\n- over **1.3 million packages** hosted\\r\\n- more than **75 billion downloads a month**\\r\\n\\r\\nnpm is definitely an interesting acquisition target for a tech giant like Microsoft, who has recently acquired the GitHub Inc. GitHub declared that their goal is to help npm continue to expand to meet the growing needs of the JavaScript community. \\r\\n\\r\\n![GitHub acquired npm ](github_npm_dev.png)\\r\\n\\r\\n## Is it a good or bad thing?\\r\\n\\r\\nIt\'s really difficult to assess. The web communities are full of mixed opinions. Some of the users are feeling enthusiastic about the acquisition, showing as an example that GitHub is doing really great since being acquired by Microsoft or that the npm company is in a mess and this acquisition could possibly put the back on the right track by having such organization as GitHub as a partner. \\r\\n\\r\\nOn the other hand, are people that think that this could be harmful to the software ecosystem as the acquisition means that some of the core elements of the NODE ecosystem being own by such giants as Microsoft could be a threat, which seems to worry an open-source community:\\r\\n\\r\\n![Donald Stufft\'s tweet about PyPi package](pypi.png)\\r\\n##### Source: [@dstufft](https://twitter.com/dstufft)\\r\\n\\r\\n\\r\\nIs it a good or bad thing? Should we be worried or excited? What are your thoughts?\\r\\n","data":{"title":"GitHub acquired npm","date":"2020-03-17T13:37:00.284Z","image":"github_npm.png","author":"Tomek"},"path":"github-npm","images":{"github_npm.optimized.png":{"width":600,"height":251,"webpPath":"github_npm.optimized.webp","optimizedPath":"github_npm.optimized.optimized.png"},"github_npm.png":{"width":1004,"height":420,"webpPath":"github_npm.webp","optimizedPath":"github_npm.optimized.png"},"github_npm_dev.optimized.png":{"width":600,"height":334,"webpPath":"github_npm_dev.optimized.webp","optimizedPath":"github_npm_dev.optimized.optimized.png"},"github_npm_dev.png":{"width":1281,"height":714,"webpPath":"github_npm_dev.webp","optimizedPath":"github_npm_dev.optimized.png"},"pypi.optimized.png":{"width":600,"height":171,"webpPath":"pypi.optimized.webp","optimizedPath":"pypi.optimized.optimized.png"},"pypi.png":{"width":784,"height":224,"webpPath":"pypi.webp","optimizedPath":"pypi.optimized.png"}}},{"content":"A couple of days ago the CEO and founders of [Sequoia Capital](https://www.sequoiacap.com/), one of the biggest VC standing behind such success stories as **Dropbox, LinkedIn or Stripe**, has openly published a letter they have sent to their partners providing guidance on protecting their business as well as dealing with consequences of the spreading effects of the coronavirus.\\r\\n\\r\\nSequoia businesses are present in many regions around the world so they are gaining first-hand information on the impact coronavirus has on global business and the challenges companies need to face as a result of the virus outbreak. So far the main problems global business needs to face are identified as follows:\\r\\n\\r\\n**General slow-down of any business activities**\\r\\nMany companies have experienced a significant slow down in their business growth, some of them will probably have problems meeting their planned goals for Q1-2020.\\r\\n![General slow-down of any business activities](global_slowdown.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n \\r\\n**Disruptions of the supply chain**\\r\\nChina is the world\'s largest supplier of ... many goods. The scale of an industry lockdown in China is huge and its seriously affecting the global supply chain. The modern software industry might not feel the slow-down as much as other sectors as it\'s not influenced by the supply chain distribution but is still exposed to the risk indirectly.\\r\\n\\r\\n**Business trips & meetings cancelations**\\r\\nThe no-travel policy has been applied to many companies. Some of them are banning all international travels, some just those non-essential for their businesses.\\r\\n\\r\\n![Business trips & meetings cancelations due to coronavirus](no_travel.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\nSequoia Capital team suggest questioning each assumption crucial to your business functioning especially those: **cash runway, fundraising, sales forecast, marketing spend, headcount, capital spending.** \\r\\n\\r\\nRemember that as with all crises, revenue and cash levels always fall much faster than expenses. Be prepared to respond to changing circumstances and remember that same as in nature the most adaptable to change will survive. IF you want to read the full letter sent out by the VC, it\'s available on [Sequoia Capital Publications on Medium](https://medium.com/sequoia-capital/coronavirus-the-black-swan-of-2020-7c72bdeb9753).\\r\\n\\r\\nBe vigilant, stay healthy & keep your business in good health!\\r\\n","data":{"title":"COVID-19 - what does it mean for the dev world","date":"2020-03-11T13:37:00.284Z","image":"covid.png","author":"Tomek"},"path":"coronavirus-consequences-for-business","images":{"covid.optimized.png":{"width":600,"height":252,"webpPath":"covid.optimized.webp","optimizedPath":"covid.optimized.optimized.png"},"covid.png":{"width":1000,"height":420,"webpPath":"covid.webp","optimizedPath":"covid.optimized.png"},"global_slowdown.optimized.png":{"width":600,"height":298,"webpPath":"global_slowdown.optimized.webp","optimizedPath":"global_slowdown.optimized.optimized.png"},"global_slowdown.png":{"width":1034,"height":514,"webpPath":"global_slowdown.webp","optimizedPath":"global_slowdown.optimized.png"},"no_travel.optimized.png":{"width":600,"height":273,"webpPath":"no_travel.optimized.webp","optimizedPath":"no_travel.optimized.optimized.png"},"no_travel.png":{"width":1314,"height":598,"webpPath":"no_travel.webp","optimizedPath":"no_travel.optimized.png"}}},{"content":"\\r\\n\\r\\nSince its public release in 2015, GraphQL has been on the rise both in popularity and widespread use. The addition of the data graph changed the development process forever, bringing together data and services in a comprehensive and secure way. An ever-growing number of companies have recognized its vast capabilities, with such entities as Shopify, Microsoft or Yelp adding GraphQL to their development stacks.\\r\\n\\r\\nGraphQL is alive and well, but how did it grow from a hermetic language used by very few to a widely recognized, almost indispensable tool? It wouldn\'t be here without quite a few success stories surrounding it.\\r\\n\\r\\nA perfect example would be a recent migration of Airbnb\'s API. It has been discussed at length by [Brie Bunge, one of their software engineers, at GraphQL summit](https://www.youtube.com/watch?v=pywcFELoU8E&feature=youtu.be), where she described the process in some detail. I wanted to take a look at some of the distinct advantages of using GraphQL in these operations in the hope that you, dear reader, might find a solution to one of your problems.\\r\\n\\r\\n![Migrating from REST to GraphQL](graphql_restapi.png)\\r\\n\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n\\r\\n## Better data access\\r\\n\\r\\nThe adoption of GraphQL for their API resulted in quicker access to data and a much more enjoyable interface. Thanks to the step-by-step approach to migration, with hardly any downtime during the whole process. Instead of trying to convert preexisting code at once or even rebuilding from the ground up, Airbnb opted for gradual changes. Consequently, this allowed for a smooth transition without the need to put any services on pause. \\r\\n\\r\\n\\r\\n## Over-fetching problem\\r\\n\\r\\nAnother improvement gained through switching over to [GraphQL](https://graphqleditor.com/) was the significant reduction in over-fetching. The data has been shaped in a way that doesn\u2019t allow for requesting any more than is needed in a particular instance. This severely reduces unnecessary costs that may have been incurred beforehand, something that must be considered when designing data architecture. \\r\\n\\r\\nAfter the whole conversion process was complete, the result was a dependable, streamlined and far-reaching tool. It is able to quickly and reliably access requested data by combining the strengths of its components while getting rid of needlessly complicated code. Furthermore, should the need arise, Airbnb\u2019s implementation of GraphQL is ready to be scaled within reason. According to [Adam Neary](https://medium.com/@AdamRNeary), another software engineer at the aforementioned company, other benefits [include](https://medium.com/airbnb-engineering/reconciling-graphql-and-thrift-at-airbnb-a97e8d290712): \\r\\n\\r\\n- a strongly typed API schema,\\r\\n- flexibility in field selection,\\r\\n- cross-platform client-side development\\r\\n\\r\\n... and many more.\\r\\n\\r\\nDespite the indisputable gains from using [GraphQL](https://graphqleditor.com/), this project is far from complete. There are numerous improvements that can be developed sooner or later.\\r\\n\\r\\nBy reshaping the schema into a more data-centric one, they hope to cut down on duplicate requests, further increasing the efficiency and speeding up the caching, which has been a major bottleneck up till then. \\r\\n\\r\\nThis is but one of many examples of GraphQL being a prime choice for data handling at a major company. Nearly a thousand businesses from various branches using this language for all their dealings with queries, showing just how flexible and efficient it is.\\r\\n","data":{"title":"The advantages of migrating to GraphQL","date":"2020-03-10T13:00:00.284Z","image":"feat_migr.png","author":"Carl"},"path":"advantages-of-migrating-to-graphql","images":{"feat_migr.optimized.png":{"width":600,"height":252,"webpPath":"feat_migr.optimized.webp","optimizedPath":"feat_migr.optimized.optimized.png"},"feat_migr.png":{"width":1000,"height":420,"webpPath":"feat_migr.webp","optimizedPath":"feat_migr.optimized.png"},"graphql_restapi.optimized.png":{"width":600,"height":476,"webpPath":"graphql_restapi.optimized.webp","optimizedPath":"graphql_restapi.optimized.optimized.png"},"graphql_restapi.png":{"width":1103,"height":875,"webpPath":"graphql_restapi.webp","optimizedPath":"graphql_restapi.optimized.png"}}},{"content":"\\r\\nAnother piece of great news for the GraphQL community surfaced last week. A San Francisco-based startup **Hasura Inc. announced a $9.9M Series A investment!**\\r\\n\\r\\nOriginally **Hasura** was a company aiming to help developers to simplify Kubernetes, but over time the team has realized that there was a much bigger problem they could address - data access. \\r\\n\\r\\nApplication developers need better access to data sitting in databases.  The Hasura team wants to solve that issue with the help of **GraphQL**, so they have pivoted into an open-source service that takes your databases & with a little bit of configuration allows you to deploy a production-ready GraphQL backend.\\r\\n\\r\\n![GraphQL with Hasura](hasura.gif)\\r\\n\\r\\n##### Source: [hasura.io](https://hasura.io/)\\r\\n\\r\\nHasura\'s software downloads count is soon going to hit a stunning **30 million**! Its open-source software is used by the thousands of development teams in the biggest wide variety of industries including aerospace and healthcare. \\r\\n\\r\\nThe new funding would let the company raise its headcount which currently oscillates around 40 employees. This would allow them to scale the number of supported database types as well as prepare for the launch of its new enterprise version which should appear on the market this year. As mentioned on **[Hasura\'s GraphQL blog](https://hasura.io/blog/hasura-2020-the-next-phase-of-our-journey/)** the biggest goals on their road map as for now are:\\r\\n\\r\\n- Serve the needs of their production & enterprise users on a level better than ever before\\r\\n- Deliver the GraphQL features that the Hasura community wants\\r\\n- Expand the Hasura experience to other databases \\r\\n- Invest in Hasura community\\r\\n\\r\\n---\\r\\n\\r\\n### Keep up doing a great job, congrats to Hasura team! :)\\r\\n\\r\\n---\\r\\n","data":{"title":"Hasura lands a $9.9M to simplify GraphQL development","date":"2020-03-03T13:37:00.284Z","image":"hasura_feat.png","author":"Tomek"},"path":"graphql-hasura","images":{"hasura.gif":{"width":960,"height":937,"webpPath":"hasura.webp","optimizedPath":"hasura.optimized.gif.png"},"hasura.optimized.gif.png":{"width":600,"height":586,"webpPath":"hasura.optimized.gif.webp","optimizedPath":"hasura.optimized.gif.optimized.png"},"hasura_feat.optimized.png":{"width":600,"height":252,"webpPath":"hasura_feat.optimized.webp","optimizedPath":"hasura_feat.optimized.optimized.png"},"hasura_feat.png":{"width":1000,"height":420,"webpPath":"hasura_feat.webp","optimizedPath":"hasura_feat.optimized.png"}}},{"content":"\\r\\n\\r\\nOne of the core notions of using [GraphQL](https://graphqleditor.com/) is a schema. It strictly defines the potential an API might have by forming a set of concepts and relations between them. Another crucial function of a schema is regulating how and by using which action data can be accessed.\\r\\n\\r\\nDesigning a schema is one of the first steps in the development process, casting a shadow over the following tasks. Due to how many areas are affected by a schema, later on, its architecture should be carefully planned. This, hopefully, leads to a naturally evolving, intuitive, and most importantly secure product.\\r\\n\\r\\n[![GraphQL Schema](schema.png)](https://graphqleditor.com/)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n## Scaling\\r\\nAttempting to adjust a project which wasn\'t designed with greater scope in mind can be quite a headache. Adding something which seems inconspicuous to the end-user may involve a long list of tedious tasks. Deprecating pre-existing concepts, adding new ones only to be renamed a while later, keeping track of what has and what has not been yet modified. This process only gets more complex with every such change required. This can be avoided by following a few simple rules in scalable schema design.\\r\\n\\r\\n[![Scaling schema-based project is easier](scale.png)](https://graphqleditor.com/)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n##### Keep it simple\\r\\nThe goal of using [GraphQL is to create something transparent](https://blog.graphqleditor.com/what-offers-graphql-api/), easy to understand for everyone involved. However, this is made impossible if a schema can be compared to a labyrinth of connections and sources of data. Think about the developer who comes after you have moved on to other projects. An example of good practices can be using input object type for mutations.\\r\\n\\r\\n##### Force yourself to be adaptable\\r\\nTo avoid the aforementioned headache in scaling, a schema should be easily adjusted to specific, often unforeseen, requirements. It is often the case that many concepts must be deprecated at once, whereas other ones need to be added without breaking the rest. A good way of doing this is using the tools given by [GraphQL](https://graphql.org/) itself, as opposed to creating one\'s own. Custom-made tends to be more convenient at the time, but it is less comprehensive looking from the outside.\\r\\n\\r\\n##### Be creative & specific\\r\\nBeing a little bit more creative when designing a schema tends to pay off in the long run. Instead of going for the easy way out and using something generic, make the type name more specific. When in doubt, consult other people involved in the project, they may have some interesting ideas about how and for what reason you should name a concept in a certain way.\\r\\n\\r\\n## Security\\r\\nCarelessly drawn-up schemas may create various possibilities for malicious attacks in different ways. An example of such behavior is exposing data in unanticipated ways.\\r\\n\\r\\n![Schema security is a crucial issue](security.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n##### Think about proper pagination\\r\\nOne of the preventative measures can be proper pagination. This is a feature which is not provided by the language itself, it is mostly left to the imagination of the developer. There are many different ways in which pagination can be implemented, which makes the choice that more difficult. It is imperative to take into account the needs of the project, rather than personal preference. \\r\\n\\r\\n##### Don\'t overload the client-side\\r\\nAllowing the clients to manipulate data is generally frowned upon since it can give birth to a multitude of issues. It is a much better idea to keep as much as possible server-side, most preferably batched in a single large request, as opposed to multiple small ones. This has a two-pronged effect: reduces the amount of data that needs to be repeatedly loaded, and simplifies the result for the end-user.\\r\\n\\r\\n\\r\\nDo not leave schema design to chance. Make it a group project, spend a couple of sessions together, brainstorming ideas and collaborating with everyone who has something to do with all the data. Hopefully, this leads to a good schema: \\r\\n\\r\\n- one that is functional, \\r\\n- malleable and easy to understand.\\r\\n\\r\\nFuture you will surely thank you later.\\r\\n\\r\\n---\\r\\n\\r\\n*A guest blog post for [GraphQL Editor blog]\\r\\n(https://blog.graphqleditor.com/) by Carl Matte; Sources: [Do\u2019s & Don\u2019ts for your schema and GraphQL operations](https://www.youtube.com/watch?v=fG8zy1OROp4), [atheros.ai](https://atheros.ai/blog/graphql-best-practices-for-graphql-schema-design), [apollographql.com](https://blog.apollographql.com/graphql-schema-design-building-evolvable-schemas-1501f3c59ed5)*\\r\\n","data":{"title":"How a well-planned schema can change your project?","date":"2020-03-01T12:00:00.284Z","image":"feature.png","author":"Carl"},"path":"well-planned-graphql-schema","images":{"feature.optimized.png":{"width":600,"height":252,"webpPath":"feature.optimized.webp","optimizedPath":"feature.optimized.optimized.png"},"feature.png":{"width":1000,"height":420,"webpPath":"feature.webp","optimizedPath":"feature.optimized.png"},"scale.optimized.png":{"width":600,"height":236,"webpPath":"scale.optimized.webp","optimizedPath":"scale.optimized.optimized.png"},"scale.png":{"width":1268,"height":498,"webpPath":"scale.webp","optimizedPath":"scale.optimized.png"},"schema.optimized.png":{"width":600,"height":254,"webpPath":"schema.optimized.webp","optimizedPath":"schema.optimized.optimized.png"},"schema.png":{"width":1186,"height":502,"webpPath":"schema.webp","optimizedPath":"schema.optimized.png"},"security.optimized.png":{"width":600,"height":241,"webpPath":"security.optimized.webp","optimizedPath":"security.optimized.optimized.png"},"security.png":{"width":1268,"height":509,"webpPath":"security.webp","optimizedPath":"security.optimized.png"}}},{"content":"\\r\\n\\r\\nA while ago **MongoDB announced GraphQL integration** in one of their products. It\'s a piece of huge news & another token of recognition for GraphQL. MongoDB team sees a great opportunity in this integration as they believe to not having to create a custom backend implementation of GraphQL can save thousands of development teams a lot of effort and resources. GraphQL support was launched for MongoDB Atlas, as integration with **MongoDB Stitch** which acts as both the GraphQL client and server.\\r\\n\\r\\n\\r\\n![MongoDB + GraphQL](mongo_graphql.png)\\r\\n\\r\\n## What\'s GraphQL\\r\\n\\r\\n**GraphQL is a data query language** that offers a declarative query ability via API comparing to typical REST API implementation, which returns a full payload of information. \\r\\n\\r\\nSome of the GraphQL benefits include:\\r\\n\\r\\n- **smaller payloads** as it uses types to make sure client ask only for data that can be returned,\\r\\n- **better performance on slower connections** thanks to a reduced number of bits transferred over the wire,\\r\\n- **quicker MVP builds** as GraphQL provides a single endpoint for flexible & more efficient data access & management.\\r\\n\\r\\n\\r\\n\\r\\n## GraphQL + MongoDB Stitch\\r\\n\\r\\n**MongoDB Stitch** is the serverless platform offered by MongoDB. As for every serverless, its main premise is:\\r\\n\\r\\n\\r\\n> *Write less code and build apps faster*\\r\\n\\r\\nand the way of achieving this is to write less code (obviously) by using all the good stuff (**now also GraphQL!**) offered by **Stitch SDK** like authentication, access rules, MongoDB queries, services, functions & more.\\r\\n\\r\\n```js\\r\\n// Install with npm:// npm install mongodb-stitch\\r\\n// Then simply add the Stitch SDK to your application\\r\\n\\r\\nimport {\\r\\n  Stitch,\\r\\n  AnonymousCredential,\\r\\n  RemoteMongoClient\\r\\n} from \'mongodb-stitch-browser-sdk\'\\r\\n\\r\\n// 1. Connect to MongoDB\\r\\n// It\u2019s simple to point Stitch to a MongoDB collection\\r\\nconst stitchClient = Stitch.initializeDefaultAppClient(\'myApp\');\\r\\n\\r\\n// Connect to a MongoDB Atlas database\\r\\nconst db = stitchClient\\r\\n  .getServiceClient(RemoteMongoClient.factory, \'mongodb-atlas\')\\r\\n  .db(\'production\');\\r\\n\\r\\n // Anonymously authenticate, then add and retrieve documents.\\r\\nstitchClient.auth.loginWithCredential(new AnonymousCredential())\\r\\n  .then(() =>\\r\\n    db.collection(\'items\').insertOne({\\r\\n      owner_id: stitchClient.auth.user.id,\\r\\n      number: 42\\r\\n    })\\r\\n  ).then(() =>\\r\\n    db.collection(\\"items\\").find({}).asArray()\\r\\n  ).then((docs) =>\\r\\n    docs.forEach((doc, index) =>\\r\\n      console.log(`${index}: ${JSON.stringify(doc)}`)\\r\\n    )\\r\\n  );\\r\\n```\\r\\n##### Source: [mongodb.com](https://www.mongodb.com/cloud/stitch)\\r\\n\\r\\nIf you want to play with Stitch SDK & GraphQL make sure to check out the official [introduction to GraphQL support in MongoDB](https://www.mongodb.com/blog/post/introducing-graphql-support-in-mongodb-atlas-with-stitch) where you will find:\\r\\n\\r\\n- a step by step setup guide \\r\\n- an overview of new GraphQL related features in Stitch Dashboard (i.e. integrated **GraphiQL interface**)\\r\\n- as well as some cool examples projects\\r\\n\\r\\n![MongoDB Stitch\'s integrated GraphiQL Interface](mongo_graphiql.png)\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"MongoDB announced GraphQL integration","date":"2020-02-24T13:37:00.284Z","image":"graphql_mongo.png","author":"Tomek"},"path":"mongodb-stitch-graphql-integration","images":{"graphql_mongo.optimized.png":{"width":600,"height":252,"webpPath":"graphql_mongo.optimized.webp","optimizedPath":"graphql_mongo.optimized.optimized.png"},"graphql_mongo.png":{"width":1000,"height":420,"webpPath":"graphql_mongo.webp","optimizedPath":"graphql_mongo.optimized.png"},"mongo_graphiql.optimized.png":{"width":600,"height":421,"webpPath":"mongo_graphiql.optimized.webp","optimizedPath":"mongo_graphiql.optimized.optimized.png"},"mongo_graphiql.png":{"width":1060,"height":743,"webpPath":"mongo_graphiql.webp","optimizedPath":"mongo_graphiql.optimized.png"},"mongo_graphql.optimized.png":{"width":600,"height":66,"webpPath":"mongo_graphql.optimized.webp","optimizedPath":"mongo_graphql.optimized.optimized.png"},"mongo_graphql.png":{"width":1517,"height":166,"webpPath":"mongo_graphql.webp","optimizedPath":"mongo_graphql.optimized.png"}}},{"content":"\\r\\nWhether weaved into an already existing application, or included as an integral part of an application\'s architecture from day one, an API is a powerful tool in a developer\'s arsenal. When properly implemented, it can be quite an important factor when it comes to designing the user experience, communicating between software components and providing the building blocks themselves. \\r\\n\\r\\nHowever, an unsatisfactory API may become more of a curse rather than a blessing:\\r\\n- it can drive up the costs,\\r\\n- case security problems,\\r\\n- raise project\u2019s complexity & deteriorate the ease of use in general\\r\\n\\r\\nLet\u2019s take a look at ways in which GraphQL can help avoid some of the pitfalls of making an API.\\r\\n\\r\\n### Schema as a source of truth\\r\\n\\r\\nIf not carefully planned out, an API architecture can start bleeding money by ever-increasing management and infrastructure costs. GraphQL tackles this problem by forcing its developer to prepare a clearly defined schema ([GraphQL Editor comes in handy](https://graphqleditor.com/)) and, at the same time, limiting the amount of data returned specifically to the requested scope. Designing a schema should incorporate various ideas from a multitude of people working on or with the API in order to create a broad scope of possible use-cases. Due to the fact that schemas naturally evolve by deprecating some fields and adding new ones, this makes GraphQL an elegant answer to swollen, cumbersome APIs. The previously mentioned narrowing of data returns solves the common issue of over-fetching.\\r\\n\\r\\n![GraphQL schema is the source of truth](schema.png)\\r\\n\\r\\n### GraphQL makes it simpler\\r\\n\\r\\nAnother cause for a headache that a potential developer might encounter is excessive complexity combined with convoluted documentation. It is of the utmost importance to know how something behaves in certain conditions and why it works in a particular way. This is made nearly impossible, or at least not cost-effective, if the developer cannot find the answers that are sought in the documentation surrounding an API. GraphQL, having been adopted by many communities around the programming world, has the benefit of a continuously growing and largely active developer base. This greatly enhances the experience a potential engineer might have as it makes finding the right tools for the job quite simple.\\r\\n\\r\\n### Security\\r\\n\\r\\nSecurity needs to be taken into consideration. It is quite likely that an API can be explored by certain individuals as a possible gateway to extracting sensitive data or harming the application in other ways. Allowing such malicious attacks to affect the intended user can really tarnish one\u2019s reputation as a reliable programmer. Although GraphQL allows for limiting the scope of possible queries to a prearranged whitelist, there are other, more flexible ways of handling the problem. Setting a cap on how many requests can be made in any given period of time is a common preventative measure for DDoS attacks.\\r\\n\\r\\n![GraphQL Security](security.png)\\r\\n##### Source: [undraw.co](https://undraw.co/)\\r\\n\\r\\n### Conclusion\\r\\nThe very nature of GraphQL appears to solve many of the issues plaguing a plethora of other APIs. Furthermore, should any other problems arise, they will have surely been already tackled by the rich and vibrant community which surrounds this query language. These factors combined make GraphQL a very appealing option when considering implementing an API.\\r\\n\\r\\n##### Sources:\\r\\n##### [MarvelApp.com](https://blog.marvelapp.com/why-marvel-uses-graphql/)\\r\\n##### [Netlify.com](https://www.netlify.com/blog/2020/01/21/advice-from-a-graphql-expert/)\\r\\n##### [Devops.com](https://devops.com/challenges-of-designing-api-driven-experiences/)\\r\\n","data":{"title":"What can GraphQL do for your API?","date":"2020-02-18T16:00:00.284Z","image":"gql.png","author":"Carl"},"path":"what-offers-graphql-api","images":{"schema.optimized.png":{"width":600,"height":193,"webpPath":"schema.optimized.webp","optimizedPath":"schema.optimized.optimized.png"},"schema.png":{"width":1060,"height":341,"webpPath":"schema.webp","optimizedPath":"schema.optimized.png"},"security.optimized.png":{"width":600,"height":195,"webpPath":"security.optimized.webp","optimizedPath":"security.optimized.optimized.png"},"security.png":{"width":1060,"height":344,"webpPath":"security.webp","optimizedPath":"security.optimized.png"}}},{"content":"\\r\\nWe are digital explores. We love to work on cutting-edge technologies & new frameworks. That\'s a fact. [GraphQL](https://graphql.org/) is definitely one of those but when it comes to implementing new tech in commercial projects you need to convince your team or Lead Developer that it\'s worth giving a shot.\\r\\n\\r\\nHow to do it? It obviously not that easy. First of all, you need to explain what exactly is GraphQL and how your project would benefit from it. Then you need to answer some questions ... a lot of questions! \\r\\n\\r\\n![REST is just fine, change my mind](conv_me.png)\\r\\n\\r\\n\\r\\n## Let\'s begin with \\"What\'s GraphQL?\\" part...\\r\\n\\r\\n#### What\'s GraphQL?\\r\\n\\r\\nGraphQL is a data query language and execution engine open-sourced by Facebook in 2015. Its main benefit is that it works with any backend service. GraphQL API is a new architectural approach that heavily reduces the size of your API & the number of API calls.\\r\\n\\r\\n![How GraphQL works](graphql_vs_rest.png)\\r\\n\\r\\nIf you want to read more about the GraphQL check [graphl.org](https://graphql.org/) or [howtographql.com](https://www.howtographql.com/).\\r\\n\\r\\n\\r\\n## Now let\'s move to \\"You probably will hear that\\" part ...\\r\\n\\r\\n#### Why don\'t stick to REST?\\r\\n\\r\\nREST no longer gets it done. This observation was made by the Facebook team back in 2012 working on Facebook mobile apps. Standard REST APIs require the frontend team to call multiple URLs to fetch all the data they need, GraphQL uses only one endpoint which results in better performance on slow cellular connections which is still a very important issue.\\r\\n\\r\\n\\r\\n#### Why should we use it?\\r\\n\\r\\nWhere to start? GraphQL is an interesting approach with much to offer. There are a lot of pros of GraphQL you can pitch to your team. These should do the job:\\r\\n\\r\\n- **Performance** - with GraphQL you don\'t have to define dozens of service end-points to fetch data. GraphQL lets you request the amount of data you actually need it, which is difficult to achieve with REST-based services. This greatly improves performance, reduces the number of round trips to the server & reduces the amount of data transferred over the wire.\\r\\n \\r\\n- **Faster prototyping** - GraphQL reduces the amount of code you need to write to achieve simple features. Less code means fewer bugs.\\r\\n\\r\\n- **Great tooling** - GraphQL\'s popularity created an ecosystem of different supplementary tools bridging the implementation gap & [making GraphQL easier to adopt](https://graphqleditor.com/).\\r\\n\\r\\n\\r\\n#### Is GraphQL secure?\\r\\n\\r\\nGraphQL is no different from any other service end-point. As long as you will follow some of the basic security good-practices you can sleep soundly.\\r\\n\\r\\n\\r\\n#### Is it production-ready?\\r\\n\\r\\nLet\'s not beat around the bush - [YES#1](https://medium.com/airbnb-engineering/how-airbnb-is-moving-10x-faster-at-scale-with-graphql-and-apollo-aa4ec92d69e2), [YES#2](https://medium.com/paypal-engineering/graphql-a-success-story-for-paypal-checkout-3482f724fb53), [YES#3](https://open.nytimes.com/react-relay-and-graphql-under-the-hood-of-the-times-website-redesign-22fb62ea9764).\\r\\nNot enough? Here are a couple more ...\\r\\n\\r\\n![Who\'s using GraphQL](allusers.png)\\r\\n\\r\\n##### Source: [graphql.org](https://graphql.org/users/)\\r\\n\\r\\n---\\r\\n","data":{"title":"How to convince your team to use GraphQL?","date":"2020-02-12T13:37:00.284Z","image":"feat.png","author":"Tomek"},"path":"how-to-convince-your-team-to-use-graphql","images":{"allusers.optimized.png":{"width":600,"height":538,"webpPath":"allusers.optimized.webp","optimizedPath":"allusers.optimized.optimized.png"},"allusers.png":{"width":653,"height":586,"webpPath":"allusers.webp","optimizedPath":"allusers.optimized.png"},"conv_me.optimized.png":{"width":600,"height":451,"webpPath":"conv_me.optimized.webp","optimizedPath":"conv_me.optimized.optimized.png"},"conv_me.png":{"width":483,"height":363,"webpPath":"conv_me.webp","optimizedPath":"conv_me.optimized.png"},"feat_conv.optimized.png":{"width":600,"height":252,"webpPath":"feat_conv.optimized.webp","optimizedPath":"feat_conv.optimized.optimized.png"},"feat_conv.png":{"width":1000,"height":420,"webpPath":"feat_conv.webp","optimizedPath":"feat_conv.optimized.png"},"graphql_vs_rest.optimized.png":{"width":600,"height":398,"webpPath":"graphql_vs_rest.optimized.webp","optimizedPath":"graphql_vs_rest.optimized.optimized.png"},"graphql_vs_rest.png":{"width":590,"height":391,"webpPath":"graphql_vs_rest.webp","optimizedPath":"graphql_vs_rest.optimized.png"}}},{"content":"\\r\\n**[RapidAPI](https://rapidapi.com/) is the world\u2019s largest API Marketplace** that helps developers find and connect to thousands of APIs.\\r\\n\\r\\nRapidAPI was founded in 2014 by Iddo Gino and after two years on the market raised $3.5 million, then to grab a stunning amount of **$38 million in The Series B** (including $25 million from Microsoft).\\r\\n\\r\\nYesterday RapidAPI **announced support for GraphQL APIs** to its and has published the first batch of them. Right now the platform offers just a few GraphQL-based APIs including GitHub, GitLab, Yelp, Reddit or Hacer News, with a lot more coming soon.\\r\\n\\r\\n![RapidAPI support GraphQL](rapid_gql.png)\\r\\n\\r\\nRapidAPI deciding to provide its marketplace users a choice between native GraphQL and REST API is a very clear signal that that GraphQL\'s market position is on a rise and will play an important role in the future of APIs.\\r\\n\\r\\n[![GraphQL APIs avaiable on RapidAPI](rapidgraphql.png)](https://rapidapi.com/search/graphql)\\r\\n\\r\\nDevelopers using RapidAPI will get access to **GraphQL-native experience** allowing them to explore schema, develop, build & test their queries along with the same benefits known for RapidAPI users from its REST API experience:\\r\\n\\r\\n- Publishing APIs via introspection or by uploading a schema file for easier onboarding,\\r\\n\\r\\n- Interactive automatically generated docs enabling users testing the API right from a browser,\\r\\n\\r\\n- Code snippets for easier integration with all the API provider\u2019s applications,\\r\\n\\r\\n- API management tools enabling to monitor performance metrics and data usage\\r\\n\\r\\n![RapidAPI](rapidapi.png)\\r\\n","data":{"title":"RapidAPI extends offer for GraphQL APIs","date":"2020-01-24T11:17:00.284Z","image":"feat.png","author":"Tomek"},"path":"rapidapi-graphql","images":{"feat.optimized.png":{"width":600,"height":252,"webpPath":"feat.optimized.webp","optimizedPath":"feat.optimized.optimized.png"},"feat.png":{"width":1000,"height":420,"webpPath":"feat.webp","optimizedPath":"feat.optimized.png"},"rapidapi.optimized.png":{"width":600,"height":225,"webpPath":"rapidapi.optimized.webp","optimizedPath":"rapidapi.optimized.optimized.png"},"rapidapi.png":{"width":400,"height":150,"webpPath":"rapidapi.webp","optimizedPath":"rapidapi.optimized.png"},"rapidgraphql.optimized.png":{"width":600,"height":300,"webpPath":"rapidgraphql.optimized.webp","optimizedPath":"rapidgraphql.optimized.optimized.png"},"rapidgraphql.png":{"width":830,"height":415,"webpPath":"rapidgraphql.webp","optimizedPath":"rapidgraphql.optimized.png"},"rapid_gql.optimized.png":{"width":600,"height":111,"webpPath":"rapid_gql.optimized.webp","optimizedPath":"rapid_gql.optimized.optimized.png"},"rapid_gql.png":{"width":1000,"height":185,"webpPath":"rapid_gql.webp","optimizedPath":"rapid_gql.optimized.png"}}},{"content":"\\r\\nJetBrains is a company well-know for all developers. They have an impressive portfolio of dev tools among which the most popular ones are definitely IntelliJ (Java IDE) & Kotlin programming language.\\r\\n\\r\\nJetBrains doesn\'t slow down in 2020 and they have just published their new product which is ... a font!\\r\\nBut not any font, its a font created by developers for developers and I must say ... **IT\'S AWESOME!**\\r\\n\\r\\n![Mono Font by JetBrains](jetbrains_mono.png)\\r\\n##### Source: [jetbrains.com](https://www.jetbrains.com/lp/mono/)\\r\\n\\r\\n## Increased readability\\r\\n\\r\\nWhy this font is so special? **It\'s simple.**\\r\\n\\r\\n**JetBrains Mono**\u2019s typeface forms are free from unnecessary details which makes them easier to process for our brains. A number of specific typographic procedures have been performed **to increase the readability** such as:\\r\\n\\r\\n- increasing the height of lowercase letters,\\r\\n- easier distinguishing similar characters ( e.g. 1, l, I or semicolon with a colon).\\r\\n\\r\\nBesides a couple of readability improvements the font also provides:\\r\\n- 138 code-specific ligatures\\r\\n- support 143 language\\r\\n- is available in 4 weights with matching italics\\r\\n- is **FREE & OPEN SOURCE!**\\r\\n\\r\\nTake a look!\\r\\n\\r\\n![JetBrains Mono vs Consolas](mono_gif.gif)\\r\\n\\r\\n\\r\\nIf you love the concept of **JetBrains Mono** I have great news! \\r\\nIt\'s available under the Apache 2.0 license and can be [downloaded from the JetBrains website](https://www.jetbrains.com/lp/mono/).\\r\\n","data":{"title":"JetBrains Mono - font for developers by developers","date":"2020-01-21T13:37:00.284Z","image":"feat_mono.png","author":"Tomek"},"path":"jetbrains-mono","images":{"feat_mono.optimized.png":{"width":600,"height":252,"webpPath":"feat_mono.optimized.webp","optimizedPath":"feat_mono.optimized.optimized.png"},"feat_mono.png":{"width":1000,"height":420,"webpPath":"feat_mono.webp","optimizedPath":"feat_mono.optimized.png"},"jetbrains_mono.optimized.png":{"width":600,"height":240,"webpPath":"jetbrains_mono.optimized.webp","optimizedPath":"jetbrains_mono.optimized.optimized.png"},"jetbrains_mono.png":{"width":1069,"height":428,"webpPath":"jetbrains_mono.webp","optimizedPath":"jetbrains_mono.optimized.png"},"mono_gif.gif":{"width":960,"height":682,"webpPath":"mono_gif.webp","optimizedPath":"mono_gif.optimized.gif.png"},"mono_gif.optimized.gif.png":{"width":600,"height":426,"webpPath":"mono_gif.optimized.gif.webp","optimizedPath":"mono_gif.optimized.gif.optimized.png"}}},{"content":"\\r\\nThe [npm Inc. was right](https://blog.graphqleditor.com/javascript-predictions-for-2019-by-npm/), 2019 was a great year for GraphQL.\\r\\nLet\'s take a look at the all good things that happened for GraphQL in 2019.\\r\\n\\r\\n## January\\r\\n\\r\\n**[GraphQL Inspector](https://github.com/kamilkisiela/graphql-inspector)** - a tool published by Kamil Kisiela, that detects changes, similar or duplicated types, validates documents against a schema and looks for deprecated usage.\\r\\n\\r\\n![GraphQL Inspector CLI](inspector.gif)\\r\\n\\r\\n\\r\\n## March\\r\\n\\r\\n**[AWS](https://aws.amazon.com/blogs/opensource/aws-joins-the-graphql-foundation/\\r\\n) & [IBM](https://developer.ibm.com/blogs/ibm-joins-the-graphql-foundation-to-push-for-open-source-adoption/) joins the GraphQL Foundation!** -  GraphQL Foundation is the GraphQL community aiming to enable widespread  GraphQL adoption. AWS & IBM joining it is a strong signal that GraphQL has a bright future.\\r\\n![GraphQL Foundation](foundation.png)\\r\\n\\r\\n\\r\\n**[Apollo Client 2.5 was launched](https://blog.apollographql.com/announcing-apollo-client-2-5-c12230cabbb7)** - a new version of Apollo Client was launched which merges local state management into the core library which has enabled a lot of cool features.\\r\\n\\r\\n![Local state management with Apollo Client](apollo.png)\\r\\n\\r\\n## June \\r\\n\\r\\n**[Postman v7.2 Supports GraphQL](https://blog.getpostman.com/2019/06/18/postman-v7-2-supports-graphql/)** - Postman joined the group of companies acknowledging the GraphQL qualities and has recently announced the support for GraphQL in their service. The latest release of Postman v7.2 enabled sending GraphQL queries in the request body, GraphQL variables & GraphQL query autocompletion.\\r\\n\\r\\n\\r\\n**[Apollo Raises $22 Million](https://blog.apollographql.com/apollo-raises-22-million-to-simplify-app-development-ee30502c81b3)** - Apollo raised a nice amount of $22 million to continue its mission to give a GraphQL-based data graph to every app developer in the world\\r\\n\\r\\n**[GraphQL Conf Berlin](https://www.graphqlconf.org/)** - GraphQL Conf is a non-profit GraphQL conference organized by Prisma and Honeypot where industry experts from all around the world present GraphQL best practices and many more. In case you missed it, talks from GraphQL Conf 2019 are available on [Prisma\'s YouTube channel](https://www.youtube.com/playlist?list=PLn2e1F9Rfr6kChXoURShhO3A-4r8FLYsO)!\\r\\n\\r\\n![GraphQL Conf](conf.png)\\r\\n\\r\\n\\r\\n**GraphQL: The Documentary** - the story of why and how GraphQL came to be and the impact it\'s having on big tech companies worldwide, including Facebook, Twitter, Airbnb & Github.\\r\\n\\r\\n[![GraphQL: The Documentary Trailer](thedoc.png)](https://www.youtube.com/watch?v=783ccP__No8)\\r\\n\\r\\n## July\\r\\n\\r\\n**[Dgraph raises $11.5 million](https://blog.dgraph.io/post/how-dgraph-labs-raised-series-a/)** - Dgraph is a horizontally scalable and distributed graph database, with a goal to provide enterprise-level scale and throughput, with low enough latency to be serving real-time user queries. Dgraph supports GraphQL-like query syntax, responds in JSON and Protocol Buffers over GRPC and HTTP.\\r\\n\\r\\n![Dgraph](dgraph.png)\\r\\n\\r\\n\\r\\n## August\\r\\n\\r\\n**[Apollo Client supports React Hooks](https://blog.apollographql.com/apollo-client-now-with-react-hooks-676d116eeae2)** - React 16.8 introduced a new way to write stateful components while avoiding the pitfalls of classes - the Hooks. Apollo Client now includes three hooks that you can implement in your app where corresponding higher-order component being used or render prop component: `useQuery`, `useMutation` &`useSubscription`.\\r\\n\\r\\n\\r\\n## October\\r\\n\\r\\n**[Apollo Client 3 Beta](https://blog.apollographql.com/previewing-the-apollo-client-3-cache-565fadd6a01e)** - Caching is considered by many developers as one of the GraphQL weaknesses. The Apollo team is on a mission to change that. New released Apollo Client 3 Beta contains some serious cache improvements.\\r\\n\\r\\n**[Graphql Editor 2.0](https://blog.graphqleditor.com/graphql-editor-new-release/)** - a new version of GraphQL Editor packed with many micro-features to help developers save a lot of time & effort creating their GraphQL based APIs.\\r\\n\\r\\n[![GraphQL Editor](graphqleditor.png)](https://graphqleditor.com/)\\r\\n\\r\\n\\r\\n**[GraphQL Summit 2019](https://summit.graphql.com/)** - GraphQL Summit is event of the year in GraphQL world. It\'s a world\'s largest conference dedicated to GraphQL, this year\'s edition featured over 60 technical talks across 3 tracks. Conference recordings are available at [Apollo\'s GraphQL YouTube channel](https://www.youtube.com/watch?v=EDqw-sGVq3k&list=PLpi1lPB6opQyraZSmwFre_FpL00_3nTzV).\\r\\n","data":{"title":"2019 in a summary - GraphQL perspective","date":"2019-12-30T13:37:00.284Z","image":"calendar.png","author":"Tomek"},"path":"2019-summary-for-graphql","images":{"apollo.optimized.png":{"width":600,"height":214,"webpPath":"apollo.optimized.webp","optimizedPath":"apollo.optimized.optimized.png"},"apollo.png":{"width":1188,"height":423,"webpPath":"apollo.webp","optimizedPath":"apollo.optimized.png"},"calendar.optimized.png":{"width":600,"height":252,"webpPath":"calendar.optimized.webp","optimizedPath":"calendar.optimized.optimized.png"},"calendar.png":{"width":1000,"height":420,"webpPath":"calendar.webp","optimizedPath":"calendar.optimized.png"},"conf.optimized.png":{"width":600,"height":268,"webpPath":"conf.optimized.webp","optimizedPath":"conf.optimized.optimized.png"},"conf.png":{"width":901,"height":403,"webpPath":"conf.webp","optimizedPath":"conf.optimized.png"},"dgraph.optimized.png":{"width":600,"height":679,"webpPath":"dgraph.optimized.webp","optimizedPath":"dgraph.optimized.optimized.png"},"dgraph.png":{"width":486,"height":550,"webpPath":"dgraph.webp","optimizedPath":"dgraph.optimized.png"},"foundation.optimized.png":{"width":600,"height":206,"webpPath":"foundation.optimized.webp","optimizedPath":"foundation.optimized.optimized.png"},"foundation.png":{"width":1802,"height":619,"webpPath":"foundation.webp","optimizedPath":"foundation.optimized.png"},"graphqleditor.optimized.png":{"width":600,"height":332,"webpPath":"graphqleditor.optimized.webp","optimizedPath":"graphqleditor.optimized.optimized.png"},"graphqleditor.png":{"width":600,"height":332,"webpPath":"graphqleditor.webp","optimizedPath":"graphqleditor.optimized.png"},"inspector.gif":{"width":796,"height":496,"webpPath":"inspector.webp","optimizedPath":"inspector.optimized.gif.png"},"inspector.optimized.gif.png":{"width":600,"height":374,"webpPath":"inspector.optimized.gif.webp","optimizedPath":"inspector.optimized.gif.optimized.png"},"thedoc.optimized.png":{"width":600,"height":338,"webpPath":"thedoc.optimized.webp","optimizedPath":"thedoc.optimized.optimized.png"},"thedoc.png":{"width":974,"height":548,"webpPath":"thedoc.webp","optimizedPath":"thedoc.optimized.png"}}},{"content":"\\r\\nAny **\\"The Office\\"** fans here?\\r\\n\\r\\nDo you remember the episode in which Jim put Dwight\'s stuff into a vending machine? This seems to be one of the best examples of the major difference between **GraphQL vs REST** according to, one of the GraphQL\u2019s creators, **Lee Byron**.\\r\\n\\r\\n![The Office - vending machine prank](vending.png)  \\r\\n\\r\\n## The Vending Machine Case\\r\\n\\r\\nIn that episode, Jim puts Dwight\'s belongings into a vending machine. Among them where coffee mug, bobble-head, nameplate, pencil cup ... and Dwight\'s wallet. Not to leave him empty-handed, Jim provided Dwight a bag of nickels. \\r\\n\\r\\nTo retrieve his item from a vending machine Dwight should:\\r\\n1. Use nickles to retrieve his wallet\\r\\n2. Use quartes, halves to retrieve the first object\\r\\n3. Repeat the procedure for every item he wants to retrieve\\r\\n\\r\\nThat\'s the way the vending machine operates. The pattern is similar to those we know from using the **REST API**. Imagine we want to retrieve posts from a company blog using rest:\\r\\n![GET /api/posts](posts.png)\\r\\nand if you want to add authors you will need to fetch the from another resource (or modify your resource containing posts) you\'ll end up with two server requests instead of one (or extra work), and as you continue to scale, you may have even more requests to different endpoints in order to fetch all the needed data:\\r\\n![GET /api/post/:id](post_id.png)\\r\\nThis is exactly our vending machine, where to get one item you need to press one button. If you want to get more items you need to get the one-by-one, repeating the procedure for different items.\\r\\n\\r\\n## A vending machine with **special buttons**\\r\\n\\r\\nNow imagine a vending machine with special buttons allowing you to get multiple things at once. This kind of super vending would help Dwight\'s get his stuff back super fast and it\'s exactly what **GraphQL API** does in terms of retrieving data.\\r\\n![GraphQL Query](gql.png)\\r\\nIn GraphQL we have a single endpoint being able to process complex requests. You query the **GraphQL server** for specific data and it will respond with what was requested, which results in fewer bits transferred over the wire.\\r\\n\\r\\n![GraphQL vs REST](graphql_vs_rest.png)\\r\\n","data":{"title":"GraphQL vs REST - a vending machine example","date":"2019-12-18T13:37:00.284Z","image":"feat_gqlvsrest.png","author":"Tomek"},"path":"graphql-vs-rest-vending-machine-example","images":{"feat_gqlvsrest.optimized.png":{"width":600,"height":252,"webpPath":"feat_gqlvsrest.optimized.webp","optimizedPath":"feat_gqlvsrest.optimized.optimized.png"},"feat_gqlvsrest.png":{"width":1000,"height":420,"webpPath":"feat_gqlvsrest.webp","optimizedPath":"feat_gqlvsrest.optimized.png"},"gql.optimized.png":{"width":600,"height":220,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1584,"height":582,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"graphql_vs_rest.optimized.png":{"width":600,"height":397,"webpPath":"graphql_vs_rest.optimized.webp","optimizedPath":"graphql_vs_rest.optimized.optimized.png"},"graphql_vs_rest.png":{"width":725,"height":480,"webpPath":"graphql_vs_rest.webp","optimizedPath":"graphql_vs_rest.optimized.png"},"posts.optimized.png":{"width":600,"height":323,"webpPath":"posts.optimized.webp","optimizedPath":"posts.optimized.optimized.png"},"posts.png":{"width":1584,"height":854,"webpPath":"posts.webp","optimizedPath":"posts.optimized.png"},"post_id.optimized.png":{"width":600,"height":259,"webpPath":"post_id.optimized.webp","optimizedPath":"post_id.optimized.optimized.png"},"post_id.png":{"width":1584,"height":684,"webpPath":"post_id.webp","optimizedPath":"post_id.optimized.png"},"vending.optimized.png":{"width":600,"height":338,"webpPath":"vending.optimized.webp","optimizedPath":"vending.optimized.optimized.png"},"vending.png":{"width":720,"height":405,"webpPath":"vending.webp","optimizedPath":"vending.optimized.png"}}},{"content":"\\r\\n[GraphQL Zeus](https://github.com/graphql-editor/graphql-zeus) is an open-source ([MIT](https://github.com/graphql-editor/graphql-zeus/blob/master/LICENSE.md)) graphql client & code generator working with a **Browser, Node.js & React Native**. It provides an auto-complete client library for JavaScript or TypeScript supporting auto-completion for strongly typed queries. It\'s maintained by [Artur Czemiel](https://twitter.com/ACzemiel) (follow him on Twitter for latest GraphQL Zeus news & updates).\\r\\n\\r\\n## Installation & Basic usage\\r\\n\\r\\nTo play with it use npm install:\\r\\n\\r\\n```\\r\\n$ npm i -g graphql-zeus\\r\\n```\\r\\n\\r\\nZeus supports:\\r\\n- Javascript (Browser, NodeJS, React Native)\\r\\n- TypeScript (Browser, NodeJS, React Native)\\r\\n\\r\\n![Zeus in action](zeusexample.gif)\\r\\n\\r\\n[GraphQL Zeus](https://github.com/graphql-editor/graphql-zeus) provides many useful solutions among which you can find such as:\\r\\n\\r\\n- **Chain** - Chain is the main function responsible for forming a GraphQL Query. It provides auto-complete in Zeus Syntax. Returned data is mapped accordingly to GraphQL query, so you get type-safe completion for both query and response in both *TypeScript* and *JavaScript*.\\r\\n\\r\\n\\r\\n\\r\\n- **Aliases** - You can alias each query just like in GraphQL original specification. To use `alias` you just need to provide `__alias:{[YOUR_ALIAS]:YOUR QUERY}`\\r\\n\\r\\n- **Selectors** - If you use same GraphQL query many times you can use `Selectors` which you can later inject into the `Chain` function\\r\\n\\r\\n\\r\\n###JavaScript &  React Native:\\r\\n\\r\\n```\\r\\n$ zeus schema.graphql ./\\r\\n```\\r\\n\\r\\n### TypeScript:\\r\\n\\r\\n```\\r\\n$ zeus schema.graphql ./  --ts \\r\\n```\\r\\n\\r\\n### Node.JS:\\r\\n\\r\\n```\\r\\n$ zeus schema.graphql ./  --node \\r\\n```\\r\\n\\r\\n## Want to contribute? \\r\\nAwesome, just:\\r\\n1. Fork this repo\\r\\n2. Create your feature branch: `git checkout -b feature-name`\\r\\n3. Commit your changes: `git commit -am \'Add some feature\'`\\r\\n4. Push to the branch: `git push origin my-new-feature`\\r\\n5. Submit a pull request\\r\\n\\r\\n![Graphql Zeus](zeus.gif)\\r\\n\\r\\n\\r\\n","data":{"title":"Boost your GraphQL development with GraphQL Zeus","date":"2019-11-15T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"graphql-zeus","images":{"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"zeus.gif":{"width":822,"height":400,"webpPath":"zeus.webp","optimizedPath":"zeus.optimized.gif.png"},"zeus.optimized.gif.png":{"width":600,"height":292,"webpPath":"zeus.optimized.gif.webp","optimizedPath":"zeus.optimized.gif.optimized.png"},"zeusexample.gif":{"width":734,"height":470,"webpPath":"zeusexample.webp","optimizedPath":"zeusexample.optimized.gif.png"},"zeusexample.optimized.gif.png":{"width":600,"height":384,"webpPath":"zeusexample.optimized.gif.webp","optimizedPath":"zeusexample.optimized.gif.optimized.png"}}},{"content":"\\r\\nIf you would like to start your adventure with the [GraphQL](https://graphql.org/) but you are not sure how we have prepared a small interactive tutorial for you to familiarize yourself with basic **GraphQL syntax** and its elements.\\r\\n\\r\\nDuring six short lessons, you will learn the basics allowing you to start working on your first **GraphQL schema** like:\\r\\n- GraphQL Types\\r\\n- Queries\\r\\n- Mutations\\r\\n- Inputs\\r\\n- Enums\\r\\n\\r\\nClick the button below and you will be redirected to the **GraphQL Interactive tutorial** :\\r\\n\\r\\n[![GraphQL Tutorial](button.png)](https://app.graphqleditor.com/?category=tutorial&visibleMenu=code)\\r\\n\\r\\n[![GraphQL Tutorial](tutorial.png)](https://app.graphqleditor.com/?category=tutorial&visibleMenu=code)\\r\\n\\r\\nIf you are looking for more **GraphQL resources** make sure to check:\\r\\n- [GraphQL Official Documentation](https://graphql.org/learn/)\\r\\n- [How to GraphQL](https://www.howtographql.com/)\\r\\n\\r\\nHappy learning!\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Interactive GraphQL Tutorial for beginners","date":"2019-11-06T14:10:00.284Z","image":"feature.png","author":"Tomek"},"path":"interactive-graphql-tutorial","images":{"button.optimized.png":{"width":600,"height":254,"webpPath":"button.optimized.webp","optimizedPath":"button.optimized.optimized.png"},"button.png":{"width":400,"height":169,"webpPath":"button.webp","optimizedPath":"button.optimized.png"},"feature.optimized.png":{"width":600,"height":252,"webpPath":"feature.optimized.webp","optimizedPath":"feature.optimized.optimized.png"},"feature.png":{"width":1000,"height":420,"webpPath":"feature.webp","optimizedPath":"feature.optimized.png"},"tutorial.optimized.png":{"width":600,"height":358,"webpPath":"tutorial.optimized.webp","optimizedPath":"tutorial.optimized.optimized.png"},"tutorial.png":{"width":1051,"height":627,"webpPath":"tutorial.webp","optimizedPath":"tutorial.optimized.png"}}},{"content":"\\r\\n\\r\\n[Ghost](https://ghost.org/) is a very popular open-source publishing platform, described by many as a modern alternative to WordPress. Their premise is making publishing as easy as possible and they do deliver!\\r\\n\\r\\nGhost has proven its usability by gaining the trust of such tech giants like [Mozilla](https://www.mozilla.org), [OpenAI](https://openai.com/), [Apple](https://www.apple.com/), [Tinder](https://tinder.com/), [DuckDuckGo](https://duckduckgo.com/) and thousands of small & medium companies.\\r\\n\\r\\nA week ago big news hit the Internet that the new version of Ghost is available and I think that the release timing wasn\'t a coincidence ...  **Happy Halloween ;)**\\r\\n![Happy Halloween](https://thepracticaldev.s3.amazonaws.com/i/d57w6fiu2biebod2i4cd.png)\\r\\n\\r\\nAs mentioned by its developers, [Ghost 3.0](https://ghost.org/3/) is all about enabling new business models for publishers.\\r\\n\\r\\n#### Ghost 3.0 features:\\r\\n- **Native support for memberships** - allowing you to easily turn your anonymous page viewers into registered users, \\r\\n- **Stripe integration** - to enable subscription business model for all publishers (Ghost takes 0% transaction fees!)\\r\\n- **JAMstack native architecture** -  documented integrations with [Gatsby](https://www.gatsbyjs.org/), [Next](https://nextjs.org/), [VuePress](https://vuepress.vuejs.org/), and more.\\r\\n- **many new integrations** - you can use your favorite services with Ghost, the full list is available [here](https://ghost.org/integrations/)\\r\\n- and of course, it remains **an open-source platform**!\\r\\n\\r\\nIf that\'s not enough and you are still hesitating if you should give Ghost a try it is also worth mentioning that:\\r\\n- has blazing-fast & modern codebase,\\r\\n- fully open-source permissive **MIT license**,\\r\\n- much **cheaper than WordPress** (see below)\\r\\n\\r\\n![Ghost vs WordPress](https://thepracticaldev.s3.amazonaws.com/i/4h4l956b186kxftzwcdb.png)\\r\\n\\r\\n###### Source: [ghost.org](https://ghost.org/vs/wordpress/)\\r\\n\\r\\n#### Ghost + Gatsby (GraphQL)\\r\\n\\r\\nOne of my favorite things about Ghost is that it works great with [Gatsby](https://www.gatsbyjs.org/) & Gatsby equals [GraphQL](https://www.gatsbyjs.org/docs/graphql-concepts/). GraphQL is a query language for APIs where when you ask for data you get exactly what you need - nothing more, nothing less. This how it looks compared to REST.\\r\\n\\r\\n\\r\\n![GraphQL vs REST](https://thepracticaldev.s3.amazonaws.com/i/5tsthxcpy4ub2czxqrd5.png)\\r\\n\\r\\n###### Source: [blog.apollographql.com](https://blog.apollographql.com/graphql-vs-rest-5d425123e34b)\\r\\n\\r\\n\\r\\nFetching data from the Ghost API for a Gatsby site is very simple, especially when using GraphQL. Let\'s take a look at some basic operations that can be done to retrieve data from the Ghost API with GraphQL.\\r\\nTake a look at these common examples of operation you probably need to perform when using GraphQL to query the Ghost API for your company page, news site or blog. All examples come from [Ghost docs](https://ghost.org/docs/api/v3/gatsby/graphql-recipes-for-ghost/).\\r\\n\\r\\n#### Fetching posts\\r\\nIn this example, we take a limited amount of posts per page & use \u2018skip\u2019 to paginate through pages containing those posts:\\r\\n\\r\\n![Alt Text](fetching_posts.png)\\r\\n###### Source: [ghost.org](https://ghost.org/docs/api/v3/gatsby/graphql-recipes-for-ghost/)\\r\\n\\r\\n#### Filtering Posts\\r\\nFiltering posts by tag is a widely used case:\\r\\n\\r\\n![Alt Text](filtering_posts.png)\\r\\n###### Source: [ghost.org](https://ghost.org/docs/api/v3/gatsby/graphql-recipes-for-ghost/)\\r\\n\\r\\n#### Retrieving settings\\r\\nThe Ghost settings node differs from other nodes (it\u2019s a single object). To query it you need to:\\r\\n\\r\\n![Alt Text](settings.png)\\r\\n###### Source: [ghost.org](https://ghost.org/docs/api/v3/gatsby/graphql-recipes-for-ghost/)\\r\\n\\r\\n#### Retrieving the list of all tags\\r\\nGetting all tags from a Ghost site is simple. You could them to form a tag cloud or a keywords list:\\r\\n\\r\\n![Alt Text](tags.png)\\r\\n###### Source: [ghost.org](https://ghost.org/docs/api/v3/gatsby/graphql-recipes-for-ghost/)\\r\\n","data":{"title":"New Ghost 3.0 and how to use it with GraphQL (Gatsby)","date":"2019-10-31T13:37:00.284Z","image":"ghost.png","author":"Tomek"},"path":"ghost-gatsby-graphql","images":{"fetching_posts.optimized.png":{"width":600,"height":234,"webpPath":"fetching_posts.optimized.webp","optimizedPath":"fetching_posts.optimized.optimized.png"},"fetching_posts.png":{"width":1584,"height":617,"webpPath":"fetching_posts.webp","optimizedPath":"fetching_posts.optimized.png"},"filtering_posts.optimized.png":{"width":600,"height":195,"webpPath":"filtering_posts.optimized.webp","optimizedPath":"filtering_posts.optimized.optimized.png"},"filtering_posts.png":{"width":1584,"height":516,"webpPath":"filtering_posts.webp","optimizedPath":"filtering_posts.optimized.png"},"ghost.optimized.png":{"width":600,"height":252,"webpPath":"ghost.optimized.webp","optimizedPath":"ghost.optimized.optimized.png"},"ghost.png":{"width":1000,"height":420,"webpPath":"ghost.webp","optimizedPath":"ghost.optimized.png"},"settings.optimized.png":{"width":600,"height":273,"webpPath":"settings.optimized.webp","optimizedPath":"settings.optimized.optimized.png"},"settings.png":{"width":1584,"height":720,"webpPath":"settings.webp","optimizedPath":"settings.optimized.png"},"tags.optimized.png":{"width":600,"height":214,"webpPath":"tags.optimized.webp","optimizedPath":"tags.optimized.optimized.png"},"tags.png":{"width":1584,"height":566,"webpPath":"tags.webp","optimizedPath":"tags.optimized.png"}}},{"content":"\\r\\n\\r\\n\\r\\nSince open-sourcing [GraphQL](https://graphql.org/) specification in 2015, it gained a lot of popularity and is now used by many development teams, including giants like GitHub, Twitter or Airbnb. Why? Because GraphQL lets you describe the complex data dependencies with ease, another great thing about it is that you can use it with any language or platform.  \\r\\n\\r\\nThe rising popularity of GraphQL led to the formation of local meetups of GraphQL users. One of the most active European communities is a group of GraphQL fans from Berlin. If you are not from Berlin or subscribing [GraphQL Weekly](https://www.graphqlweekly.com/) (if so it\'s a good moment to do it), you might have missed the recordings of their recent meetup that took place at Berlin [Prisma](https://www.prisma.io/) office.\\r\\n\\r\\n## The talks from GraphQL Berlin Meetup #15\\r\\n\\r\\n\\r\\n#### \\"System Design and Architecture @ GraphQL\\" by Bogdan Nedelcu \\r\\n\\r\\n\\r\\nDesigning GraphQL API\'s for scale is quite a challenge as GraphQL is relatively a new technology. Bogdan Nedelcu talked about system architecture patterns that have been around for a long time that GraphQL bases on.  \\r\\n\\r\\n[![](graphql_system_design.png)](https://www.youtube.com/watch?v=S22rYsesrQc)\\r\\n\\r\\n\\r\\n#### \\"Pursuing Singularity\\" by Roman Paradeev\\r\\n\\r\\nDuring his talk, Roman Paradeev made an overview of tools that provide type safety across your database, API & client-side in the GraphQL ecosystem.\\r\\n\\r\\n[![](pursuing_singularity.png)](https://www.youtube.com/watch?v=yN8NBXdRRfc)\\r\\n\\r\\n\\r\\n\\r\\n#### \\"Key learnings from implementing authentication and authorization using GraphQL\\" by Christoph Hartmann\\r\\n\\r\\nBasing on his experience with GraphQL implementation Christoph Hartmann presented different approaches to implementing authentication and authorization for GraphQL services.\\r\\n\\r\\n[![](implementing_authentication.png)](https://www.youtube.com/watch?v=pF6SH7Tm6Pc)\\r\\n\\r\\n\\r\\n","data":{"title":"Inspiring talks from GraphQL Berlin Meetup","date":"2019-10-22T13:37:00.284Z","image":"graphql.png","author":"Tomek"},"path":"talks-from-graphql-berlin-meetup","images":{"graphql.optimized.png":{"width":600,"height":252,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":1000,"height":420,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"graphql_system_design.optimized.png":{"width":600,"height":338,"webpPath":"graphql_system_design.optimized.webp","optimizedPath":"graphql_system_design.optimized.optimized.png"},"graphql_system_design.png":{"width":712,"height":401,"webpPath":"graphql_system_design.webp","optimizedPath":"graphql_system_design.optimized.png"},"implementing_authentication.optimized.png":{"width":600,"height":337,"webpPath":"implementing_authentication.optimized.webp","optimizedPath":"implementing_authentication.optimized.optimized.png"},"implementing_authentication.png":{"width":713,"height":400,"webpPath":"implementing_authentication.webp","optimizedPath":"implementing_authentication.optimized.png"},"pursuing_singularity.optimized.png":{"width":600,"height":337,"webpPath":"pursuing_singularity.optimized.webp","optimizedPath":"pursuing_singularity.optimized.optimized.png"},"pursuing_singularity.png":{"width":712,"height":400,"webpPath":"pursuing_singularity.webp","optimizedPath":"pursuing_singularity.optimized.png"}}},{"content":"  \\r\\nSome time ago I have read that:\\r\\n\\r\\n> *GraphQL is really about collaboration, and the teams that get furthest are those who work closely together on their GraphQL API.*\\r\\n\\r\\nThis idea is very true but collaboration becomes a very tricky part of any development project where there are multiple teams involved. So a question arises, is there any way to make collaboration on a GraphQL API easier & more pleasant experience? I think that it\'s possible!\\r\\n\\r\\nLet me introduce you three ways of strengthening your GraphQL API which might save your teams from jumping at each other\'s throats.\\r\\n\\r\\n\\r\\n### #1 Install GraphQL Code Inspector\\r\\n\\r\\n[GraphQL Inspector](https://graphql-inspector.com/) is a CLI tool from [The Guild](https://medium.com/the-guild) member [Kamil Kisiela](https://github.com/kamilkisiela/), that detects changes, similar or duplicated types, validates documents against a schema and looks for deprecated usage, everything as simple as this:\\r\\n\\r\\n```\\r\\n$ graphql-inspector diff OLD_SCHEMA NEW_SCHEMA\\r\\n```\\r\\n\\r\\nThere is also a programmatic API available in case you want to build something on top of it on your own.\\r\\n\\r\\n![GraphQL Inspector CLI](gqlinspector.gif)\\r\\n##### Source: [GraphQL Inspector](https://medium.com/the-guild/graphql-inspector-481c1a5ef616)\\r\\n\\r\\n\\r\\n### #2 Use GraphQL Editor\\r\\n\\r\\nThe [GraphQL Editor](graphqleditor.com) is a tool to build, manage and collaborate on your GraphQL schema visually! It includes features that help you make sure that your GraphQL API and its clients are well-developed. The latest update introduced a couple more interesting features like:\\r\\n\\r\\n- **Autocomplete for Queries**  - Create an auto-complete library for JavaScript or TypeScript with a built-in [GraphQL Zeus](https://github.com/graphql-editor/graphql-zeus) feature.\\r\\n\\r\\n- **Schema versioning** - with a click of a button you can see & manage all changes.\\r\\n\\r\\n- **Schema Libraries (Schema stitching done right)** - built-in GraphQL libraries allow you to create new GraphQL schemas from multiple underlying GraphQL APIs.\\r\\n\\r\\n- **Fake backend** - allowing you to run a GraphQL Server with faked data available for testing with a single click.\\r\\n\\r\\n[![GraphQL Editor](gqleditor.png)](graphqleditor.com)\\r\\n\\r\\n\\r\\n\\r\\n### #3 Why not use both?\\r\\n\\r\\nGet your GraphQL API a bulletproof vest by combining these two tools!\\r\\n\\r\\n![Fusion](fusion.gif)","data":{"title":"3 ways of strengthening your GraphQL API","date":"2019-10-17T13:37:00.284Z","image":"editor.png","author":"Tomek"},"path":"three-ways-to-strengthen-graphql-api","images":{"editor.optimized.png":{"width":600,"height":252,"webpPath":"editor.optimized.webp","optimizedPath":"editor.optimized.optimized.png"},"editor.png":{"width":1000,"height":420,"webpPath":"editor.webp","optimizedPath":"editor.optimized.png"},"fusion.gif":{"width":480,"height":360,"webpPath":"fusion.webp","optimizedPath":"fusion.optimized.gif.png"},"fusion.optimized.gif.png":{"width":600,"height":450,"webpPath":"fusion.optimized.gif.webp","optimizedPath":"fusion.optimized.gif.optimized.png"},"gqleditor.optimized.png":{"width":600,"height":347,"webpPath":"gqleditor.optimized.webp","optimizedPath":"gqleditor.optimized.optimized.png"},"gqleditor.png":{"width":1195,"height":691,"webpPath":"gqleditor.webp","optimizedPath":"gqleditor.optimized.png"},"gqlinspector.gif":{"width":796,"height":496,"webpPath":"gqlinspector.webp","optimizedPath":"gqlinspector.optimized.gif.png"},"gqlinspector.optimized.gif.png":{"width":600,"height":374,"webpPath":"gqlinspector.optimized.gif.webp","optimizedPath":"gqlinspector.optimized.gif.optimized.png"}}},{"content":"  \\r\\nOver the last couple of years, [GraphQL](https://graphql.org/) has been making a name for itself as a powerful alternative for REST API. No wonder that gradually more and more people want to jump in on that sweet GraphQL hype train, but certainly not everyone wants to get their hands dirty, building an API by themselves. While doing that using one of the most popular tools out there (like [Express](https://github.com/graphql/express-graphql) or [Apollo](https://github.com/apollographql)) doesn\u2019t have to be a chore, there is a way to have some fun with GraphQL without touching the server side. \\r\\n\\r\\nLet\u2019s have a look at our list of some public GraphQL APIs you can play with:\\r\\n\\r\\n### 1. [Countries GraphQL API](https://github.com/trevorblades/countries)\\r\\nFor a nice warm-up, let\u2019s dive into Countries API built by GitHub user Trevor Blades, who used [Countries List](https://annexare.github.io/Countries/) as his source of data. Thanks to that, we can now query the API for fields such as:\\r\\n\\r\\n- name and native name\\r\\n- currency\\r\\n- languages\\r\\n    - name and native name\\r\\n    - rtl\\r\\n- phone (for countries\u2019 mobile prefixes)\\r\\n- emoji\\r\\n\\r\\nHere are some example queries:\\r\\n\\r\\n- Get a list of all the countries\u2019 names and their respective native versions. \\r\\n\\r\\n![Countries API query](1q.png)\\r\\n![Countries API response](1r.png)\\r\\n\\r\\n- Get the currency and phone prefix in United Arab Emirates by its code.\\r\\n\\r\\n![Countries API query](2q.png)\\r\\n![Countries API response](2r.png)\\r\\n\\r\\n\\r\\nAfter getting familiar with the API, you can make use of it by building a quiz app or have a look at [byrichardpowell\u2019s implementation](https://github.com/byrichardpowell/Country-Quiz). Using React, TypeScript and Apollo, he managed to build a PWA fueled by Trevor Blades\u2019 work.\\r\\n\\r\\nYou can check out the API\u2019s playground [here](https://countries.trevorblades.com/).\\r\\n\\r\\n### 2. [Contentful - Content Delivery API](https://www.contentful.com/developers/docs/tutorials/general/graphql/)\\r\\nContentful is a popular headless CMS, which offers plenty of flexibility in implementation. You can decide on choosing your own Front-End framework, as well as whether you want to get the data through REST or GraphQL API. \\r\\n\\r\\nThe team behind this product put in a large effort to make the experience of interacting with their GraphQL API as painless as possible. Thanks to that, every user has access to an [open-source](https://github.com/contentful/the-example-app.nodejs#readme) demo [app](https://the-example-app-nodejs.contentful.com/), whose resources you can query from an [interactive playground](https://graphql.contentful.com/content/v1/spaces/f8bqpb154z8p/explore?access_token=9d5de88248563ebc0d2ad688d0473f56fcd31c600e419d6c8962f6aed0150599&query=%7B%0A%20%20lessonCollection(where%3A%20%7B%20%0A%09%09OR%3A%20%5B%0A%09%09%09%7B%20title_contains%3A%20%22content%22%20%7D%2C%0A%09%09%09%7B%20title_contains%3A%20%22SDK%22%20%7D%0A%09%09%5D%0A%20%20%7D)%20%7B%0A%20%20%20%20items%20%7B%0A%20%20%20%20%20%20title%0A%20%20%20%20%20%20slug%0A%20%20%20%20%20%20modulesCollection(limit%3A%202%2C%20skip%3A%201)%20%7B%0A%20%20%20%20%20%20%20%20total%0A%09%09%09%09limit%0A%09%09%09%09skip%0A%20%20%20%20%20%20%20%20items%20%7B%0A%20%20%20%20%20%20%20%20%20%20...imageUrl%0A%09%09%09%09%09...%20on%20LessonCodeSnippets%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20title%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20...%20on%20LessonCopy%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20sys%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20id%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20title%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A%0Afragment%20imageUrl%20on%20LessonImage%20%7B%0A%20%20title%0A%20%20image%20%7B%0A%20%20%20%20url%0A%20%20%7D%0A%7D). \\r\\n\\r\\nContentful helps bring to fruition plans of creating easy to manage and pleasant to write dev blog or portfolio. Very nature of headless CMS puts a solid line between Front-End and Back-End and because of that, swapping a view framework is just a matter of delivering the data where it should be, what makes it a perfect fit for GraphQL.\\r\\n\\r\\n\\r\\n### 3. [GitHub](https://developer.github.com/v4/) / 4. [GitLab](https://docs.gitlab.com/ee/api/graphql/)\\r\\nTwo of the largest players in the software development version control based hosting providers go toe to toe with adding new, cutting-edge features. No wonder then that both of them offer a GraphQL API for their users to consume. GitHub\u2019s docs describe perfectly the motivation that pushes more and more companies towards GraphQL, which is mostly about speed and precision:\\r\\n\\r\\n> *GitHub chose GraphQL for our API v4 because it offers significantly more flexibility for our integrators. The ability to define precisely the data you want\u2014and only the data you want\u2014is a powerful advantage over the REST API v3 endpoints. GraphQL lets you replace multiple REST requests with a single call to fetch the data you specify.* \\r\\n\\r\\nTheir API is a great starting point for people that are eager to dive into GraphQL world and [GraphQL Editor](https://graphqleditor.com/) makes it significantly easier to browse through the vast structure of its schemas, which you can see in action here. It allows for both querying and mutating the data, which means you can even create your custom reactions to issues: \\r\\n\\r\\n![GitHub/Gitlab query](3q.png)\\r\\n\\r\\nBut for simple getting all of your repositories and its stars, this snippet will do:\\r\\n![getStars query](4q.png)\\r\\n![getStars response](4r.png)\\r\\n\\r\\nYou can play around with it right here. \\r\\n\\r\\nGitLab, on the other hand, offers slightly less humane docs, but more straight-forward ones. We have some nice [reference resources](https://docs.gitlab.com/ee/api/graphql/reference/) and also mentions of an IDE available on your instance on http://gitlab.example.com/-/graphql-explorer , but sadly nothing based on a demo app that you can play without prior setup.\\r\\n\\r\\n### 5. [GraphQL Pokemon](https://github.com/lucasbento/graphql-pokemon)\\r\\nIf you always dreamed about creating your own version of Pok\xe9dex ([just like creators of this API](https://react-relay-pokemon.now.sh/#/)) or even a Pok\xe9mon game, this may be your best shot. \\r\\n\\r\\nThanks to [Lucas Bento](https://github.com/lucasbento), you can get every information needed for describing childhood heroes of plenty of us. As usual, you can try the API out in the [interactive console](https://graphql-pokemon.now.sh/)), so if I want to remind myself what is my common feature with Snorlax, I look no further than sending:\\r\\n\\r\\n![Pokemon query](5q.png)\\r\\n\\r\\nQuickly getting in response:\\r\\n\\r\\n![Pokemon response](5r.png)\\r\\n\\r\\n### 6. [Star Wars GraphQL API](https://github.com/graphql/swapi-graphql)\\r\\nI already winked at Pok\xe9mon fans, so I could not leave out possibly the biggest fanbase in the world - Star Wars fans. [Star Wars REST API](https://swapi.co/) has already made a name for itself and now it\u2019s time to swap it with its GraphQL counterpart. \\r\\n\\r\\nIf you would ever come across Princess Leia and asked her about her weight, you would get slapped so hard that even getting carbon-frozen would seem like a pleasant alternative. With SWAPI GraphQL API [you can learn the number without any risk of an injury](https://graphql.org/swapi-graphql?query=%7B%0A%09person%20(id%3A%20%22cGVvcGxlOjU%3D%22)%20%7B%0A%20%20%20%20name%0A%20%20%20%20mass%0A%20%20%7D%0A%7D%0A). The resources are mapped from the [original API](https://swapi.co/documentation), so you can expect to be able to query starships, vehicles, planets, species, characters and plenty more. It does not get any better than that for developers among Star Wars fans.\\r\\n\\r\\n### 7. [Spotify - GraphQL API](https://github.com/wittydeveloper/spotify-graphql)\\r\\nWhile Spotify already has a pretty powerful API, there is no official GraphQL support on the horizon. Fortunately, for a service that big and community that productive, you can be sure that someone will pull off an unofficial version for our use.\\r\\n\\r\\nThat was the case with [wittydeveloper](https://github.com/wittydeveloper)\u2019s Spotify-GraphQL, which makes it seamless to check if, for example, Ed Sheeran started swearing more over time. It\u2019s just a matter of typing:\\r\\n\\r\\n![ASpotify GraphQL API query](6q.png)\\r\\n\\r\\n...into the [interactive console](https://spotify-api-graphql-console.herokuapp.com/) (which requires you to authenticate the app with your Spotify account). \\r\\n\\r\\nThe creator also offers a handful of [Node + TypeScript query examples](https://github.com/wittydeveloper/spotify-graphql-examples), where you can find ways of getting data of the user\u2019s playlist or top artist\u2019s tracks. \\r\\n","data":{"title":"7 GraphQL APIs to play with","date":"2019-10-03T13:37:00.284Z","image":"editor.png","author":"Adrian"},"path":"best-graphql-apis-to-play-with","images":{"1q.optimized.png":{"width":600,"height":725,"webpPath":"1q.optimized.webp","optimizedPath":"1q.optimized.optimized.png"},"1q.png":{"width":518,"height":626,"webpPath":"1q.webp","optimizedPath":"1q.optimized.png"},"1r.optimized.png":{"width":600,"height":550,"webpPath":"1r.optimized.webp","optimizedPath":"1r.optimized.optimized.png"},"1r.png":{"width":1282,"height":1176,"webpPath":"1r.webp","optimizedPath":"1r.optimized.png"},"2q.optimized.png":{"width":600,"height":427,"webpPath":"2q.optimized.webp","optimizedPath":"2q.optimized.optimized.png"},"2q.png":{"width":880,"height":626,"webpPath":"2q.webp","optimizedPath":"2q.optimized.png"},"2r.optimized.png":{"width":600,"height":372,"webpPath":"2r.optimized.webp","optimizedPath":"2r.optimized.optimized.png"},"2r.png":{"width":880,"height":546,"webpPath":"2r.webp","optimizedPath":"2r.optimized.png"},"3q.optimized.png":{"width":600,"height":216,"webpPath":"3q.optimized.webp","optimizedPath":"3q.optimized.optimized.png"},"3q.png":{"width":1754,"height":630,"webpPath":"3q.webp","optimizedPath":"3q.optimized.png"},"4q.optimized.png":{"width":600,"height":455,"webpPath":"4q.optimized.webp","optimizedPath":"4q.optimized.optimized.png"},"4q.png":{"width":998,"height":756,"webpPath":"4q.webp","optimizedPath":"4q.optimized.png"},"4r.optimized.png":{"width":600,"height":715,"webpPath":"4r.optimized.webp","optimizedPath":"4r.optimized.optimized.png"},"4r.png":{"width":1198,"height":1428,"webpPath":"4r.webp","optimizedPath":"4r.optimized.png"},"5q.optimized.png":{"width":600,"height":293,"webpPath":"5q.optimized.webp","optimizedPath":"5q.optimized.optimized.png"},"5q.png":{"width":946,"height":462,"webpPath":"5q.webp","optimizedPath":"5q.optimized.png"},"5r.optimized.png":{"width":600,"height":430,"webpPath":"5r.optimized.webp","optimizedPath":"5r.optimized.optimized.png"},"5r.png":{"width":880,"height":630,"webpPath":"5r.webp","optimizedPath":"5r.optimized.png"},"6q.optimized.png":{"width":600,"height":463,"webpPath":"6q.optimized.webp","optimizedPath":"6q.optimized.optimized.png"},"6q.png":{"width":980,"height":756,"webpPath":"6q.webp","optimizedPath":"6q.optimized.png"}}},{"content":"  \\r\\nA while ago we have launched a new version of [GraphQL Editor](https://graphqleditor.com/) packed with features we believe can help developers save a lot of time & effort creating their GraphQL based APIs.\\r\\n\\r\\nThe [GraphQL Editor](https://graphqleditor.com/) is a supportive tool for both advanced GraphQL users as well as those making their first steps with GraphQL APIs. We still aim to solve two basic issues:\\r\\n\\r\\n- make web development easier (both frontend & backend side)\\r\\n- fix communication issues within a development team\\r\\n\\r\\n[![GraphQL Editor](editor.png)](https://graphqleditor.com/)\\r\\n\\r\\n\\r\\n## GraphQL Editor Features\\r\\n\\r\\nSome of them are totally new features, some might be well-known for [GraphQL Editor](https://graphqleditor.com/) early adopters but undergone some serious upgrades. Among them, you can find such features as:\\r\\n\\r\\n- **GraphQL IDE** - Prototype your schema or import your own and start working with GraphQL right away.\\r\\n\\r\\n- **Built-in GraphiQL** - Built-in most popular in-browser IDE for exploring GraphQL. No need to set up your own environment.\\r\\n\\r\\n- **GraphQL Libraries** -  An idea similar to schema stitching, a much stable approach. Create new GraphQL schema from multiple underlying GraphQL APIs without conflicts.\\r\\n\\r\\n- **Instant Fake Backend** - Generate fake backend out of your schema in a no time thanks to Levenshtein algorithm.\\r\\n\\r\\n- **Schema Visualization** - Import your schema to the editor. You can do it both by importing GQL file or copying directly code.\\r\\n\\r\\nAnd a lot more! You can read about the features [here](https://graphqleditor.com/features).\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"GraphQL Editor 2.0","date":"2019-10-01T13:37:00.284Z","image":"editor.png","author":"Tomek"},"path":"graphql-editor-new-release","images":{"editor.optimized.png":{"width":600,"height":332,"webpPath":"editor.optimized.webp","optimizedPath":"editor.optimized.optimized.png"},"editor.png":{"width":1397,"height":773,"webpPath":"editor.webp","optimizedPath":"editor.optimized.png"}}},{"content":"  \\r\\n[Draqula](https://draqulajs.com/) is a lightweight GraphQL client, perfect for smaller and simpler React apps. Most web apps don\'t need higher-order components, subscriptions or local state management, that\u2019s where Draqula comes in. It focuses on simple apps and execution using React hooks for building queries and mutations.\\r\\n \\r\\nThe main focus of Draqula is maintaining simple API and codebase as well as being as straightforward as possible by relying on hooks. It also has basic [cache implementation](https://blog.graphqleditor.com/grapqhl-vs-rest-caching/) and automatic retires for network errors and failed queries. Higher order or render-prop components, and subscriptions will not be supported to maintain the simplicity of the client.  \\r\\n  \\r\\n![01](01.png)  \\r\\n\\r\\n## Set it up\\r\\n\\r\\nInstalling via Yarn or npm is really simple and Draqula is ready to go in a matter of seconds  \\r\\n\\r\\n![02](02.png)\\r\\n\\r\\n\\r\\nTo start it up attach the URL to your [GraphQL](graphqleditor.com) endpoint\\r\\n\\r\\n![03](03.png)  \\r\\n\\r\\n\\r\\nNow to make Draqula available to React components in your app use `DraqulaProvider`. Then find the `render()` function and modify it to include Draqula, like this:\\r\\n\\r\\n![04](04.png)  \\r\\n\\r\\nNow all you need to do is run a [GraphQL]() query in your components:\\r\\n\\r\\n![05](05.png)\\r\\n\\r\\n\\r\\n\\r\\n## Take it for a spin\\r\\n\\r\\nQueries have to be made using the `gql` function from the `graphql-tag` module and have to be defined outside your component. Here\u2019s an example of a basic query without variables:\\r\\n\\r\\n![06](06.png)  \\r\\n\\r\\n\\r\\nNow let\u2019s try a Query with a variable by simply adding another argument to `useQuery`:\\r\\n\\r\\n![07](07.png)  \\r\\n\\r\\n\\r\\n\\r\\nSimilarly Draqula uses a `useMutation` hook for mutations:\\r\\n\\r\\n![08](08.png)\\r\\n\\r\\n\\r\\n\\r\\nJust like with queries mutations can also use variables, the difference is you don\'t add them into `useMutation` and use a `mutate` function instead:\\r\\n\\r\\n![09](09.png)\\r\\n\\r\\n\\r\\n \\r\\n\\r\\n## Rounding it out\\r\\n\\r\\nDraqula has some additional functions like basic caching and refetching. For example if you previously executed a query with a `page = 1` variable the next time you run the same query with that variable Draqula will return the data last stored for that query. It will also send a refetch request in the background in case it\u2019s outdated. Caching can be turned off for an individual query or globally.\\r\\n\\r\\n![10](10.png)  \\r\\n\\r\\nRefetching can also be done manually:\\r\\n\\r\\n![11](11.png)  \\r\\n\\r\\nDraqula also has a `fetchMore` function in case your app needs to add more data to the list without deleting current data.\\r\\n\\r\\n![12](12.png)  \\r\\n\\r\\nand a merging function if you want to merge new data with the current one\\r\\n\\r\\n![13](13.png)  \\r\\n\\r\\n\\r\\nOverall Draqula is a handy little tool that\u2019s quick and easy to use and the developer is still working on adding new features, so give it a try and see for yourself.\\r\\n","data":{"title":"Introduction to Draqula - a GraphQL client for React apps","date":"2019-09-24T13:37:00.284Z","image":"gql.png","author":"Michal"},"path":"introduction-to-draqula","images":{"01.optimized.png":{"width":600,"height":544,"webpPath":"01.optimized.webp","optimizedPath":"01.optimized.optimized.png"},"01.png":{"width":1360,"height":1232,"webpPath":"01.webp","optimizedPath":"01.optimized.png"},"02.optimized.png":{"width":600,"height":99,"webpPath":"02.optimized.webp","optimizedPath":"02.optimized.optimized.png"},"02.png":{"width":1360,"height":224,"webpPath":"02.webp","optimizedPath":"02.optimized.png"},"03.optimized.png":{"width":600,"height":99,"webpPath":"03.optimized.webp","optimizedPath":"03.optimized.optimized.png"},"03.png":{"width":1360,"height":224,"webpPath":"03.webp","optimizedPath":"03.optimized.png"},"04.optimized.png":{"width":600,"height":303,"webpPath":"04.optimized.webp","optimizedPath":"04.optimized.optimized.png"},"04.png":{"width":1360,"height":686,"webpPath":"04.webp","optimizedPath":"04.optimized.png"},"05.optimized.png":{"width":600,"height":636,"webpPath":"05.optimized.webp","optimizedPath":"05.optimized.optimized.png"},"05.png":{"width":1360,"height":1442,"webpPath":"05.webp","optimizedPath":"05.optimized.png"},"06.optimized.png":{"width":600,"height":525,"webpPath":"06.optimized.webp","optimizedPath":"06.optimized.optimized.png"},"06.png":{"width":1360,"height":1190,"webpPath":"06.webp","optimizedPath":"06.optimized.png"},"07.optimized.png":{"width":600,"height":340,"webpPath":"07.optimized.webp","optimizedPath":"07.optimized.optimized.png"},"07.png":{"width":1360,"height":770,"webpPath":"07.webp","optimizedPath":"07.optimized.png"},"08.optimized.png":{"width":600,"height":377,"webpPath":"08.optimized.webp","optimizedPath":"08.optimized.optimized.png"},"08.png":{"width":1360,"height":854,"webpPath":"08.webp","optimizedPath":"08.optimized.png"},"09.optimized.png":{"width":600,"height":601,"webpPath":"09.optimized.webp","optimizedPath":"09.optimized.optimized.png"},"09.png":{"width":1524,"height":1526,"webpPath":"09.webp","optimizedPath":"09.optimized.png"},"10.optimized.png":{"width":600,"height":340,"webpPath":"10.optimized.webp","optimizedPath":"10.optimized.optimized.png"},"10.png":{"width":1360,"height":770,"webpPath":"10.webp","optimizedPath":"10.optimized.png"},"11.optimized.png":{"width":600,"height":284,"webpPath":"11.optimized.webp","optimizedPath":"11.optimized.optimized.png"},"11.png":{"width":1360,"height":644,"webpPath":"11.webp","optimizedPath":"11.optimized.png"},"12.optimized.png":{"width":600,"height":799,"webpPath":"12.optimized.webp","optimizedPath":"12.optimized.optimized.png"},"12.png":{"width":1556,"height":2072,"webpPath":"12.webp","optimizedPath":"12.optimized.png"},"13.optimized.png":{"width":600,"height":321,"webpPath":"13.optimized.webp","optimizedPath":"13.optimized.optimized.png"},"13.png":{"width":1360,"height":728,"webpPath":"13.webp","optimizedPath":"13.optimized.png"},"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"}}},{"content":"\\r\\n**Progressive Web Apps are the ultimate way to create ultra-fast webpages and apps with a mobile-first approach. Engaging for mobile users, PWAs are also an attractive technology for developers as they leverage modern JS frameworks and tech stack, including GraphQL.**\\r\\n\\r\\nThe story of progressive web apps starts with the PWA manifest announced by Google. In a single document, Google listed all the technical requirements and other things that make Progressive Web Apps reliable, fast and engaging. \\r\\n\\r\\nFollowing this list helps developers to build high-quality PWAs step by step, which might be time-consuming and require some knowledge on the edge of web and app development that is not always available in teams.\\r\\n\\r\\n## Ready-to-use solutions for Progressive Web Apps\\r\\n\\r\\nThe other way is to leverage ready-to-use PWA solutions, which are popping out on the market at breakneck speed. Doing so guarantees a faster time-to-market, a bunch of additional modules and support of development.\\r\\n\\r\\nThere at least several solutions that ensure high-quality progressive web apps, such as Deity Falcon, Scandiweb or Vue Storefront, just to name a few. Apart from these independent solutions, leading CMS and eCommerce platform providers are also working on their own integrated PWA solutions (Magento, SAP Hybris).\\r\\n\\r\\nWhich of them supports [GraphQL](https://graphql.org/)? Here\u2019s the list!\\r\\n\\r\\n## PWA solutions supporting GraphQL\\r\\n\\r\\n### [Deity Falcon](https://falcon.deity.io/docs/getting-started/intro)\\r\\nA PWA solution developed in the offices of The Netherlands-based startup - Deity. It is suitable for all sorts of online sites \u2013 webshops, blogs, and bigger platforms. \\r\\n\\r\\n**Frontend base:** *React*  \\r\\n**Integrated backends:** *Magento 2, Wordpress*  \\r\\n**Technologies inside:** *Node.js, GraphQL, React, Apollo, Koa, Webpack, Jest*  \\r\\n**Projects live:** *2*  \\r\\n**Github stars:** *313*  \\r\\n**Github repo:** *https://github.com/deity-io/falcon* \\r\\n\\r\\n### [PWA Studio](https://magento.github.io/pwa-studio/)\\r\\nThis one is more like a set of tools, rather than a ready-to-use solution. Developed by Magento, one of the leading eCommerce platform solutions, it gives a good base to build PWA solutions adjusted to individual business needs. It is still in its alpha phase, with strong support from the Magento community.\\r\\n\\r\\n**Frontend base:** *React*   \\r\\n**Integrated backends:** *Magento*   \\r\\n**Technologies inside:** *Webpack, React, Redux, GraphQL*  \\r\\n**Projects live:** *2*  \\r\\n**Github stars:** *420*  \\r\\n**Github repo:** *https://github.com/magento-research/pwa-studio* \\r\\n\\r\\n\\r\\n### [Scandiweb PWA](https://scandipwa.com/)\\r\\nA PWA solution developed by the Scandiweb agency since 2018. The solution provides a progressive web app for Magento-based stores.\\r\\n\\r\\n**Frontend base:** *React*  \\r\\n**Integrated backends:** *Magento 2*   \\r\\n**Technologies inside:** *Redux, Webpack, React, GraphQL, SCSS*  \\r\\n**Projects live:** *1*  \\r\\n**Github stars:** *35*  \\r\\n**Github repo:** *https://github.com/scandipwa* \\r\\n\\r\\n![VueStorefront example](vuestorefront.png)\\r\\n\\r\\n##### Source: [Example of building a Query in Vue Storefront](https://docs.vuestorefront.io/guide/basics/graphql.html)\\r\\n\\r\\n### [Vue Storefront](https://www.vuestorefront.io/)\\r\\nProbably the fastest-growing open-source PWA solution with strong community support. A PWA solution dedicated to multiple eCommerce platforms with a long list of payment, basket, checkout and other modules crucial to building performant online stores. \\r\\n\\r\\n**Frontend base:** *Vue.js*  \\r\\n**Integrated backends:** *Magento 1, Magento 2, Shopware, Pimcore, CoreShop, WordPress,EpiServer, SpreeCommerce, Odoo ERP, BigCommerce, boilerplate*   \\r\\n**Technologies inside:** *Vue.js, Node.js, ElasticSearch, Webpack, GraphQL*  \\r\\n**Projects live:** *15+*  \\r\\n**Github stars:** *4903*  \\r\\n**Github repo:** *http://github.com/DivanteLtd/vue-storefront* \\r\\n\\r\\n---\\r\\n\\r\\nIf you are looking for a more detailed tech comparison, with middleware, server-side rendering, and test tools, there is an excellent summary of [available PWA solutions](https://divante.com/blog/pwa-solutions-for-ecommerce-comparison/).\\r\\n","data":{"title":"Ready-to-use PWA solutions with GraphQL support","date":"2019-09-10T13:37:00.284Z","image":"gql.png","author":"Ola"},"path":"ready-to-use-pwa-solutions-with-graphql-support","images":{"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"vuestorefront.optimized.png":{"width":600,"height":682,"webpPath":"vuestorefront.optimized.webp","optimizedPath":"vuestorefront.optimized.optimized.png"},"vuestorefront.png":{"width":606,"height":689,"webpPath":"vuestorefront.webp","optimizedPath":"vuestorefront.optimized.png"}}},{"content":"\\r\\nModern frameworks come and go. Some of them manage to become a new standard. With a rise of modern JavaScript libraries like [React](https://reactjs.org/), new approaches to data fetching like GraphQL APIs are becoming more popular. While [Node.js](https://nodejs.org/en/) is still being the most popular technology for [GraphQL](https://graphql.org/) based backend, there are many other options.\\r\\n\\r\\nIf Python is your preferred choice you would be very keen to hear that Django has decent support for [GraphQL](https://graphqleditor.com/). Being more specific [Graphene](https://graphene-python.org/), a product with a goal to ease developers lives by providing a library for building GraphQL APIs. Before we move on let\'s take a look at how it all has started.\\r\\n\\r\\n\\r\\n#### The need for a new approach\\r\\n\\r\\nIn the early 2010s, the IT industry had to face a new challenge. The significant rise of mobile usage shown weaknesses of architecture many big social services where data structures take the form of graphs. The significant increase of mobile usage led to many performances some issues with low-powered devices and sloppy networks and the development teams discovered that REST isn\u2019t optimal to deal with this kind of issue.\\r\\n\\r\\n\\r\\n***\\"Adapt or die\\"***\\r\\n\\r\\nIdentifying this as a crucial part of mobile app performance, Facebook started working on a solution to meet their newsfeed\'s data management requirements, which was later on open-sourced under a name GraphQL.  In parallel, a couple of other companies identified the same problem with their data fetching model. Many of them abandoned their projects after GraphQL was made publicly available and decided to adopt this great tech. Unlike others, Netflix continued to work on their own REST alternative [Falcor](https://github.com/Netflix/falcor), which they decided to open-sourced as well.\\r\\n\\r\\n#### What\'s a GraphQL\\r\\n\\r\\nGraphQL is a query language for APIs. It\u2019s becoming more popular because, unlike to REST, it offers smarter & a lot more elastic data fetching.\\r\\n\\r\\nLet\'s take s look at simple GraphQL query:\\r\\n```\\r\\nquery {\\r\\n  user {\\r\\n    name\\r\\n  }\\r\\n}\\r\\n```\\r\\nand a server response it would return:\\r\\n```\\r\\n{\\r\\n  \\"user\\": {\\r\\n    \\"name\\": \\"Tomek Poniatowicz\\",\\r\\n   }\\r\\n}\\r\\n```\\r\\n\\r\\nNow imagine that you are fetching data for a Facebook feed, where you have a user, posts of that user\'s friends, comments for those posts made by other users, etc. There is a lot of data that need to be requested, which may lead to over/under-fetching problems in REST. Since GraphQL gives power to the client to fetch the needed data only, nothing slows down, as it\'s very simple to just add a new field to a query.\\r\\n\\r\\n\\r\\n#### Django integration for Graphene\\r\\n\\r\\nWe need to install `graphene-django` library and include it in our `settings.py` file\\r\\n\\r\\n```\\r\\npip install \\"graphene-django>=2.0\\"\\r\\n```\\r\\n![python settings](1.png)\\r\\n\\r\\nand set up a GraphQL endpoint in Django app\\r\\n\\r\\n![settup graphql endpoint](2.png)\\r\\n\\r\\nNow let\'s prepare a simple Django data model in our `app/models.py` file\\r\\nand define our schema in `app/schema.py`:\\r\\n\\r\\n![django data model](3.png)\\r\\nand\\r\\n\\r\\n![define schema](4.png)\\r\\n\\r\\nand we are all set. Now you can query your simple schema:\\r\\n\\r\\n![query simple schema](5.png)\\r\\n\\r\\n\\r\\n#### The main benefits of using GraphQL\\r\\n\\r\\nThere\u2019s a lot of hype on GraphQL and debate on [GraphQL vs REST](https://blog.graphqleditor.com/graphql-vs-rest-performance/).\\r\\nThe main benefit of using GraphQL is the fact that it\'s way more elastic in terms of fetching data than REST, which results in fewer round-trips to the server. GraphQL makes problems of under & over-fetching disappear. \\r\\nAs GraphQL is in an early stage of adoption, it has some weaknesses (i.e caching), but it\'s gaining a lot of momentum & becoming a force to reckon.\\r\\n\\r\\n","data":{"title":"Getting started with GraphQL in Python","date":"2019-08-31T13:37:00.284Z","image":"gqpy.png","author":"Tomek"},"path":"getting-started-with-graphql-in-python","images":{"1.optimized.png":{"width":600,"height":171,"webpPath":"1.optimized.webp","optimizedPath":"1.optimized.optimized.png"},"1.png":{"width":1584,"height":451,"webpPath":"1.webp","optimizedPath":"1.optimized.png"},"2.optimized.png":{"width":600,"height":155,"webpPath":"2.optimized.webp","optimizedPath":"2.optimized.optimized.png"},"2.png":{"width":1584,"height":408,"webpPath":"2.webp","optimizedPath":"2.optimized.png"},"3.optimized.png":{"width":600,"height":139,"webpPath":"3.optimized.webp","optimizedPath":"3.optimized.optimized.png"},"3.png":{"width":1584,"height":367,"webpPath":"3.webp","optimizedPath":"3.optimized.png"},"4.optimized.png":{"width":600,"height":249,"webpPath":"4.optimized.webp","optimizedPath":"4.optimized.optimized.png"},"4.png":{"width":1582,"height":657,"webpPath":"4.webp","optimizedPath":"4.optimized.png"},"5.optimized.png":{"width":600,"height":191,"webpPath":"5.optimized.webp","optimizedPath":"5.optimized.optimized.png"},"5.png":{"width":1584,"height":504,"webpPath":"5.webp","optimizedPath":"5.optimized.png"},"gqlpy.optimized.png":{"width":600,"height":252,"webpPath":"gqlpy.optimized.webp","optimizedPath":"gqlpy.optimized.optimized.png"},"gqlpy.png":{"width":1000,"height":420,"webpPath":"gqlpy.webp","optimizedPath":"gqlpy.optimized.png"}}},{"content":"","data":{"title":"Top GraphQL tutorials reviewed 2019","date":"2019-08-28T11:20:00.284Z","image":"cover.png","author":"Robert"},"path":"top-graphql-tutorials-reviewed-2019","images":{"cover.optimized.png":{"width":600,"height":252,"webpPath":"cover.optimized.webp","optimizedPath":"cover.optimized.optimized.png"},"cover.png":{"width":1000,"height":420,"webpPath":"cover.webp","optimizedPath":"cover.optimized.png"}}},{"content":"\\r\\nPython is one of the most popular languages today with the biggest community of all and excellent libraries. People love it for beautiful code, rapid development and sometimes call the language interactive. In latest 3.8 Python version we can find have several outstanding features. This article will describe some of the new features of Python 3.8.\\r\\n\\r\\n#1. Positional-only parameters (/)\\r\\n\\r\\nIf you want to create a Python function that allows parameters, then you can pass the arguments by position or by keyword.\\r\\n\\r\\nBut what if:\\r\\n\\r\\n- We want to limit the callers of our API to only call our function by passing in parameters by position? \\r\\n- Our parameter names do not make meaning to the external world? \\r\\n- Or we might want to rename the parameters in the future? \\r\\n- ...And we want to make our API backwards compatible?\\r\\n\\r\\nThen, positional-only parameter functionality \u201c/\u201d solves it. Let\'s check our example:\\r\\n\\r\\n```\\r\\ndef add(x, y, z, c=None, /):\\r\\n    a = x+y+z\\r\\n    if c is not None:\\r\\n        a = a+c\\r\\n    return a\\r\\n```\\r\\n\\r\\nThe function \u201cadd\u201d accepts three necessary parameters: x,y and z, and an optional parameter c. The last parameter \u201c/\u201d means that the parameters of the function must be specified positionally.  We cannot call the function by passing in parameters by keyword.\\r\\n\\r\\n- Add(1,2,3) and add(1,2,3,4) are valid calls.\\r\\n- Add(a=1,b=2,c=3) or add(1,2,3,d=4) are all invalid calls.\\r\\n\\r\\nResult of the \u201c/\u201d parameter means that the function allows positional-only parameters and thus the arguments must be mapped to the parameters based solely on their position. \\r\\n\\r\\nRead more here on new features in Python 3.8 [here](https://docs.python.org/3.8/whatsnew/3.8.html).\\r\\n\\r\\n#2. Assignment Expressions \\":=\\" \\r\\n\\r\\nAlso known as walrus operator. It allocates values to variables as part of an expression. There\'s no need to initialize the variables upfront.\\r\\n\\r\\nConsider this example:\\r\\n\\r\\n```\\r\\nif (variable_a := get_input()) is not None:\\r\\n print(variable_a) #exists now\\r\\n perform_action(variable_a);\\r\\n```\\r\\n\\r\\nChecking the sample above variable_a didn\'t exist before the line was performed. The walrus operator \\":=\\" declared and initialized the variable \u201cvariable_a\u201d. The return of the function \u201cget_input()\u201d is used to attach a value to the variable. As a result, we can now print the value of the variable_a variable. This feature is possible in statement forms and list comprehensions\\r\\n\\r\\nThere are two important points to note. First, assure the designation of the variable is parenthesized. Unparenthesized assignment expressions are forbidden at the top level of an expression statement:\\r\\n\\r\\n```\\r\\nvariable_a := get_input() #Invalid\\r\\n(variable_a := get_input()) #Valid but it is not recommended\\r\\n```\\r\\n\\r\\nSecond, = and := are not the same, and the preference around the commas is different. Check this example below:\\r\\n\\r\\n```\\r\\nvariable_a = a, b, c # Sets my_variable to (a, b, c)\\r\\n(variable_a := a, b, c)  # Sets my_variable to a\\r\\n```\\r\\n\\r\\nRead more here on new features in Python 3.8 [here](https://docs.python.org/3.8/whatsnew/3.8.html).\\r\\n\\r\\n#3. \u201cfromisocalendar\u201d has new date and datetime constructors\\r\\n\\r\\nNew constructors date and datetime have been added to return the ISO calendar object:\\r\\n\\r\\ndatetime.fromisocalendar(year, week, day)\\r\\n\\r\\nThis is the inverse of the function: datetime.isocalendar(). Essentially, it takes in the year, week and day and returns the corresponding ISO calendar date-time object.\\r\\n\\r\\ndate.fromisocalendar(year, week, day)\\r\\n\\r\\nThis is the inverse of the function: date.isocalendar(). Naturally, it takes in the year, week and day and returns the corresponding ISO calendar date object.\\r\\n\\r\\n\\r\\nRead more here on new features in Python 3.8 [here](https://docs.python.org/3.8/whatsnew/3.8.html).\\r\\n\\r\\n#4. For Debugging Ease, f-strings now support =\\r\\n\\r\\nThis is an enhancement to the f-strings. The specifier \u201c=\u201d can be joined to the f-strings now.\\r\\n\\r\\nf -strings are in the form of f\'{expr=}\' Notice the \u2018=\u2019. The equal sign primarily evaluates the expression and prints the result too.\\r\\n\\r\\nLet\'s check an example. Assume there are two variables \u201ca \u201dand \u201cb\u201d, and we want to print \u201ca-b\u201d along with the result. We can use the f-strings=\\r\\n\\r\\n```\\r\\na = 100\\r\\nb = 50\\r\\nprint(f\'{input-output=}\')\\r\\n```\\r\\n\\r\\nThe result would now print a-b=50.\\r\\n\\r\\nIt could make the code neater and you don\'t need to copy the formula on the right-hand side of the \u201c=\u201d to evaluate it. The side effect is that it can be used extensively during debugging.\\r\\n\\r\\nRead more here on new features in Python 3.8 [here](https://docs.python.org/3.8/whatsnew/3.8.html).\\r\\n","data":{"title":"Top new features in Python 3.8","date":"2019-07-26T11:11:00.284Z","image":"cover.png","author":"Robert"},"path":"top-new-features-python-38","images":{"cover.optimized.png":{"width":600,"height":252,"webpPath":"cover.optimized.webp","optimizedPath":"cover.optimized.optimized.png"},"cover.png":{"width":1000,"height":420,"webpPath":"cover.webp","optimizedPath":"cover.optimized.png"}}},{"content":"\\r\\n![](./pokemon-graphql-javascript.png)\\r\\n\\r\\nFirst of all, I want to tell you I created the tool `graphql-zeus` it is GraphQL client on top of the fetch function. What it means? Basically, you point Zeus to the GraphQL schema and it generates libraries for you.\\r\\n\\r\\nSounds fun? It is even more fun because you don\'t have to know `gql` the query language of GraphQL because Zeus provides you with its own GraphQL query like autocompleted syntax.\\r\\n\\r\\nCreate a project folder:\\r\\n```sh\\r\\nmkdir zeus-tutorial\\r\\ncd zeus-tutorial\\r\\n```\\r\\n\\r\\nLet\'s start then. First, you will have to init a new npm package:\\r\\n```sh\\r\\nnpm init\\r\\n```\\r\\nclick enter enter enter etc.\\r\\n\\r\\nInstall dev dependencies.\\r\\n```sh\\r\\nnpm i -D @babel/core @babel/node @babel/preset-env\\r\\n```\\r\\n\\r\\nInstall dependencies.\\r\\n```sh\\r\\nnpm i node-fetch\\r\\n```\\r\\n\\r\\n\\r\\nThen Create .babelrc file\\r\\n```sh\\r\\necho \'{ \\"presets\\": [\\"@babel/preset-env\\"] }\' >> .babelrc\\r\\n```\\r\\n\\r\\nThen Create the src directory\\r\\n```sh\\r\\nmkdir src\\r\\n```\\r\\nand create a `index.js` file\\r\\n```sh\\r\\ntouch src/index.js\\r\\n```\\r\\n\\r\\nAdd script to your package.json\\r\\n```json\\r\\n{\\r\\n  \\"scripts\\": {\\r\\n    \\"start\\": \\"babel-node src/index.js\\"\\r\\n  },\\r\\n}\\r\\n```\\r\\n\\r\\nYour whole package.json should look like this:\\r\\n```json\\r\\n{\\r\\n  \\"name\\": \\"zeustutorial\\",\\r\\n  \\"version\\": \\"1.0.0\\",\\r\\n  \\"description\\": \\"\\",\\r\\n  \\"main\\": \\"main/index.js\\",\\r\\n  \\"scripts\\": {\\r\\n    \\"start\\": \\"babel-node src/index.js\\"\\r\\n  },\\r\\n  \\"author\\": \\"Aexol <aexol@aexol.com> (http://aexol.com)\\",\\r\\n  \\"license\\": \\"ISC\\",\\r\\n  \\"devDependencies\\": {\\r\\n    \\"@babel/core\\": \\"^7.5.5\\",\\r\\n    \\"@babel/node\\": \\"^7.5.5\\",\\r\\n    \\"@babel/preset-env\\": \\"^7.5.5\\"\\r\\n  },\\r\\n  \\"dependencies\\": {\\r\\n    \\"node-fetch\\": \\"^2.6.0\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nNow it is high time to generate some code from GraphQL. Go ahead install `graphql-zeus`.\\r\\n\\r\\ninstall `graphql-zeus`\\r\\n```sh\\r\\nnpm i -g graphql-zeus\\r\\n```\\r\\n\\r\\nGenerate files from pokemon schema\\r\\n```sh\\r\\nzeus https://graphql-pokemon.now.sh/ ./src\\r\\n```\\r\\n\\r\\nHurray! You should have definition files generated in ./src folder.\\r\\nNow go and open some editor of choice - I prefer VSCode but it is up to you. I can guarantee it works with VSCode though.\\r\\n\\r\\nOpen package directory with editor. Open `src/index.js`\\r\\nIn the first part of the series, we will write simple query loading first ten pokemon names and images and display it in the terminal.\\r\\n\\r\\n```js\\r\\nimport { Chain } from \\"./graphql-zeus\\";\\r\\n\\r\\nconst chain = Chain(\\"https://graphql-pokemon.now.sh\\");\\r\\n\\r\\nconst run = async () => {\\r\\n  const { pokemons } = await chain.Query({\\r\\n    pokemons: [\\r\\n      {\\r\\n        first: 10\\r\\n      },\\r\\n      {\\r\\n        name: true,\\r\\n        image: true\\r\\n      }\\r\\n    ]\\r\\n  });\\r\\n  console.log(pokemons);\\r\\n  return pokemons;\\r\\n};\\r\\nrun();\\r\\n\\r\\n```\\r\\n\\r\\nIn zeus everything is typed so when you write `chain.` You should see Query and when you open `{}` parentheses you should see all the possible queries. \\r\\n\\r\\nIn zeus everything is autocompleted so you don\'t have to learn `gql` syntax.\\r\\n\\r\\nAnd run it with being in the project folder\\r\\n```sh\\r\\nnpm run start\\r\\n```\\r\\n\\r\\nYou should see the first ten pokemon in the output! Congratulations you\'ve just done your first GraphQL query.\\r\\n\\r\\n![](./result.png)\\r\\n\\r\\n\\r\\n## Support\\r\\n\\r\\nIf you want to support me creating `graphql-zeus` visit\\r\\n\\r\\n[Github Zeus Repo](https://github.com/graphql-editor/graphql-zeus)\\r\\n\\r\\nand leave a star. That\'s it. ","data":{"title":"Beginners Guide to communication with GraphQL Server in Javascript with Pokemon Schema","date":"2019-07-25T10:23:04.284Z","author":"Artur","image":"pokemon-graphql-javascript.png"},"path":"beginners-guide-to-communication-with-graphql-server-in-javascript-with-pokemon-schema","images":{"pokemon-graphql-javascript.optimized.png":{"width":600,"height":252,"webpPath":"pokemon-graphql-javascript.optimized.webp","optimizedPath":"pokemon-graphql-javascript.optimized.optimized.png"},"pokemon-graphql-javascript.png":{"width":1000,"height":420,"webpPath":"pokemon-graphql-javascript.webp","optimizedPath":"pokemon-graphql-javascript.optimized.png"},"result.optimized.png":{"width":600,"height":488,"webpPath":"result.optimized.webp","optimizedPath":"result.optimized.optimized.png"},"result.png":{"width":1590,"height":1292,"webpPath":"result.webp","optimizedPath":"result.optimized.png"}}},{"content":"\\r\\n[GraphQL](https://graphqleditor.com/) is a query language for APIs that was originally built by Facebook, it describes how to ask & fetch the data from the server to the client, what\'s unique the response format is described in the query and defined by the client rather than the server. \\r\\n\\r\\nBy the end of 2018, the [npm Inc.](https://www.npmjs.com/) published its [annual prediction](https://blog.graphqleditor.com/javascript-predictions-for-2019-by-npm/) about the insights and predictions about JavaScript for 2019, where they mentioned that:\\r\\n\\r\\n> *There is a strong likelihood that developers will use GraphQL in new projects in 2019 and the GraphQL will become a technical force to reckon in 2019.*\\r\\n\\r\\nGuess what? They were right! More and more companies are adopting GraphQL with tremendous success!\\r\\n\\r\\n#### Why Companies are Adopting GraphQL?\\r\\n\\r\\n\\r\\nThe survey made by one of [the GraphQL adopting companies](https://medium.com/novvum/introducing-the-graphql-survey-series-insight-from-successful-graphql-adopters-3a83ff0a7e39) asked the CTOs and lead developers of a variety of companies about their experience with the implementation of [GraphQL](https://graphqleditor.com/) & its results. They made a great job gathering data from both top [companies like Uber, Paypal](https://graphql.org/users/), as well as those with smaller/medium development teams ranging from 1 to 100+ software engineers. \\r\\n\\r\\nThe result of the survey gives us insights on:\\r\\n\\r\\n- why they have chosen to **implement GraphQL**,\\r\\n- what **obstacles they faced** during the transition process,\\r\\n- what **main benefits** they were able to identify after the successful implementation.\\r\\n\\r\\nLet\'s take a look at the questions the developers had to face.\\r\\n\\r\\n\\r\\n#### Questions & answers\\r\\n\\r\\nWell, technically these are not questions, but the survey asked responders to rank reasons why they decided to pivot in a scale from 1\u20136, where 1 is most important reason & 6 is least important. The makers of the survey identified six main benefits (*Development Velocity, Modularity, Scalability, Performance, Reliability, Security*), and asked how strongly they agree/disagree with the following statements:\\r\\n\\r\\n> *We were able to speed up our development using GraphQL*\\r\\n>\\r\\n> *We were able to scale our projects faster with GraphQL*\\r\\n>\\r\\n> *It was easier to unify our APIs (e.g., Microservices, legacy endpoints, third-party services, etc.)*\\r\\n>\\r\\n> *There has been an increase in performance using GraphQL*\\r\\n>\\r\\n> *Our architecture is more stable, with decreased downtime, and fewer errors*\\r\\n\\r\\nHere are the results:\\r\\n\\r\\n![Chart presenting why companies adopted GraphQL](why.png)\\r\\n\\r\\n![Chart presenting benefits of implementing GraphQL](benefits.png)\\r\\n\\r\\n###### Source: [Movvum @medium](https://medium.com/novvum/why-companies-of-various-sizes-chose-graphql-and-what-they-experienced-7a9d47d06bee)\\r\\n\\r\\nThe interpretation of the survey\'s results was summed up closed in the table below. The most important thought is that GraphQL managed to provide what teams were looking for that small to medium as well as large enterprise teams. \\r\\n\\r\\n|Team size| What they wanted to achieve|What they\'ve achived|\\r\\n|---|---|---|\\r\\n|50-100 & 100+ devs|Faster development speed, better scalability, better modularity|Faster development, better scalability|\\r\\n|10-50 devs|Better modularity, higher performance|Faster development, better infrastructure|\\r\\n|up to 10 devs|Faster development, better modularity|Faster development, better scalability|\\r\\n\\r\\n\\r\\n\\r\\n#### Bonus: Get inspired!\\r\\n\\r\\nIf somehow you haven\'t seen it make sure to check out the documentary about the GraphQL origins and how it became what it is now. A great production starring co-creators of GraphQL: Lee Byron, Dan Schafer, and Nick Schrock as well as other big names from the community.\\r\\n\\r\\n> *GraphQL: The Documentary\\" explores the story of why and how GraphQL came to be and the impact it\'s having on big tech companies worldwide, including Facebook, Twitter, Airbnb & Github.*\\r\\n\\r\\n[![GraphQL: The Documentary Trailer](graphql.png)](https://www.youtube.com/watch?v=783ccP__No8)","data":{"title":"Why development teams are adopting GraphQL?","date":"2019-07-23T13:37:00.284Z","image":"tographql.png","author":"Tomek"},"path":"why-companies-adopt-graphql","images":{"benefits.optimized.png":{"width":600,"height":387,"webpPath":"benefits.optimized.webp","optimizedPath":"benefits.optimized.optimized.png"},"benefits.png":{"width":700,"height":452,"webpPath":"benefits.webp","optimizedPath":"benefits.optimized.png"},"graphql.optimized.png":{"width":600,"height":338,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":974,"height":548,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"tographql.optimized.png":{"width":600,"height":252,"webpPath":"tographql.optimized.webp","optimizedPath":"tographql.optimized.optimized.png"},"tographql.png":{"width":1000,"height":420,"webpPath":"tographql.webp","optimizedPath":"tographql.optimized.png"},"why.optimized.png":{"width":600,"height":388,"webpPath":"why.optimized.webp","optimizedPath":"why.optimized.optimized.png"},"why.png":{"width":700,"height":453,"webpPath":"why.webp","optimizedPath":"why.optimized.png"}}},{"content":"\\r\\nThere has been a lot of buzz in the web development world around GraphQL lately and for good reason!\\r\\n\\r\\n[GraphQL](https://graphql.org/) is a new query language for APIs and a server-side runtime for executing queries by using a **type system** you define for the data, so basically a syntax that describes how to ask for data and load it from a server to a client. \\r\\n\\r\\n## Why all the buzz?\\r\\n\\r\\nThe answer is simple:\\r\\n> It\'s all about **the development speed**.\\r\\n\\r\\nThe main reason why companies started using GraphQL is that it promises to speed up your API development, what\'s more, it manages to deliver! \\r\\n\\r\\nIn of the [surveys](https://medium.com/novvum/introducing-the-graphql-survey-series-insight-from-successful-graphql-adopters-3a83ff0a7e39?) directed to CTOs and lead developers of a variety of teams ranging from 1 to 100+ engineers (among which we can find tech giants like Uber or Paypal) about their perception of GraphQL implementation in their teams almost all companies felt GraphQL delivered on their expectations.\\r\\n\\r\\nLet me introduce you three useful GrapphQL code generators to speed your development:\\r\\n\\r\\n\\r\\n### 1. GraphQL Zeus\\r\\n\\r\\n> *[Zeus](https://github.com/graphql-editor/graphql-zeus), son of Kronos, father of [Apollo](https://www.apollographql.com/).*\\r\\n\\r\\nA simple tool working in [Node.js](https://nodejs.org/en/) & browser to generate an auto-complete client library for Javascript or Typescript. The unique thing about GraphQL Zeus is that it creates its own specification along with type-safe completion of request & responses.\\r\\n\\r\\n![graphql-zeus logo](zeus.gif)\\r\\n[![graphql-zeus in action](https://thepracticaldev.s3.amazonaws.com/i/llmzhwdu11j4qu6esw4d.gif)](https://github.com/graphql-editor/graphql-zeus)\\r\\n\\r\\n\\r\\n### 2. Prisma GraphQLGen\\r\\n\\r\\nThe tool from Prisma team provides a type-safe environment which helps maintain confidence about your code. As creators mention the motivation behind it was to\\r\\n> *\\"(...) leverage the strongly typed GraphQL schema with the goal of making your backend type-safe while reducing the need to write boilerplate through code generation\\".*\\r\\n\\r\\nThe `graphqlgen` generates & scaffolds type-safe resolvers based on your GraphQL Schema in TypeScript & Flow.\\r\\n\\r\\n[![GraphQLGen logo](prismacodegen.png)](https://github.com/prisma/graphqlgen)\\r\\n\\r\\n \\r\\n\\r\\n### 3. GraphQL Code Generator\\r\\n\\r\\n[GraphQL Code Generator](https://graphql-code-generator.com/) is a tool that generates code out of your GraphQL schema, supporting custom plugins & templates, so regardless of the language that you\'re using (*i.e. TypeScript, React, Angular*) GraphQL Code Generator will be a huge help.\\r\\n\\r\\n[![GraphQL Code Generator logo](gqlcodegenerator.png)](https://graphql-code-generator.com/)\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Top 3 GraphQL code generators","date":"2019-07-18T13:37:00.284Z","image":"graphqlcodegens.png","author":"Tomek"},"path":"top3-graphql-code-generators","images":{"gqlcodegenerator.optimized.png":{"width":600,"height":240,"webpPath":"gqlcodegenerator.optimized.webp","optimizedPath":"gqlcodegenerator.optimized.optimized.png"},"gqlcodegenerator.png":{"width":1760,"height":704,"webpPath":"gqlcodegenerator.webp","optimizedPath":"gqlcodegenerator.optimized.png"},"graphqlcodegens.optimized.png":{"width":600,"height":252,"webpPath":"graphqlcodegens.optimized.webp","optimizedPath":"graphqlcodegens.optimized.optimized.png"},"graphqlcodegens.png":{"width":1000,"height":420,"webpPath":"graphqlcodegens.webp","optimizedPath":"graphqlcodegens.optimized.png"},"prismacodegen.optimized.png":{"width":600,"height":251,"webpPath":"prismacodegen.optimized.webp","optimizedPath":"prismacodegen.optimized.optimized.png"},"prismacodegen.png":{"width":815,"height":341,"webpPath":"prismacodegen.webp","optimizedPath":"prismacodegen.optimized.png"},"zeus.gif":{"width":822,"height":400,"webpPath":"zeus.webp","optimizedPath":"zeus.optimized.gif.png"},"zeus.optimized.gif.png":{"width":600,"height":292,"webpPath":"zeus.optimized.gif.webp","optimizedPath":"zeus.optimized.gif.optimized.png"}}},{"content":"\\r\\n\\r\\n[Schema](https://blog.graphqleditor.com/graphql-schemas-and-types-part-1/) is the most important part of any [GraphQL](https://graphql.org/learn/) implementation. Schema is a centerpiece of any GraphQL service and defines the data-sets that can be queried by the client.\\r\\n\\r\\n#### What\'s a schema stitching?\\r\\nImagine having a project where multiple teams are involved in each team:\\r\\n- handles different aspects crucial to that service, \\r\\n- has to work on the schema to make sure that their part of the project would work as expected,\\r\\n- must make sure that everything would work properly as a whole.\\r\\n\\r\\nCooperating on a huge project schema might be confusing...\\r\\n\\r\\n[![What\'s going on in this schema](github.gif)](https://graphqleditor.com/)\\r\\n\\r\\n###### A piece of [GitHub\'s schema](https://developer.github.com/v4/) containing 9182 lines of code in total!\\r\\n\\r\\nSchema stitching is a process of merging multiple GraphQL schemas into one that can be queried. It\u2019s an incredibly useful approach when it comes to building projects that require having both, unified & transparent access to a data split across multiple APIs (even without understanding where exactly it\u2019s located). It can be also used to customize an existing GraphQL API like adding custom resolvers or overriding existing ones of third-party [GraphQL service](https://graphqleditor.com/) or adding more fields to an existing type whose data comes from another data source.\\r\\n\\r\\n[![Two schemas merged](two-schemas.png)](https://graphqleditor.com/)\\r\\n\\r\\n#### Performing a schema stitching can cause troubles\\r\\n\\r\\nAlthough putting two schemas into one in a way where there are no name collisions seems quite simple, but that\'s not a real schema stitching. What we want to achieve is one consistent schema, merged from multiple underlying GraphQL APIs. That\'s a way more difficult, but what if a told you that there is an app for that?\\r\\n\\r\\n\\r\\n#### A better way\\r\\n\\r\\nThe latest release of [GraphQL Editor](https://graphqleditor.com/) introduced an easy way to collaborate on schemas. All we need to do is:\\r\\n\\r\\n**1. Add two or more schemas to our account - you can load them from URL or .gql file**\\r\\n\\r\\n![Add some schemas to GraphQL Editor](import-schema.png)\\r\\n\\r\\n**2. Initiate a new project**\\r\\n![GraphQL Editor](create.png)\\r\\n\\r\\n**3. Pick schemas we want to have access to in our newly generated schema from the list & create a project**\\r\\n![Stitching Two Schemas in GraphQL Editor](stitch.png)\\r\\n\\r\\n... **and that\'s it!**\\r\\n\\r\\nAs long as we have managed to avoid conflicts between our underlying schemas, we should have access to all their elements in our newly generated project \ud83d\udc4c\\r\\n\\r\\n\\r\\n![Now you have access to all elements of merged schema](access-in-new-schema.png)\\r\\n","data":{"title":"A better way to stitch GraphQL schemas","date":"2019-07-11T13:37:00.284Z","image":"schemastitching.png","author":"Tomek"},"path":"graphql-schema-stitching","images":{"access-in-new-schema.optimized.png":{"width":600,"height":402,"webpPath":"access-in-new-schema.optimized.webp","optimizedPath":"access-in-new-schema.optimized.optimized.png"},"access-in-new-schema.png":{"width":2088,"height":1400,"webpPath":"access-in-new-schema.webp","optimizedPath":"access-in-new-schema.optimized.png"},"create-new-project.optimized.png":{"width":600,"height":358,"webpPath":"create-new-project.optimized.webp","optimizedPath":"create-new-project.optimized.optimized.png"},"create-new-project.png":{"width":2088,"height":1246,"webpPath":"create-new-project.webp","optimizedPath":"create-new-project.optimized.png"},"create.optimized.png":{"width":600,"height":358,"webpPath":"create.optimized.webp","optimizedPath":"create.optimized.optimized.png"},"create.png":{"width":880,"height":525,"webpPath":"create.webp","optimizedPath":"create.optimized.png"},"github.optimized.gif.png":{"width":600,"height":252,"webpPath":"github.optimized.gif.webp","optimizedPath":"github.optimized.gif.optimized.png"},"import-schema.optimized.png":{"width":600,"height":402,"webpPath":"import-schema.optimized.webp","optimizedPath":"import-schema.optimized.optimized.png"},"import-schema.png":{"width":2088,"height":1400,"webpPath":"import-schema.webp","optimizedPath":"import-schema.optimized.png"},"schemastitching.optimized.png":{"width":600,"height":252,"webpPath":"schemastitching.optimized.webp","optimizedPath":"schemastitching.optimized.optimized.png"},"schemastitching.png":{"width":1000,"height":420,"webpPath":"schemastitching.webp","optimizedPath":"schemastitching.optimized.png"},"stitch.optimized.png":{"width":600,"height":358,"webpPath":"stitch.optimized.webp","optimizedPath":"stitch.optimized.optimized.png"},"stitch.png":{"width":2088,"height":1246,"webpPath":"stitch.webp","optimizedPath":"stitch.optimized.png"},"two-schemas.optimized.png":{"width":600,"height":358,"webpPath":"two-schemas.optimized.webp","optimizedPath":"two-schemas.optimized.optimized.png"},"two-schemas.png":{"width":2088,"height":1246,"webpPath":"two-schemas.webp","optimizedPath":"two-schemas.optimized.png"}}},{"content":"\\r\\n[GraphQL](https://graphql.org/) is a query language for APIs. It\'s becoming more popular because of the many benefits it offers compared to REST APIs, of which the most important one is smarter data fetching.\\r\\n\\r\\nThe querying model offered by GraphQL is showing its real power when it comes to working with large APIs. \\r\\n\\r\\n## GraphQL vs REST\\r\\n\\r\\nGraphQL allows to specify what data we need in a query and that\'s what\'s going to be included in a response \u2013 nothing more, nothing less, just the data we asked for in a single request. On the other hand, when fetching for the same data with REST we would end up with multiple REST roundtrips ...\\r\\n\\r\\n![GraphQL vs REST](graphqlvsrest.png)\\r\\n###### Source: [blog.apollographql.com](https://blog.apollographql.com/graphql-vs-rest-5d425123e34b)\\r\\n\\r\\n ... or imagine it this way:\\r\\n\\r\\n![REST vs GraphQL](graphqlcity.png)\\r\\n\\r\\n###### Source: [crystallize.com](https://crystallize.com/comics/rest-vs-graphql)\\r\\n\\r\\n## GraphQL in Postman\\r\\n\\r\\n[Postman](https://www.getpostman.com/) joins the group of companies acknowledging the GraphQL qualities and has recently [announced the support for GraphQL](https://blog.getpostman.com/2019/06/18/postman-v7-2-supports-graphql/) in their service. The latest release of Postman v7.2 enables:\\r\\n\\r\\n- sending GraphQL queries in the request body,\\r\\n- GraphQL variables,\\r\\n- GraphQL query autocompletion.\\r\\n\\r\\nThis is a great complement to the previous update which introduced schema support, all that combined makes it possible to create & store GraphQL schemas directly in Postman itself!\\r\\n\\r\\n\\r\\n![GraphQL BETA in Postman](graphqlpostman.png)\\r\\n\\r\\n###### Source: [blog.getpostman.com](https://blog.getpostman.com/2019/06/18/postman-v7-2-supports-graphql/)","data":{"title":"Postman now supports GraphQL!","date":"2019-06-26T13:37:00.284Z","image":"postmangraphql.png","author":"Tomek"},"path":"graphql-postman","images":{"graphqlcity.optimized.png":{"width":600,"height":156,"webpPath":"graphqlcity.optimized.webp","optimizedPath":"graphqlcity.optimized.optimized.png"},"graphqlcity.png":{"width":1294,"height":337,"webpPath":"graphqlcity.webp","optimizedPath":"graphqlcity.optimized.png"},"graphqlpostman.optimized.png":{"width":600,"height":378,"webpPath":"graphqlpostman.optimized.webp","optimizedPath":"graphqlpostman.optimized.optimized.png"},"graphqlpostman.png":{"width":1024,"height":645,"webpPath":"graphqlpostman.webp","optimizedPath":"graphqlpostman.optimized.png"},"graphqlvsrest.optimized.png":{"width":600,"height":300,"webpPath":"graphqlvsrest.optimized.webp","optimizedPath":"graphqlvsrest.optimized.optimized.png"},"graphqlvsrest.png":{"width":800,"height":400,"webpPath":"graphqlvsrest.webp","optimizedPath":"graphqlvsrest.optimized.png"},"postmangraphql.optimized.png":{"width":600,"height":252,"webpPath":"postmangraphql.optimized.webp","optimizedPath":"postmangraphql.optimized.optimized.png"},"postmangraphql.png":{"width":1000,"height":420,"webpPath":"postmangraphql.webp","optimizedPath":"postmangraphql.optimized.png"}}},{"content":"\\r\\nI recently came across an interesting library for GraphQL. Strawberry is a new GraphQL library for Python 3, inspired by dataclasses. An initial version of Strawberry has been released on GitHub. To follow the project, you can sign up to get updates on the Strawberry site or github. Links below:\\r\\n\\r\\n![](strawberry.png)\\r\\n\\r\\nhttps://strawberry.rocks/\\r\\n\\r\\nStrawberry is created by [patrick91](https://twitter.com/patrick91) who is also an organizer of @pyconit. It was originally announced during Python Pizza Berlin.\\r\\n\\r\\n![](strawberry2.png)\\r\\n\\r\\n#PyPi release and demo\\r\\n\\r\\nAlpha version on PyPI: https://pypi.org/project/strawberry-graphql\\r\\nDemo on Heroku using Starlette: https://demo.strawberry.rocks/graphql\\r\\n\\r\\n#Installation\\r\\n\\r\\n```\\r\\npip install strawberry-graphql\\r\\n```\\r\\n\\r\\nGetting Started\\r\\n\\r\\nCreate a file called app.py with the following code:\\r\\n\\r\\n```\\r\\nimport strawberry\\r\\n\\r\\n\\r\\n@strawberry.type\\r\\nclass User:\\r\\n    name: str\\r\\n    age: int\\r\\n\\r\\n\\r\\n@strawberry.type\\r\\nclass Query:\\r\\n    @strawberry.field\\r\\n    def user(self, info) -> User:\\r\\n        return User(name=\\"Patrick\\", age=100)\\r\\n\\r\\n\\r\\nschema = strawberry.Schema(query=Query)\\r\\n```\\r\\n\\r\\nThis will create a GraphQL schema defining a User type and a single query field user that will return a hard-coded user.\\r\\n\\r\\nTo run the debug server run the following command:\\r\\n\\r\\n```\\r\\nstrawberry run server app\\r\\n```\\r\\n\\r\\nOpen the debug server by clicking on the following link: http://0.0.0.0:8000/graphql\\r\\n\\r\\nThis will open a GraphQL playground where you can test the API.\\r\\n\\r\\n{% github strawberry-graphql/strawberry %}\\r\\n","data":{"title":"GraphQL library for Python - Strawberry","date":"2019-06-19T14:11:00.284Z","author":"Robert"},"path":"graphql-library-for-python-strawberry","images":{"strawberry.optimized.png":{"width":600,"height":723,"webpPath":"strawberry.optimized.webp","optimizedPath":"strawberry.optimized.optimized.png"},"strawberry.png":{"width":249,"height":300,"webpPath":"strawberry.webp","optimizedPath":"strawberry.optimized.png"},"strawberry2.optimized.png":{"width":600,"height":602,"webpPath":"strawberry2.optimized.webp","optimizedPath":"strawberry2.optimized.optimized.png"},"strawberry2.png":{"width":495,"height":497,"webpPath":"strawberry2.webp","optimizedPath":"strawberry2.optimized.png"}}},{"content":"\\r\\nDeveloping APIs has always been a crucial task for any project. A well-designed API must be flexible and scalable as it always evolves with time. The urge for improvements led to the explosive growth of the data graphs popularity in the last years. This is great news for GraphQL as a lot of companies have started adopting it in their projects. To not be groundless:\\r\\n\\r\\n- **Audi\'s e-tron car** with a data graph\\r\\n- The front page of **NY Times** is based on a data graph\\r\\n- **Airbnb** uses data graph across all their apps both web & mobile\\r\\n\\r\\n... the list goes on and on.\\r\\n\\r\\n\\r\\n## The benefits of data graph\\r\\n\\r\\nGraphs are everywhere! So what are the main benefits of the data graph structure? First of all, it provides easier access to the date, by better, more clear structure.\\r\\n\\r\\n![Graphs are everywhere](datagraphs.jpg)\\r\\n\\r\\nThis leads to another huge benefit of using data graphs which is a better data understanding which effect in faster project onboarding and more efficient collaborations overall as we can clearly see a cause-effect relation. It\'s worth mentioning that graph structures are a lot easier to visualize, especially with modern tooling available on the **data graph/GraphQL** market like [GraphQL Birdseye](https://github.com/Novvum/graphql-birdseye) or [GraphQL Editor](https://graphqleditor.com/).\\r\\n\\r\\n[![GraphQL schema visualized with GraphQL Editor](design_schema.gif)](https://graphqleditor.com/)\\r\\n\\r\\n\\r\\nThe benefits don\u2019t stop there and go further beyond to faster development, higher code automation, more consistent user experiences across multiple apps and a lot more.\\r\\n\\r\\n## A bright future\\r\\n\\r\\nThere is no doubt that people in [Apollo](https://www.apollographql.com/), the most popular GraphQL implementation, fully understand the benefits of the data graph structure. Fortunately, more and more people start to see qualities offered by data graphs. Recently, the big news has seen the daylight, the information that [\\"Apollo raised $22 million\\"](https://www.businesswire.com/news/home/20190612005247/en/Apollo-Raises-22-Million-Give-GraphQL-based-Data), this shows that also VCs\' noticed a business opportunity in GraphQL technology which gives more confidence that GraphQL might be the future of APIs. What do you think?\\r\\n\\r\\n![Apollo raised $22 milion](apollo.png)\\r\\n","data":{"title":"Is GraphQL the future of APIs?","date":"2019-06-19T13:37:00.284Z","image":"future.png","author":"Tomek"},"path":"is-graphql-future-of-api","images":{"apollo.optimized.png":{"width":600,"height":310,"webpPath":"apollo.optimized.webp","optimizedPath":"apollo.optimized.optimized.png"},"apollo.png":{"width":1022,"height":528,"webpPath":"apollo.webp","optimizedPath":"apollo.optimized.png"},"datagraphs.jpg":{"width":638,"height":479,"webpPath":"datagraphs.webp","optimizedPath":"datagraphs.optimized.jpg"},"datagraphs.optimized.jpg":{"width":600,"height":450,"webpPath":"datagraphs.optimized.webp","optimizedPath":"datagraphs.optimized.optimized.jpg"},"design_schema.gif":{"width":1410,"height":858,"webpPath":"design_schema.webp","optimizedPath":"design_schema.optimized.gif.png"},"design_schema.optimized.gif.png":{"width":600,"height":365,"webpPath":"design_schema.optimized.gif.webp","optimizedPath":"design_schema.optimized.gif.optimized.png"},"future.optimized.png":{"width":600,"height":252,"webpPath":"future.optimized.webp","optimizedPath":"future.optimized.optimized.png"},"future.png":{"width":1000,"height":420,"webpPath":"future.webp","optimizedPath":"future.optimized.png"}}},{"content":"\\r\\nThis article will give you a detailed introduction on how to set up your computer as a web developer.  It was created for MacOS cause I mostly work on MacOS, however, you can easily interchange those instructions for Windows. Setting up a web development environment is the first challenge on a road to become a web developer today.  Don\'t give up, try right away!\\r\\n\\r\\nThere are a few ways you can set up your development environment. You can have everything in one IDE alternatively you can use many lightweight tools to combine them with their purposes. The following short checklist reflects my favourite tools in lightweight combination. In some cases, I prefer to use lightweight tools and for example, for react I use one IDE. Follow me to get more, in the next article I\'ll cover the basics of React Development Environment. \\r\\n\\r\\n#Agenda:\\r\\n- Homebrew\\r\\n- Git & GitHub\\r\\n- Sublime as Editor\\r\\n- Node and NPM\\r\\n- iTerm2\\r\\n\\r\\n#Homebrew\\r\\n\\r\\nYou will need to use the Mac Terminal app to install Homebrew. The Terminal app is located in the Utility folder in the Applications folder.\\r\\n\\r\\nHomebrew is a package manager for MacOS. Rather than having to download every app from a web, Homebrew enables you to install and control applications from the command line. It\u2019s an excellent tool to get used to the command line at the beginner\'s journey. You should feel relaxed on the command line as developer thus it makes sense to perform as many tasks as possible there. In addition, Homebrew gives you the ability to manage all of your applications with only one tool. You can get all the necessary instructions for Homebrew on their website. Otherwise, simply type the following command in your command line (terminal) to install Homebrew.\\r\\n\\r\\n```\\r\\nruby -e \\"$(curl -fsSL\\r\\nhttps://raw.githubusercontent.com/Homebrew/install/master/install)\\" \\r\\n```\\r\\n\\r\\nTo verify if the installation was successful type: \\r\\n\\r\\n    brew --version\\r\\n\\r\\nAfterwards, Homebrew should be ready for you. It should be accessible on the command line when you type brew. Whenever you install another tool with Homebrew, type brew update in your command line to update the Homebrew repository with all the recent versions of the packages. Afterwards, you can install the desired tool with brew install <tool> or upgrade it with brew upgrade <tool>.\\r\\n\\r\\n#Git and GitHub\\r\\n\\r\\nGit will be your distributed version control system. It manages your local projects on your machine and your remote projects on platforms such as GitHub and GitLab. Sooner or later, you will need it to cooperate on projects with other developers. Git should have been installed along the way with the Homebrew installation. Type git --version to verify that it is there. Otherwise, you can use Homebrew for the first time to install it with the following command on the command line:\\r\\n\\r\\n    brew install git\\r\\n\\r\\nTo verify if the installation was successful type: \\r\\n\\r\\n    git --version\\r\\n\\r\\nNext, you have to create a GitHub account and connect it from a terminal. GitHub is a web-based hosting service for version control using Git. It offers all of the distributed version control and source code management (SCM) functionality of Git as well as adding its other features. It provides access control and several collaboration features such as bug tracking, feature requests, task management, and wikis for every project. To learn more how to setup GitHub over terminal check this [link](https://help.github.com/en/articles/set-up-git).\\r\\n\\r\\n#Sublime as Editor\\r\\n\\r\\nSublime is one of the top editors for developers. That\u2019s the part where everybody has their own opinion. You can use any editor or IDE of your choices like Visual Studio Code, Atom and VIM.\\r\\n\\r\\nUnfortunately, Sublime isn\u2019t directly accessible via Homebrew. But you can use Cask to install it. Cask is another package manager within Homebrew for GUI tools. For instance, Chrome could be installed on your machine with Cask as well.  Just type selected commands in a terminal:\\r\\n\\r\\n    brew install caskroom/cask/brew-cask\\r\\n    brew tap caskroom/versions\\r\\n    brew cask install sublime-text\\r\\n\\r\\nTo verify if the installation was successful type: \\r\\n    subl -v\\r\\n\\r\\n#Node and NPM \\r\\n\\r\\nIf you are working with JavaScript, node and npm is a must. The node package manager is used to install libraries/frameworks (node packages) on the command line to your project.\\r\\n\\r\\n    brew install node\\r\\n\\r\\nTo verify if the installation was successful type: \\r\\n    node -v\\r\\n    npm -v\\r\\n\\r\\n#iTerm2\\r\\n\\r\\nMacOS and other OS\u2019s already come with their own command line terminal tool. Thus, another command line tool is optional, but you might want to install iTerm2 because of various advantages. It comes with powerful integrations, beautiful themes and other useful utility tools that will enrich your daily toolset. Homebrew with Cask helps you to install it, just type: \\r\\n\\r\\n    brew cask install iterm2\\r\\n\\r\\n#Summary\\r\\n\\r\\nThat are all the basic tools you need to set up a development environment. Homebrew is used to install all the tools for you on the command line. Cask is used on top of Homebrew to install graphical user interfaces apps applications such as Chrome, iTerm2 and Sublime. The later stage you can choose any code editor as you want since you\'ll spend most of the time in it. As a JavaScript developer, there is no way around node and npm and thus you should install them with nvm to manage multiple node versions.  Git and GitHub should be used to handle your projects.\\r\\n\\r\\n\\r\\n##Would you add anything to my list?","data":{"title":"Junior Web Developer environment setup","date":"2019-06-18T14:11:00.284Z","author":"Robert"},"path":"junior-web-developer-environment-setup","images":{}},{"content":"There\u2019s a lot of hype on GraphQL and debate to compare it to REST. GraphQL is in the early stage of adoption globally and no one exactly knows where it will end. Researching on the internet, I was able to find many positive articles presenting this new piece of tech. Is it just a hype of the first impression?\\r\\n\\r\\nI\u2019ve researched Reddit and selected the most upvoted comments on GraphQL.  My goal was to write down as much transparent and objective article on the topic. I\u2019ve used discussions and arguments between users to present a different point of view on each aspect. Each comment quoter below has a link to its author and number of upvotes in (). Keep in mind that upvote numbers might change since I\'ve written this article.\\r\\n\\r\\n##Agenda \\r\\n\\r\\n- General review\\r\\n- React & Apollo review\\r\\n- Big Boys & GraphQL \\r\\n- Caching\\r\\n- Data Fetching\\r\\n- Summary.\\r\\n\\r\\n\\r\\n#General review\\r\\n\\r\\nStarting from a general view I\u2019ve chosen two cases. First, one - [SwiftOneSpeaks](https://www.reddit.com/user/SwiftOneSpeaks/) shows front end developer perspective and potential improvements in time to market. Secondly, [Scruffles360](https://www.reddit.com/user/scruffles360/) presents strategy trends on how teams adapt graphql and which one they used. Later on you\u2019ll find more about his case. The second comment was the least upvoted one that I\u2019ve chosen in the article.\\r\\n\\r\\n[SwiftOneSpeaks](https://www.reddit.com/r/reactjs/comments/bozrg1/graphql_vs_rest_putting_rest_to_rest/eno3ovb/) (23) says: \\r\\n\\r\\n> *When I was working with a backend dev team, they were far more willing to provide new queries to match my needs because it didn\'t impact existing queries they had to support. (That said, I have no idea how well this scales over time). It also reduced the number of crappy responses I had to reparse into usable (for my needs) data structures. (example, I\'d get 3 arrays back that I had to relate and zip together into a single set of objects. With GraphQL, I had more ability to demand data in a useful shape, though the backend still has to do their part).*\\r\\n\\r\\n[Scruffles360](https://www.reddit.com/r/reactjs/comments/bozrg1/graphql_vs_rest_putting_rest_to_rest/enpb6fg/) (8) explains his three trends in GraphQL scope:\\r\\n\\r\\n>- The monolith - which is what Apollo is pushing now. Every company has one and only one api endpoint and schema that proxies to everything else (https://principledgraphql.com/). I disagree with this wholeheartedly, but won\'t repeat my arguments here (you can dig through my comment history if you want)\\r\\n- The database api - for some strange reason people have started adding plugins to databases that give you direct database access via graphql. Graphql is wonderful for so many reasons, but it doesn\'t come close to competing with a native database query language. More importantly, this takes away your business layer giving callers direct access to your store. No one should have access to your store except one single microservice. Everyone else should be calling through your api.\\r\\n- The medium approach - The classic API approach where each app has their own API (graphql in this case). It might isolate business logic or proxy to microservices (via rest or by schema stitching another Graphql schema). That\'s the route we went, and I don\'t regret a thing.\\r\\n\\r\\n#React & Apollo review\\r\\n\\r\\nReact & Apollo combination review request  gained a lot of attention. Additionally [Wronglyzorro](https://www.reddit.com/user/wronglyzorro/) and [Livelierepeat](https://www.reddit.com/user/livelierepeat/) argued about why backend developers might not like GraphQL. The response from more experienced developer gained triple more upvotes! Additionally I\'ve choosen one longer but very detailed review.\\r\\n\\r\\n[Wronglyzorro](https://www.reddit.com/r/reactjs/comments/9nmj0w/what_is_your_experience_with_react_apollo_graphql/e7nkk73/) (12) says: \\r\\n\\r\\n>*We strictly use react + apollo on our web app. We\'re also forcing the mobile clients to use it as well. It\'s incredible and the future. Backend devs of course hate it because they are set in their ways and don\'t like change. However over the last year when there have been any sort of outages it was never graphql that was a point of weakness. It was always the legacy backend services that crapped out.*\\r\\n \\r\\n[Livelierepeat](https://www.reddit.com/r/reactjs/comments/9nmj0w/what_is_your_experience_with_react_apollo_graphql/e7o92o5/) (40) responded: \\r\\n>*You might want to gain a little more insight that that. I used to be a young dev who used all of the latest tools and scoffed at those who \\"couldn\'t adapt\\". I\'ve learned that there are often much more interesting reasons than, \\"people hate change\\". Like does GraphQl create burdensome abstractions? What is getting added to their workload that they are resisting?\\r\\nAt some point using all of the latest tools loses its luster. More power comes from understanding the code and the people processes as well.*\\r\\n \\r\\n [Capaj](https://www.reddit.com/r/reactjs/comments/9nmj0w/what_is_your_experience_with_react_apollo_graphql/e7nlgrn/ \\r\\n) (11) detailed review: \\r\\n>*We use it in production since May. We\'re a fullstack team so we\'re not on the mercy of some other team doing the backend. It wasn\'t easy persuading everyone, but with a single sample feature built in GQL everyone agreed it looked way better than REST. Graphiql helped a lot with that. It\'s been quite good. We have apollo engine enabled on the backend and I really enjoy using metrics to hunt API bugs in prod. We use decapi to decorate our objection.js DB models. We have a single place where we define our models and GQL gets generated almost for free.\\r\\nOn the frontend we use apollo-client, but we don\'t use caching so far. Our FE focus is on getting rid of our legacy angular.js code, so we don\'t have time yet to experiment with FE caching.\\r\\nI don\'t event consider using apollo for client side state management, because all the feedback I\'ve heard so far was that it\'s not production ready yet. Also I have to say it looks quite verbose for what it really does. Instead I am hoping I can extend https://github.com/mhaagens/gql-to-mobx and use that for our state management needs. MST works wonders with typescript. If we can generate MST models from our queries on the fly while editing our GQL queries we can boost our productivity considerably.*\\r\\n\\r\\n\\r\\n#Caching\\r\\n \\r\\nI\u2019ve found a lot of great and upvoted comments from [SwiftOneSpeaks](https://www.reddit.com/user/SwiftOneSpeaks/) and [Scruffles360](https://www.reddit.com/user/scruffles360/) which had been already mentioned here. Here\u2019s what they discussed on lack of caching and potential solution.\\r\\n\\r\\n[SwiftOneSpeaks](https://www.reddit.com/r/reactjs/comments/bozrg1/graphql_vs_rest_putting_rest_to_rest/eno3ovb/) (23) writes: \\r\\n\\r\\n>*While you can configure GraphQL to work differently, as a practical matter they will always be POST requests. Which means all your browser/CDN/proxy caches that rely on GET being idempotent and POST not being now don\'t work by default. Everything is treated as a new request. You can set the client to do more smart caching, but that\'s literally solving a problem you created.*\\r\\n\\r\\n[Scruffles360](https://www.reddit.com/r/reactjs/comments/bozrg1/graphql_vs_rest_putting_rest_to_rest/enokkzb/) (11) respoded: \\r\\n\\r\\n>*Apollo has a solution for this. I haven\'t tried it, but its called Dynamic Persisted Queries if you want to read up. Basically the client makes a GET call with a hash of the query and if it fails, falls back to POST. The next GET call will succeed and populate any proxy caches.*\\r\\n\\r\\n#Data Fetching\\r\\n\\r\\nThose guys also presented a different points of view on data fetching. In the [original article](https://www.imaginarycloud.com/blog/graphql-vs-rest/) writer describes an example of blog app with multiple authors and possibility of using GraphQL vs REST. \\r\\n\\r\\n[SwiftOneSpeaks](https://www.reddit.com/r/reactjs/comments/bozrg1/graphql_vs_rest_putting_rest_to_rest/eno3ovb/) (23) says: \\r\\n\\r\\n>*Everyone emphasizes the \\"over fetching\\" problem. I feel like that\'s a red herring outside of poorly designed services (and that sort of points out the flaw - don\'t expect GraphQL services from poor service developers to suddenly not be poor) It\'s easy to resolve if you put a service in front - GraphQL can be that service, but so can something else. The issue isn\'t over fetching vs not, it\'s having a central service AND solving the caching issues.*\\r\\n\\r\\n[Scruffles360](https://www.reddit.com/r/reactjs/comments/bozrg1/graphql_vs_rest_putting_rest_to_rest/enokkzb/) (12) responded:\\r\\n\\r\\n>*Over fetching is a real problem. When you have hundreds of clients, each calling your system in different ways, adding a property to a rest api causes massive inefficiencies. Many people point out using client-centric facades for their mobile client vs web for example, but that doesn\'t scale. My project is called by hundreds of clients, each asking for slightly different data in different ways.*\\r\\n\\r\\n#Big Boys & GraphQL \\r\\n\\r\\nEveryone is interested in big companies like Facebook, Netflix and Coursera and their adaptation of GraphQL. In the [article](https://www.imaginarycloud.com/blog/graphql-vs-rest/) commented on Reddit we can find two main reasons as an author - states. The first comment presented was the most upvoted comment that I\u2019ve found. \\r\\n\\r\\n- In the early 2010s there was a boom in mobile usage, which led to some issues with low-powered devices and sloppy networks. REST isn\'t optimal to deal with those problems;\\r\\n- As mobile usage increased, so did the number of different front-end frameworks and platforms that run client applications. Given REST\'s inflexibility, it was harder to develop a single API that could fit the requirements of every client.\\r\\n\\r\\n[Greulich](https://www.reddit.com/r/reactjs/comments/bozrg1/graphql_vs_rest_putting_rest_to_rest/ennt7ak/) (62) responded to article:   \\r\\n \\r\\n>- This is so tangential as to be pointless. A different method of structuring your requests, does not render the network on which those requests better or worse.\\r\\n- I think the author means endpoint rather than API, because any endpoint, no matter how many there are, is part of the API.\\r\\nAssuming that is the case, why do we NEED only one endpoint?\\r\\n\\r\\n[Scruffles360](https://www.reddit.com/r/reactjs/comments/bozrg1/graphql_vs_rest_putting_rest_to_rest/enohrog/) (16) responded to Greulich:\\r\\n\\r\\n>*The first two points weren\'t worded well in the article, but are still valid. A REST API can either be generic and reusable or crafted specifically for a known client. In the first case, you aren\'t going to get good performance when you keep making calls back to the system for more data (especially on high-latency networks like we had on mobile 10 years ago). If you craft your API for a specific client, you obviously run into scalability problems.*\\r\\n \\r\\n#Summary\\r\\n\\r\\nThere\u2019s a lot to say or choose when picking the right comment to summarize the state of GraphQL. **Till today the most popular submissions on reddit are case studies of facebook or netflix yet they aren\u2019t much commented**. \\r\\nThis gives us already a good summary on reddit\u2019s view on GraphQL. \\r\\nFrom a daily developer life I couldn\u2019t skip what [Kdesign](https://www.reddit.com/r/reactjs/comments/bozrg1/graphql_vs_rest_putting_rest_to_rest/enn9sdf/) (36) wrote:  \\r\\n> ###*GraphQL provides job security, that\u2019s for sure*.\\r\\n\\r\\n[Kollektiv](https://www.reddit.com/r/node/comments/bozsb1/graphql_vs_rest_putting_rest_to_rest/enng3ba/) (44) stated a great list of GraphQL issues:\\r\\n>- Things like query rate limiting and credit estimation are difficult.\\r\\n- The way type and dataloaders work, it\'s difficult to bind queries to the database layer in an efficient way by grouping queries without writing a full module for it.\\r\\n- Validation only checks types so you still need some kind of JSON schema to do additional format validation.\\r\\n- GraphQL queries only allow for left joins so recreating SQL like INNER JOINs together with filters quickly becomes awkward.\\r\\n- The imposed pagination (connections) from frameworks like Relay are a mess.\\r\\n\\r\\nRegarding my initial research on GraphQL [SwiftOneSpeaks](https://www.reddit.com/r/reactjs/comments/bozrg1/graphql_vs_rest_putting_rest_to_rest/eno3ovb/) (24) wrote: \\r\\n>I expect many of the \\"GraphQL is great\\" reports we are seeing is mainly because ANY new service is great - they only get klunky over time, as assumptions are violated and needs change and code changes accrue. This doesn\'t mean GraphQL won\'t be great - it just means I can\'t trust early reports too much.\\r\\n \\r\\nAnd finally, I\u2019ve chosen [Mando0975](https://www.reddit.com/r/node/comments/bozsb1/graphql_vs_rest_putting_rest_to_rest/enopzpk/ \\r\\n) (28) opinion to summarize this article:\\r\\n\\r\\n>*Development should always be about picking the right tool for the job. GraphQL isn\'t always the right tool. REST isn\'t dead and GraphQL isn\'t going to kill it.*\\r\\n\\r\\n###What\'s your experience with GraphQL?\\r\\n \\r\\n \\r\\n \\r\\n \\r\\n\\r\\n \\r\\n\\r\\n","data":{"title":"The state of GraphQL by Reddit","date":"2019-06-10T11:11:00.284Z","image":"cover.png","author":"Robert"},"path":"the-state-of-graphql-by-reddit","images":{"cover.optimized.png":{"width":600,"height":252,"webpPath":"cover.optimized.webp","optimizedPath":"cover.optimized.optimized.png"},"cover.png":{"width":1000,"height":420,"webpPath":"cover.webp","optimizedPath":"cover.optimized.png"}}},{"content":"#Intro\\r\\n\\r\\nAfter periods of hard work from numbers of contributors, the React Native Core team is proud to publish of new version 0.60. This release touches important migrations for both Android and iOS and many more fixed issues. This article covers the top highlights. If you would like to check more detailed information, refer to the changelog. Finally, we should cheer for all contributors who helped improve this version.\\r\\n\\r\\n#Accessibility\\r\\n\\r\\nThe new version added many enhancements to the accessibility APIs, like \\r\\n- Several missing roles have been added for various components.\\r\\n- New Accessibility States API for web support in the future.\\r\\n- AccessibilityInfo.announceForAccessibility is confirmed on Android.\\r\\n-  Accessibility actions will include callbacks that deal with user-defined actions.\\r\\n- iOS accessibility flags and reduce motion are supported on iOS.\\r\\n- A clickable prop and an onClick callback are added for invoking actions via keyboard navigation.\\r\\nAccessibility is a complicated science, but we hope these changes make it a bit easier to be available to disabled users (according to A11Y). Check latest React Native Open Source Update for more details.\\r\\n\\r\\n\\r\\n#Start Screen\\r\\nReact Native\'s home screen has been refreshed!  This new \\"Hello World\\" will greet users to the ecosystem in a more welcoming, engaging way.\\r\\n\\r\\n![](react060.png)\\r\\n\\r\\n#AndroidX Support\\r\\n\\r\\nWith this release, React Native has been moved to AndroidX (Android Extension library). As this is a major change, developers need to transfer their native code and dependencies. The React Native community created a temporary solution for this called \u201cjetifier\u201d, an AndroidX transition tool in npm format, with a react-native compatible style.\\r\\n\\r\\nUsers are excited about the release and reflected it to be the most important RN release.\\r\\n\\r\\n#CocoaPods by Default\\r\\n\\r\\nReact Native for iOS comes with CocoaPods by default. It is an application level dependency manager for Objective-C Cocoa projects and Swift. Developers are suggested to check the iOS platform code using the \u2018xcworkspace\u2019 file. Additionally, the Pod specifications of internal packages have been updated to make them compatible with the Xcode projects, which will assist with troubleshooting and debugging. Assume to make some straightforward changes to your Podfile as part of the upgrade to 0.60 to bring this support. \\r\\n\\r\\n#Lean Core project\\r\\n\\r\\nThe team started Lean Core project to bring the React Native repository to a manageable state. They have extracted WebView and NetInfo toward separate repo. In this version 0.60, the team has completed migrating them out of the React Native repo. Also, geolocation has been extracted based on the community feedback about the new App Store policy.\\r\\n\\r\\n#Native Modules are now Autolinked\\r\\nThe CLI React Native team has offered significant advances to native module linking called auto-linking! Majority situations will not require the use of the react-native link. The team, at the same time,  overhauled the linking process in general. Unlink react-native any preexisting dependencies as mentioned in the docs.\\r\\n\\r\\n#Upgrade Helper\\r\\nThe team of @lucasbento, @pvinis, @kelset, and @watadarkstar have built Upgrade Helper to simplify the upgrade process. Their goal was to help React Native users with brownfield apps or complicated customizations to see what\'s changed among versions. Try yourself and check updated upgrading docs.\\r\\n\\r\\n![](upgradehelper.png)\\r\\n\\r\\n#A word to Library Maintainers\\r\\n AndroidX changes will almost absolutely require updates to your library, so be sure to cover support. If you\'re ready to upgrade yet, consider checking your library with jetifier to confirm that users at build time can patch your library.\\r\\n\\r\\nCheck the autolinking docs to update your configs & readme. Depending on the previous integration of your library, you may also need to make some extra adjustments. \\r\\n\\r\\n#Thanks!\\r\\nFor more details check [changelog](https://github.com/react-native-community/releases/blob/master/CHANGELOG.md) \\r\\n\\r\\n \\r\\n \\r\\n \\r\\n\\r\\n \\r\\n\\r\\n","data":{"title":"Top features in React Native 0.60","date":"2019-06-10T11:11:00.284Z","image":"cover.png","author":"Robert"},"path":"top-features-react-native-060","images":{"cover.optimized.png":{"width":600,"height":252,"webpPath":"cover.optimized.webp","optimizedPath":"cover.optimized.optimized.png"},"cover.png":{"width":1000,"height":420,"webpPath":"cover.webp","optimizedPath":"cover.optimized.png"},"react060.optimized.png":{"width":600,"height":1200,"webpPath":"react060.optimized.webp","optimizedPath":"react060.optimized.optimized.png"},"react060.png":{"width":233,"height":466,"webpPath":"react060.webp","optimizedPath":"react060.optimized.png"},"upgradehelper.optimized.png":{"width":600,"height":415,"webpPath":"upgradehelper.optimized.webp","optimizedPath":"upgradehelper.optimized.optimized.png"},"upgradehelper.png":{"width":2172,"height":1502,"webpPath":"upgradehelper.webp","optimizedPath":"upgradehelper.optimized.png"}}},{"content":"\\r\\n### The importance of a typeface\\r\\n\\r\\nCommunication plays a vital role in web design. In the web context communication usually means text. As the major part of the information that a web site is trying to communicate to an end-user is in the form of written language, modern web design started to put more and more pressure on typography which started becoming a principal element of [designs system](https://blog.graphqleditor.com/Design-System/) in the last years.\\r\\n\\r\\nGood typography is a factor that distinguishes a mediocre website from a decent one by making the act of reading more pleasant, which eases communication of key content to a user.\\r\\n\\r\\n![Understanding typography](https://thepracticaldev.s3.amazonaws.com/i/e894w9vazubb2907smlu.png)\\r\\n\\r\\n##### Source: [Understanding typography](https://material.io/design/typography/understanding-typography.html#type-properties)\\r\\n\\r\\n### Typography JS\\r\\n\\r\\nImplementing a tiny design change can become a real nightmare as it might turn into making tons of recalculations & [CSS](https://en.wikipedia.org/wiki/Cascading_Style_Sheets) changes. So how to keep your [Typography](https://material.io/design/typography/understanding-typography.html) tight? \\r\\n\\r\\nTypography.js comes with help, making it easier to create a unique design for your project as all you need to do is provide a configuration to the [Typography.js API](https://github.com/KyleAMathews/typography.js) and it will generate CSS for all block and inline elements. The TypoGraphy.js will take care of many details i.e. making sure that the spacings are nice, which will enhance the general UX value of your product.\\r\\n\\r\\n### Usage\\r\\n\\r\\n**Typography.js themes** are simple Javascript objects & **Typography Plugins** are functions extending or modifying the core Typography engine. These functions can modify the styles of different website elements.\\r\\n\\r\\nLet\'s take a look at basic JS usage:\\r\\n\\r\\n```jsx\\r\\nimport Typography from \'typography\'\\r\\n\\r\\nconst typography = new Typography({\\r\\n  baseFontSize: \'18px\',\\r\\n  baseLineHeight: 1.45,\\r\\n  headerFontFamily: [\'Avenir Next\', \'Helvetica Neue\', \'Segoe UI\', \'Helvetica\', \'Arial\', \'sans-serif\'],\\r\\n  bodyFontFamily: [\'Georgia\', \'serif\'],\\r\\n  // See below for the full list of options.\\r\\n})\\r\\n\\r\\n// Output CSS as string.\\r\\ntypography.toString()\\r\\n\\r\\n// Or insert styles directly into the <head> (works well for client-only\\r\\n// JS web apps.\\r\\ntypography.injectStyles()\\r\\n```\\r\\n\\r\\n### How to use themes\\r\\n\\r\\nCurrently, there are around 30 themes maintained, that are ready to pick up for your project. The themes are published separately as NPM packages.  Let\'s take a look at themes usage on a [typography-theme-github](https://github.com/KyleAMathews/typography.js/tree/master/packages/typography-theme-github) example. First, you need to save the package to your project using:\\r\\n```\\r\\nnpm install --save typography-theme-github\\r\\n```\\r\\nThen import and pass into Typography when initializing\\r\\n```jsx\\r\\nimport Typography from \'typography\'\\r\\nimport githubTheme from \'typography-theme-github\'\\r\\n\\r\\nconst typography = new Typography(githubTheme)\\r\\n```\\r\\nAs previosuly mentioned, themes are javascript object that can be easily custamized i.e. if you want to change the font size of a github theme just:\\r\\n\\r\\n```jsx\\r\\nimport Typography from \'typography\'\\r\\nimport funstonTheme from \'typography-theme-github\'\\r\\ngithubTheme.baseFontSize = \'22px\' // was 20px.\\r\\n\\r\\nconst typography = new Typography(githubTheme)\\r\\n```\\r\\n\\r\\nYou can play with available themes here:\\r\\nhttp://kyleamathews.github.io/typography.js/\\r\\n\\r\\n![Live demo sample](sample.gif)\\r\\n\\r\\n","data":{"title":"Handling web fonts with TypoGraphy.js","date":"2019-06-04T13:37:00.284Z","image":"typeface.png","author":"Tomek"},"path":"handling-web-fonts-with-typographyjs","images":{"sample.gif":{"width":1200,"height":436,"webpPath":"sample.webp","optimizedPath":"sample.optimized.gif.png"},"sample.optimized.gif.png":{"width":600,"height":218,"webpPath":"sample.optimized.gif.webp","optimizedPath":"sample.optimized.gif.optimized.png"},"typeface.optimized.png":{"width":600,"height":300,"webpPath":"typeface.optimized.webp","optimizedPath":"typeface.optimized.optimized.png"},"typeface.png":{"width":880,"height":440,"webpPath":"typeface.webp","optimizedPath":"typeface.optimized.png"}}},{"content":"NPM posted [javascript predictions](https://blog.graphqleditor.com/javascript-predictions-for-2019-by-npm) at the begging of this year with GraphQL as an essential point. They mentioned it twice and stated that you\'d have to learn GraphQL this year. We are in the middle of 2019, and I\u2019ve decided to write my predictions focused only on future of GraphQL! There\u2019re five bullet points:\\r\\n\\r\\n# Lee Byron & foundation will make GraphQL technology an industry standard. \\r\\n\\r\\nIn November 2018, GraphQL co-creator Lee Byron announced the creation of a GraphQL foundation. The GraphQL foundation from the start is supported by the Linux Foundation and aims to grow a neutral GraphQL ecosystem.\\r\\n\\r\\nIn March 2019 - The GraphQL Foundation declared a collaboration with the Joint Development Foundation to promote Open Source and Open Standards.  With JDF, the GraphQL community can create and popularize open standards more quickly than ever.\\r\\n\\r\\nIn March 2019 - GraphQL Foundation was joined by IBM to grow open source adoption. At IBM they\u2019ve created OASGraph (a GraphQL wrapper for REST APIs), and they see several opportunities to make GraphQL enterprise-level, for example in API Management.\\r\\n\\r\\n![](ibm.png)\\r\\n\\r\\n# Majority of the community will experience GraphQL. \\r\\n\\r\\nAnalyzing the latest editions of The State of Javascript survey, we can spot massive growth in desire to experience GraphQL. In the most recent 2018 edition, just 7.1% of the respondent has never heard of GraphQL (matching to 36.% in 2016, and 17.9% in 2017). The 62.5% people say that they would like to learn GraphQL when 20.4% applied it and would use again\xa0(it\'s a 200% growth matching to 2017), and only 1.3% have already given it a try, but would not use it again.\\r\\n\\r\\n![](state.png)\\r\\n\\r\\nThe number of quality learning materials is growing thanks to the community-driven effort.  Resources like How to GraphQL, Learn Hasura and Open GraphQL are free, easy to use, and top quality.  Youtube is full of great videos - i.e., enterprise case studies from Shopify, GitHub, Medium, Docker, or Twitter at GraphQL Europe Conference.  Facebook also recently posted a video on how they used GraphQL with a new version of their UI on their developer page.\\r\\n\\r\\n[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/02mIJOxpoh0/0.jpg)](https://www.youtube.com/watch?v=02mIJOxpoh0)\\r\\n\\r\\n#GraphQL events will boom all over the globe!\\r\\n\\r\\nRight now on meetup.com, there are 124 GraphQL meetups with over 61229 members all over the world. Last year we had two major conferences and a lot of smaller full-day events.  GraphQL Day has been organized three times in Toronto, Amsterdam, and southern Germany (Lake Constance).  Apollo Day happened twice last year (once in New York as well in San Francisco).  The most significant events for 2019 are already published: \\r\\n\\r\\n- GraphQL Conf Berlin - June 20-21, 2019\\r\\n- GraphQL Summit SF - 29-31 October, 2019\\r\\n\\r\\nWe already past two amazing events: \\r\\n\\r\\n- GraphQL Day in Toronto (Feb) \\r\\n- GraphQL Asia in India (April)\\r\\n\\r\\n# GraphQL will be a dominant API Management tool.\\r\\n\\r\\nFrom home automation to apps like Zapier, the tech industry is taking more investment in APIs than ever. Combine this with a desire to learn GraphQL, and we may well have something of a  hurricane of adoption.\\r\\n\\r\\nThe number of big companies adopting GraphQL is growing. According to stackshare.io, there are more than 500 companies already adopted.  At GraphQL Europe last year, several big players presented case studies of how they\u2019re using GraphQL: \\r\\n\\r\\n[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/lj41qhtkggU/0.jpg)](https://www.youtube.com/watch?v=lj41qhtkggU)\\r\\n\\r\\n[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/2It9NofBWYg/0.jpg)](https://www.youtube.com/watch?v=2It9NofBWYg)\\r\\n\\r\\n[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/GKxog_SETzs/0.jpg)](https://www.youtube.com/watch?v=GKxog_SETzs)\\r\\n\\r\\n[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/7m3h3PZ-x2w/0.jpg)](https://www.youtube.com/watch?v=7m3h3PZ-x2w)\\r\\n\\r\\nSmaller tech companies are usually influenced by what the \u201cbig boys\u201d in tech are doing\u2026not because they may need to understand it to plug into those APIs. As a result, the ongoing adoption of GraphQL by big companies is a step towards ubiquity.\\r\\n\\r\\n#Schema First will be the dominant approach \\r\\n\\r\\nSchema first is the most popular approach with GraphQL. I believe it will remain this way as a dominant, cause of the few reasons. \\r\\n\\r\\n- Faster Development: having a common, accepted specification means that development is much faster than traditional methods would allow. Frontend teams can instantly start building components regardless of backend components.\\r\\n\\r\\n- Choosing a constrained schema forces teams to talk to one another and to work more efficiently and closely by updating specification.\\r\\n\\r\\n- Cleaner Development means cleaner codebase, in which expected functionality is presented cleanly without duplication of code and effort.\\r\\n\\r\\n- All of these interests come together to one bigger picture of why schema-first is a great idea \u2013 a single source of truth.\\r\\n\\r\\nSchema-first design is easy, and the benefits gathered from its adoption are huge can\u2019t be ignored. A single source of truth is remarkably powerful, and should be done at the start in a development process \u2013 and adopting schema-first design is the easiest way to establish such a source.\\r\\n\\r\\n","data":{"title":"GraphQL Predictions 2019+","date":"2019-05-28T14:11:00.284Z","image":"cover.png","author":"Robert"},"path":"graphql-predictions-2019+","images":{"cover.optimized.png":{"width":600,"height":252,"webpPath":"cover.optimized.webp","optimizedPath":"cover.optimized.optimized.png"},"cover.png":{"width":1000,"height":420,"webpPath":"cover.webp","optimizedPath":"cover.optimized.png"},"ibm.optimized.png":{"width":600,"height":244,"webpPath":"ibm.optimized.webp","optimizedPath":"ibm.optimized.optimized.png"},"ibm.png":{"width":815,"height":331,"webpPath":"ibm.webp","optimizedPath":"ibm.optimized.png"},"state.optimized.png":{"width":600,"height":156,"webpPath":"state.optimized.webp","optimizedPath":"state.optimized.optimized.png"},"state.png":{"width":1304,"height":338,"webpPath":"state.webp","optimizedPath":"state.optimized.png"}}},{"content":"\\r\\nIn the previous week, we looked into a [basic GraphQL Server implementation in TypeScript](https://blog.graphqleditor.com/graphql-server-typescript/). In this episode of ...\\r\\n >*GraphQL Server in under 5 minutes series*\\r\\n\\r\\n... we will take a look at the full-stack template of React GraphQL app.\\r\\n\\r\\n\\r\\n![React Apollo GraphQL](stack.png)\\r\\n\\r\\nThe Fullstack React GraphQL Boilerplate repo contains minimal, basic & advanced boilerplates, each allowing to bootstrap a GraphQL server in no time, whether you want to build a simple \\"Hello world!\\" or a fully-featured enterprise app.\\r\\n\\r\\n||[Minimal](https://github.com/graphql-boilerplates/react-fullstack-graphql/tree/master/minimal)|[Basic](https://github.com/graphql-boilerplates/react-fullstack-graphql/tree/master/basic)|[Advanced](https://github.com/graphql-boilerplates/react-fullstack-graphql/tree/master/advanced)|\\r\\n|-|:----:|:----:|:--------:|\\r\\n|**Scalable GraphQL server:** The server uses graphql-yoga which is based on Apollo Server & Express|\u2714\ufe0f|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**Pre-configured Apollo Client:** The project comes with a preconfigured setup for Apollo Client|\u2714\ufe0f|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**GraphQL database:** Includes GraphQL database binding to Prisma (running on MySQL)|\u274c|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**Tooling:** Out-of-the-box support for GraphQL Playground & query performance tracing|\u274c|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**Extensible:** Simple and flexible data model \u2013 easy to adjust and extend|\u274c|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**No configuration overhead:** Preconfigured graphql-config setup|\u274c|\u2714\ufe0f|\u2714\ufe0f|\\r\\n\\r\\n\\r\\n### Getting started\\r\\n\\r\\nThe `minimal` boilerplate is only two commands away. Just go for:\\r\\n\\r\\n```\\r\\nnpm install -g graphql-cli\\r\\ngraphql create my-app --boilerplate react-fullstack-minimal\\r\\n```\\r\\n\\r\\nThen `yarn start` or `npm run start` will start your basic GraphQL server on a `localhost:4000`.  Basic & advanced setup requires a couple more steps. \\r\\n\\r\\nAfter installing [GraphQL CLI](https://github.com/graphql-cli/graphql-cli), bootstrap GraphQL server with:\\r\\n```\\r\\ngraphql create my-app --boilerplate react-fullstack-basic (or advance)\\r\\n```\\r\\nwhen prompted deploy the Prisma service to a `_public cluster_`, then navigate into `server` directory of your new project and start it:\\r\\n```\\r\\ncd my-app/server\\r\\n\\r\\nyarn dev\\r\\n```\\r\\nthis will run a server on localhost:4000, along with GraphQL Playground; open new terminal tab & navigate back to `my-app`, then run the app\\r\\n```\\r\\ncd ..\\r\\nyarn start\\r\\n```\\r\\n\\r\\n![Server Structure](structure.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n##### Source: [react-fullstack-graphql](https://github.com/graphql-boilerplates/react-fullstack-graphql)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n \\r\\n","data":{"title":"Fullstack template for React GraphL project","date":"2019-05-28T13:37:00.284Z","image":"server.png","author":"Tomek"},"path":"graphql-react-template","images":{"server.optimized.png":{"width":600,"height":261,"webpPath":"server.optimized.webp","optimizedPath":"server.optimized.optimized.png"},"server.png":{"width":1619,"height":704,"webpPath":"server.webp","optimizedPath":"server.optimized.png"},"stack.optimized.png":{"width":600,"height":101,"webpPath":"stack.optimized.webp","optimizedPath":"stack.optimized.optimized.png"},"stack.png":{"width":2000,"height":338,"webpPath":"stack.webp","optimizedPath":"stack.optimized.png"},"structure.optimized.png":{"width":600,"height":364,"webpPath":"structure.optimized.webp","optimizedPath":"structure.optimized.optimized.png"},"structure.png":{"width":878,"height":533,"webpPath":"structure.webp","optimizedPath":"structure.optimized.png"}}},{"content":"Web APIs are the motors that power most of our nowadays apps. For many years REST has been the principal architect for APIs, but in this article, we will investigate Django to GraphQL library! \\r\\n\\r\\nWith REST APIs, you were regularly creating URLs for every object of data that\'s available. Thinking about REST API example for books - we\'ll have URLs for the books themselves, authors, prizes, characters and heroes ... it\'s already a lot! This could involve a lot of requests. \\r\\n\\r\\nWith GraphQL you have one endpoint, ask what you want and get exactly that. It\'s is the top wanted technology according to The state of JS 2018 and every week community creates something interesting to help users adopt into new technology. [Yezyilomo](https://twitter.com/yezyilomo) came with the idea of python library that allows to turn Django Rest Framework into GraphQL like API.  Let\'s explore it more.\\r\\n\\r\\nDjango-restql is a library which turn your API made with Django REST Framework(DRF) into a GraphQL like API. With django-restql you will be able to: \\r\\n\\r\\n- Send a query to your API and get precisely what you need, nothing extra and nothing less.\\r\\n- Get expected results, since you control what you get from the server.\\r\\n- Control the data you get, not the server.\\r\\n- Save the load of fetching unused data from the server.\\r\\n\\r\\nThe library works by choosing dynamically a subset of fields per DRF resource as specified by the request\'s `query` parameter.\\r\\n\\r\\n[![](github.png)](https://github.com/yezyilomo/django-restql)  \\r\\n\\r\\nFollow [Yezyilomo](https://twitter.com/yezyilomo) to get in touch with him! \\r\\n\\r\\n[![](twitter.png)](https://twitter.com/yezyilomo)\\r\\n\\r\\n# Installing\\r\\n\\r\\n```python\\r\\npip install django-restql\\r\\n```\\r\\n\\r\\n# Getting Started\\r\\nUsing **django-restql** is very simple, you just have to use the DynamicFieldsMixin when defining a View.\\r\\n\\r\\n```python\\r\\nfrom rest_framework import viewsets\\r\\nfrom django.contrib.auth.models import User\\r\\nfrom .serializers import UserSerializer\\r\\nfrom django_restql import DynamicFieldsMixin\\r\\n\\r\\nclass UserViewSet(DynamicFieldsMixin, viewsets.ModelViewSet):\\r\\n    queryset = User.objects.all().order_by(\'-date_joined\')\\r\\n    serializer_class = UserSerializer\\r\\n```\\r\\n\\r\\nA regular request returns all fields specified on DRF serializer, in fact **django-restql** doesn\'t handle this request at all:\\r\\n\\r\\n```GET /users```\\r\\n\\r\\n``` json\\r\\n    [\\r\\n      {\\r\\n        \\"id\\": 1,\\r\\n        \\"username\\": \\"yezyilomo\\",\\r\\n        \\"email\\": \\"yezileliilomo@hotmail.com\\",\\r\\n        \\"groups\\": [1,2]\\r\\n      },\\r\\n      ...\\r\\n    ]\\r\\n```\\r\\n\\r\\n**django-restql** handle all GET requests with `query` parameter, this parameter is the one used to pass all fields to be included on a response. For example to select `id` and `username` fields from `user` model, send a request with a ` query` parameter as shown below.\\r\\n\\r\\n`GET /users/?query=[[\\"id\\", \\"username\\"]]`\\r\\n\\r\\n```json\\r\\n    [\\r\\n      {\\r\\n        \\"id\\": 1,\\r\\n        \\"username\\": \\"yezyilomo\\"\\r\\n      },\\r\\n      ...\\r\\n    ]\\r\\n```\\r\\n\\r\\nIf a query contains nested field, **django-restql** will return its id or array of ids for the case of nested iterable field(one2many or many2many). For example on a request below `location` is a flat nested field(many2one) and `groups` is an iterable nested field(one2many or many2many).\\r\\n\\r\\n`GET /users/?query=[[\\"id\\", \\"username\\", \\"location\\", \\"groups\\"]]`\\r\\n\\r\\n```json\\r\\n    [\\r\\n      {\\r\\n        \\"id\\": 1,\\r\\n        \\"username\\": \\"yezyilomo\\",\\r\\n        \\"location\\": 6,\\r\\n        \\"groups\\": [1,2]\\r\\n      },\\r\\n      ...\\r\\n    ]\\r\\n```\\r\\n\\r\\n**django-restql** support querying both flat and nested resources, so you can expand or query nested fields at any level as long as your field is defined as nested field on a serializer. For example you can query a country and region field from location.\\r\\n\\r\\n`GET /users/?query=[[\\"id\\", \\"username\\", {\\"location\\": [\\"country\\", \\"region\\"]}]]`\\r\\n\\r\\n```json\\r\\n    [\\r\\n      {\\r\\n        \\"id\\": 1,\\r\\n        \\"username\\": \\"yezyilomo\\",\\r\\n        \\"location\\": {\\r\\n            \\"contry\\": \\"Tanzania\\",\\r\\n            \\"region\\": \\"Dar es salaam\\"\\r\\n        }\\r\\n      },\\r\\n      ...\\r\\n    ]\\r\\n```\\r\\n\\r\\n**django-restql** got your back on expanding or querying iterable nested fields too. For example if you want to expand `groups` field into `id` and `name`, here is how you would do it.\\r\\n\\r\\n`GET /users/?query=[[\\"id\\", \\"username\\" {\\"groups\\": [[ \\"id\\", \\"name\\" ]]}]]`\\r\\n\\r\\n```json\\r\\n    [\\r\\n      {\\r\\n        \\"id\\": 1,\\r\\n        \\"username\\": \\"yezyilomo\\",\\r\\n        \\"groups\\": [\\r\\n            {\\r\\n                \\"id\\": 2,\\r\\n                \\"name\\": \\"Auth_User\\"\\r\\n            }\\r\\n            {\\r\\n                \\"id\\": 3,\\r\\n                \\"name\\": \\"Admin_User\\"\\r\\n            }\\r\\n        ]\\r\\n      },\\r\\n      ...\\r\\n    ]\\r\\n```","data":{"title":"Turn your Django REST API into a GraphQL like API","date":"2019-05-23T10:11:00.284Z","image":"cover.png","author":"Robert"},"path":"turn-your-django-rest-api-into-a-graphql-like-api","images":{"cover.optimized.png":{"width":600,"height":252,"webpPath":"cover.optimized.webp","optimizedPath":"cover.optimized.optimized.png"},"cover.png":{"width":1000,"height":420,"webpPath":"cover.webp","optimizedPath":"cover.optimized.png"},"github.optimized.png":{"width":600,"height":481,"webpPath":"github.optimized.webp","optimizedPath":"github.optimized.optimized.png"},"github.png":{"width":633,"height":507,"webpPath":"github.webp","optimizedPath":"github.optimized.png"},"twitter.optimized.png":{"width":600,"height":446,"webpPath":"twitter.optimized.webp","optimizedPath":"twitter.optimized.optimized.png"},"twitter.png":{"width":601,"height":447,"webpPath":"twitter.webp","optimizedPath":"twitter.optimized.png"}}},{"content":"\\r\\n[GraphQL](https://graphql.org/) is really about collaboration, and the teams that get furthest are those who can work seamlessly together on their GraphQL API.\\r\\n\\r\\nThis idea is well-known for the members of [The Guild](https://github.com/the-guild-org) know from open-sourcing amazing graphql tools. Its members work constantly on new solutions aiming to automate & increase the type-safety of our GraphQL projects. After open-sourcing such tools as [GraphQL Code Generator](https://graphql-code-generator.com/) or [GraphQL Modules](https://graphql-modules.com/), their next work seen daylight - the [GraphQL inspector](https://graphql-inspector.com/)\\r\\n\\r\\n\\r\\n[GraphQL Inspector](https://graphql-inspector.com/) is a tool published by [Kamil Kisiela](https://github.com/kamilkisiela/), that detects changes, similar or duplicated types, validates documents against a schema and looks for deprecated usage. \\r\\n\\r\\n![Example](https://thepracticaldev.s3.amazonaws.com/i/em7rri7pnzleik7b6era.jpg)\\r\\n\\r\\n**Key features/commands:**\\r\\n- [diff](https://graphql-inspector.com/docs/essentials/diff) - that detects breaking or dangerous changes,\\r\\n- [validate](https://graphql-inspector.com/docs/essentials/validate) - validates documents against a schema & searches for deprecated usage,\\r\\n- [similiar](https://graphql-inspector.com/docs/essentials/similar) - lists similar types in order to find duplicates,\\r\\n- [coverage](https://graphql-inspector.com/docs/essentials/coverage) - finds unused parts of GraphQL Schema based on clients\u2019 fragments & operations.\\r\\n\\r\\n\\r\\n\\r\\nThe tool is available as:\\r\\n- [CLI tool](https://graphql-inspector.com/docs/installation)\\r\\n![GraphQL Inspector CLI](https://thepracticaldev.s3.amazonaws.com/i/ew294o56vnh5kr93e3f4.gif)\\r\\n\\r\\n- [Github Application](https://github.com/apps/graphql-inspector)\\r\\n![GraphQL Inspector GitHub](https://thepracticaldev.s3.amazonaws.com/i/1wxx8ev382cfgplycl4s.jpeg)\\r\\n##### Source: [GraphQL Inspector](https://graphql-inspector.netlify.com/)\\r\\n\\r\\nThere is also a [programmatic API](https://graphql-inspector.com/docs/api/schema) available in case you want to build something on the top of it on your own.\\r\\n","data":{"title":"GraphQL Inspector","date":"2019-05-22T13:37:00.284Z","image":"inspector.png","author":"Tomek"},"path":"graphql-inspector","images":{"inspector.optimized.png":{"width":600,"height":252,"webpPath":"inspector.optimized.webp","optimizedPath":"inspector.optimized.optimized.png"},"inspector.png":{"width":1000,"height":420,"webpPath":"inspector.webp","optimizedPath":"inspector.optimized.png"}}},{"content":"\\r\\nIf you think that setting up a GraphQL server is a difficult task, [GraphQL Boilerplates ](https://github.com/graphql-boilerplates) Github repo will prove you that you\'re very wrong.\\r\\n\\r\\nThe best thing about GraphQL is that is can be used with any technology. Let\'s take a look at starter projects for most popular web technologies, provided by one of [the finest GraphQL devs](https://github.com/orgs/graphql-boilerplates/people). Now first off, let\'s take a look at [TypeScript](https://www.typescriptlang.org/).\\r\\n\\r\\n### **TypeScript-graphql-server**\\r\\n\\r\\nTypeScript is a typed superset of JavaScript that compiles to plain JavaScript, which popularity constantly rising. The TypeScript Boilerplate repo contains two starter kits:\\r\\n\\r\\n- [Basic](https://github.com/graphql-boilerplates/typescript-graphql-server/tree/master/basic)\\r\\n- [Advanced](https://github.com/graphql-boilerplates/typescript-graphql-server/tree/master/advanced)\\r\\n\\r\\nBoth allowing to bootstrap your GraphQL server with TypeScript within seconds. No matter if you need a **[Basic option](https://github.com/graphql-boilerplates/typescript-graphql-server/tree/master/basic)** for a simple personal project or **[Advanced boilerplate](https://github.com/graphql-boilerplates/typescript-graphql-server/tree/master/advanced)** with more features you are getting scalable, production-ready GraphQL server.\\r\\n\\r\\nAll projects are based on `graphql-yoga`, a GraphQL server library focused on providing the easiest possible setup.\\r\\n\\r\\nLet\'s take a look at features available in those versions:\\r\\n\\r\\n||[Basic](https://github.com/graphql-boilerplates/typescript-graphql-server/tree/master/basic)|[Advanced](https://github.com/graphql-boilerplates/typescript-graphql-server/tree/master/advanced)|\\r\\n|-|:----:|:--------:|\\r\\n|**Scalable GraphQL server:** The server uses graphql-yoga which is based on Apollo Server & Express|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**Static type generation:** TypeScript types for GraphQL queries & mutations are generated in a build step|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**GraphQL database:** Includes GraphQL database binding to Prisma (running on MySQL)|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**Tooling:** Out-of-the-box support for GraphQL Playground & query performance tracing|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**Extensible:** Simple and flexible data model \u2013 easy to adjust and extend|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**No configuration overhead:** Preconfigured graphql-config setup|\u2714\ufe0f|\u2714\ufe0f|\\r\\n|**Realtime updates:** Support for GraphQL subscriptions|\u274c|\u2714\ufe0f|\\r\\n|**Authentication:** Signup and login workflows are ready to use for your users|\u274c|\u2714\ufe0f|\\r\\n\\r\\nThe setup is the same for both versions:\\r\\n![Setup](setup.png)\\r\\nand our project structure will look like this:\\r\\n\\r\\n![Project Structure](project.png)\\r\\n##### Source: [Graphql-boilerplates](https://github.com/graphql-boilerplates/typescript-graphql-server)\\r\\n\\r\\n","data":{"title":"GraphQL Server under 5 minutes - TypeScript","date":"2019-05-21T13:37:00.284Z","image":"gqlservin5.png","author":"Tomek"},"path":"graphql-server-typescript","images":{"gqlservin5.optimized.png":{"width":600,"height":261,"webpPath":"gqlservin5.optimized.webp","optimizedPath":"gqlservin5.optimized.optimized.png"},"gqlservin5.png":{"width":1619,"height":704,"webpPath":"gqlservin5.webp","optimizedPath":"gqlservin5.optimized.png"},"project.optimized.png":{"width":600,"height":364,"webpPath":"project.optimized.webp","optimizedPath":"project.optimized.optimized.png"},"project.png":{"width":878,"height":533,"webpPath":"project.webp","optimizedPath":"project.optimized.png"},"setup.optimized.png":{"width":600,"height":351,"webpPath":"setup.optimized.webp","optimizedPath":"setup.optimized.optimized.png"},"setup.png":{"width":1584,"height":926,"webpPath":"setup.webp","optimizedPath":"setup.optimized.png"}}},{"content":"\\r\\n[GraphQL](https://graphqleditor.com/) is a hot technology. Its recent rise created a niche for multiple tools, like [GraphQL Code Generator](https://graphql-code-generator.com/), having one thing in common - making using GraphQL easier & more pleasant experience.\\r\\n\\r\\nGraphQL Code Generator is a tool that generates code out of your GraphQL schema. How? By analyzing the GraphQL schema & documents and parsing it, then GraphQL Code Generator outputs code at a wide variety of formats. \\r\\n\\r\\nThe creators currently support & maintain plugins for:\\r\\n- TypeScript\\r\\n- Flow\\r\\n- React\\r\\n- Angular\\r\\n- MongoDB\\r\\n- Stencil\\r\\n- Reason\\r\\n\\r\\nGraphQL Code Generator let you choose the output that you need, based on available plugins,  which can also be easily customized. As it 100% open-source you can write your own plugins to generate custom outputs that you need.\\r\\n\\r\\nI got your attentiopn?  Good, now go try it out online:\\r\\n\\r\\n[![GraphQL Code Generator](gqlcodegen.png)](https://graphql-code-generator.com/#live-demo)\\r\\n\\r\\nor just explore its [GitHub repo](https://github.com/dotansimha/graphql-code-generator) if that\'s what you prefer. ","data":{"title":"GraphQL Code Generator","date":"2019-05-20T13:37:00.284Z","image":"gqlcode.png","author":"Tomek"},"path":"graphql-code-generator","images":{"gqlcode.optimized.png":{"width":600,"height":240,"webpPath":"gqlcode.optimized.webp","optimizedPath":"gqlcode.optimized.optimized.png"},"gqlcode.png":{"width":1760,"height":704,"webpPath":"gqlcode.webp","optimizedPath":"gqlcode.optimized.png"},"gqlcodegen.optimized.png":{"width":600,"height":253,"webpPath":"gqlcodegen.optimized.webp","optimizedPath":"gqlcodegen.optimized.optimized.png"},"gqlcodegen.png":{"width":1482,"height":624,"webpPath":"gqlcodegen.webp","optimizedPath":"gqlcodegen.optimized.png"}}},{"content":"\\r\\n[The stage of Javascript 2018 Survey](https://2018.stateofjs.com) was completed by 20k users and contains an analysis of what aspects people like & dislike about web technologies. I found React & GraphQL interesting since they\'re completing each other and stand out from surveys conclusions: \\r\\n\\r\\n> React is the most popular among front end frameworks.\\r\\n\\r\\n![](react.png)\\r\\n\\r\\n> GraphQL is the top most wanted technology to learn.\\r\\n\\r\\n![](graphql.png)\\r\\n\\r\\nFollowing that, I\'ve combined popular boilerplates and starter apps to start using React with GraphQL. There\'s so much stuff on the internet that I\'ve decided to split article two articles. \\r\\n\\r\\n#Agenda:\\r\\n\\r\\n1. ReactQL\\r\\n2. SaaS Boilerplate\\r\\n3. React apollo todo app\\r\\n4. Universal React Apollo app\\r\\n5. Relay Skeleton\\r\\n\\r\\n# [1. ReactQL](https://reactql.org/)\\r\\n\\r\\n###Universal React+GraphQL starter kit: React 16, Apollo 2, MobX, Emotion, Webpack 4, GraphQL Code Generator, React Router 4, PostCSS, SSR.\\r\\n\\r\\n![](reactql.png)\\r\\n\\r\\n### Front-end stack\\r\\n\\r\\n- [React v16.8](https://facebook.github.io/react/) (the one with [hooks](https://reactjs.org/docs/hooks-intro.html)!) for UI.\\r\\n- [Apollo Client 2.5 (React)](http://dev.apollodata.com/react/) for connecting to GraphQL.\\r\\n- [MobX-React-Lite](https://github.com/mobxjs/mobx-react-lite) for declarative, type-safe flux/store state management.\\r\\n- [Emotion](https://emotion.sh/) CSS-in-JS, with inline `<style>` tag generation that contains only the CSS that needs to be rendered.\\r\\n- [Sass](https://sass-lang.com/), [Less](http://lesscss.org/) and [PostCSS](https://postcss.org/) when importing `.css/.scss/.less` files.\\r\\n- [React Router 4](https://reacttraining.com/react-router/) for declarative browser + server routes.\\r\\n- [GraphQL Code Generator v1.1](https://graphql-code-generator.com/) for parsing remote GraphQL server schemas, for automatically building fully-typed Apollo React HOCs instead of writing `<Query>` / `<Mutation>` queries manually\\r\\n- Declarative/dynamic `<head>` section, using [react-helmet](https://github.com/nfl/react-helmet).\\r\\n\\r\\n### Server stack\\r\\n\\r\\n- Built-in [Koa 2](http://koajs.com/) web server, with async/await routing.\\r\\n- Full route-aware server-side rendering (SSR) of initial HTML.\\r\\n- Universal building - both browser + Node.js web server compile down to static files, for fast server re-spawning.\\r\\n- Per-request GraphQL store. Store state is dehydrated via SSR, and rehydrated automatically on the client.\\r\\n- MobX for app-wide flux/store state, for automatically re-rendering any React component that \'listens\' to state. Fully typed state!\\r\\n- Full page React via built-in SSR component - every byte of your HTML is React.\\r\\n- SSR in both development and production, even with hot-code reload.\\r\\n\\r\\n### Real-time\\r\\n\\r\\n- Hot code reloading; zero refresh, real-time updates in development.\\r\\n- Development web server that automatically sends patches on code changes, and restarts the built-in Web server for SSR renders that reflect what you\'d see in production.\\r\\n- WebSocket `subscription` query support for real-time data (just set `WS_SUBSCRIPTIONS=1` in [.env](.env))\\r\\n\\r\\n### Code optimisation\\r\\n\\r\\n- [Webpack v4](https://webpack.js.org/), with [tree shaking](https://webpack.js.org/guides/tree-shaking/) -- dead code paths are automatically eliminated.\\r\\n- Asynchronous code loading when `import()`\'ing inside a function.\\r\\n- Automatic per-vendor chunk splitting/hashing, for aggressive caching (especially good behind a HTTP/2 proxy!)\\r\\n- Gzip/Brotli minification of static assets.\\r\\n- CSS code is combined, minified and optimised automatically - even if you use SASS, LESS and CSS together!\\r\\n\\r\\n### Styles\\r\\n\\r\\n- [Emotion](https://emotion.sh/), for writing CSS styles inline and generating the minimal CSS required to properly render your components.\\r\\n- [PostCSS v7](http://postcss.org/) with [next-gen CSS](https://preset-env.cssdb.org/) and automatic vendor prefixing when importing `.css`, `.scss` or `.less` files.\\r\\n- [SASS](http://sass-lang.com) and [LESS](http://lesscss.org/) support (also parsed through PostCSS.)\\r\\n- Automatic vendor prefixing - write modern CSS, and let the compiler take care of browser compatibility.\\r\\n- Mix and match SASS, LESS and regular CSS - without conflicts!\\r\\n- CSS modules - your classes are hashed automatically, to avoid namespace conflicts.\\r\\n- Compatible with Foundation, Bootstrap, Material UI and more. Simply configure via a `.global.(css|scss|less)` import to preserve class names.\\r\\n\\r\\n### Production-ready\\r\\n\\r\\n- Production bundling via `npm run production`, that generates optimised server and client code.\\r\\n- [Static compression](https://webpack.js.org/plugins/compression-webpack-plugin/) using the Gzip and [Brotli](https://opensource.googleblog.com/2015/09/introducing-brotli-new-compression.html) algorithms for the serving of static assets as pre-compressed `.gz` and `.br` files (your entire app\'s `main.js.bz` - including all dependencies - goes from 346kb -> 89kb!)\\r\\n- Static bundling via `npm run build:static`. Don\'t need server-side rendering? No problem. Easily deploy a client-only SPA to any static web host (Netlify, etc.)\\r\\n\\r\\n# [2. SaaS Boilerplate](http://codefoundries.com/products/UniversalRelayBoilerplate.html)\\r\\n\\r\\n###SaaS Boilerplate + examples using React, Relay, GraphQL, Node.js, and Cassandra/Elassandra.\\r\\n\\r\\n### Front-end stack\\r\\n\\r\\n| **Technology** | **Description**|\\r\\n|----------------|----------------|\\r\\n| [found](https://github.com/4Catalyzer/found)                    | Extensible route-based routing for React applications. |\\r\\n| [GraphQL](http://graphql.org/docs/getting-started/)             | A query language for describing the capabilities and requirements of data models for client\u2010server applications. |\\r\\n| [JSS](http://cssinjs.org/)                                      | JSS is a more powerful abstraction over CSS. It uses JavaScript as a language to describe styles in a declarative and maintainable way. |\\r\\n| [Material UI](http://www.material-ui.com/)                      | Library for implementing [Material Design](https://www.google.com/design/spec/material-design/introduction.html) in React. All user interface in this kit is built predominantly using Material UI components. |\\r\\n| [React](https://facebook.github.io/react/)                      | The best library for building modern browser-based and mobile UIs. |\\r\\n| [React Helmet](https://github.com/nfl/react-helmet)             | Reusable React component will manage all of your changes to the document head with support for document title, meta, link, script, and base tags. |\\r\\n| [Relay](https://facebook.github.io/relay/)                      | A Javascript framework for building data-driven react applications. |\\r\\n\\r\\n### Server stack\\r\\n\\r\\n| **Technology** | **Description**|\\r\\n|----------------|----------------|\\r\\n| [Apache Cassandra](http://cassandra.apache.org/)                | The right choice when you need scalability and high availability without compromising performance. Linear scalability and proven fault-tolerance on commodity hardware or cloud infrastructure make it the perfect platform for mission-critical data. Cassandra\'s support for replicating across multiple datacenters is best-in-class, providing lower latency for your users and the peace of mind of knowing that you can survive regional outages. |\\r\\n| [Data Loader](https://github.com/facebook/dataloader)           | Generic utility to be used as part of your application\'s data fetching layer to provide a consistent API over various backends and reduce requests to those backends via batching and caching. |\\r\\n| [Elassandra](http://www.strapdata.com/)                         | Elassandra Combines Cassandra And Elasticsearch In A Single Powerful Integrated Solution. URB works well with Elassandra. |\\r\\n| [Express](https://expressjs.com)                                | Fast, unopinionated, minimalist web framework for Node.js |\\r\\n| [express-cassandra](https://express-cassandra.readthedocs.io)   | Cassandra ORM/ODM/OGM for Node.js with optional support for Elassandra & JanusGraph |\\r\\n| [Express GraphQL](https://github.com/graphql/express-graphql)   | A Node.js express library that allows the creation of GraphQL servers. |\\r\\n| [JWT](https://jwt.io/)                                          | JSON Web Tokens is an industry standard [RFC 7519](https://tools.ietf.org/html/rfc7519) method for representing claims securely between two parties. |\\r\\n| [Node.js](https://nodejs.org/en/)                               | Event-driven, non-blocking I/O runtime based on JavaScript that is lightweight and efficient. |\\r\\n| [Winston](https://github.com/winstonjs/winston)                 | A logger for just about everything. |\\r\\n\\r\\n### Development tools\\r\\n\\r\\n| **Technology** | **Description**|\\r\\n|----------------|----------------|\\r\\n| [Babel](http://babeljs.io)                                      | Transpiles ESX to ESX and performs relay transformations. |\\r\\n| [concurrently](https://www.npmjs.com/package/concurrently)      | Run multiple commands concurrently. |\\r\\n| [ESLint](https://eslint.org)                                    | A fully pluggable tool for identifying and reporting on patterns in JavaScript. |\\r\\n| [Flow](http://flowtype.org/)                                    | Static type checker, designed to find type errors in JavaScript programs. |\\r\\n| [Husky](https://github.com/typicode/husky)                      | Git hooks for eslint and prettier. |\\r\\n| [LocalTunnel](https://localtunnel.github.io/www/)               | Expose yourself to the world. |\\r\\n| [Prettier](https://github.com/prettier/prettier/)               | Code formatter for javaScript. |\\r\\n| [React Hot Loader](gaearon.github.io/react-hot-loader/)         | Allows tweaking of React components in real time. |\\r\\n| [Webpack](http://webpack.github.io)                             | Bundles npm packages, application Java Script, CSS, images, etc. into bundles. |\\r\\n\\r\\n# [3. React apollo todo app](https://github.com/k8s-platform-hub/react-apollo-todo-app)\\r\\n\\r\\n###A simple todo app build on react using the graphql queries of hasura\\r\\n\\r\\nThis is a basic todo app built on react. The app uses Hasura for its backend, leveraging the following features of Hasura:\\r\\n\\r\\n- Deploy the react app\\r\\n- Hasura Authentication the Auth UI Kit\\r\\n- Hasura Database\\r\\n- GraphQL queries provided by Hasura\\r\\n\\r\\nThis project comes with the following custom microservice - a React TODO app made using GraphQL with Apollo Client\\r\\n\\r\\n# [4. Universal React Apollo app](https://github.com/WeLikeGraphQL/universal-react-apollo-example)\\r\\n\\r\\n###Universal React Apollo App (GraphQL) consuming\\r\\n\\r\\n### Features\\r\\n\\r\\n - [GraphQL](http://graphql.org/) for fetching data! The most awesome part of the project!\\r\\n - Universal Rendering (Server Side Rendering)\\r\\n - ES6/ES2015 with [Babel](https://babeljs.io/)\\r\\n - React data container for the [Apollo Client](http://dev.apollodata.com/react/) \\r\\n - Integrating predictable state container [Redux](http://redux.js.org) with Apollo\\r\\n - Hot reloading using [React-Hot-Loader](https://github.com/gaearon/react-hot-loader)\\r\\n - [Recompose](https://github.com/acdlite/recompose) as a React utility belt for higher order components\\r\\n - Development and production bundling by [Webpack](https://webpack.github.io)\\r\\n - [CSSNext](http://cssnext.io/): use of official W3C syntax of the future CSS\\r\\n - Transforming styles with JS plugins by [PostCSS](http://postcss.org/)\\r\\n - [Wow.js](http://mynameismatthieu.com/WOW/) for CSS animations\\r\\n - [Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) for resolving [layout fatigue](http://blog.karenmenezes.com/2014/apr/13/floats-inline-block-or-display-table-or-flexbox/) and making the app responsive (open the app in desktop, mobile, whatever...). Doesn\'t work on IE 9, but it should not be a problem nowadays. See [browsers usage](http://caniuse.com/usage-table).\\r\\n - [CSS Modules](https://github.com/css-modules/css-modules): say goodbye to global scope in CSS and most of conflicts\\r\\n - [Jest Snapshot Testng](https://facebook.github.io/jest/blog/2016/07/27/jest-14.html), some parts in [Enzyme](http://airbnb.io/enzyme/) and [Sinon](http://sinonjs.org/)\\r\\n - Linting both JS and CSS, respectively by: [ESLint](http://eslint.org/) and [Stylelint](http://stylelint.io/)\\r\\n\\r\\n# [5. Relay Skeleton](https://github.com/fortruce/relay-skeleton)\\r\\n\\r\\n###React, Relay, GraphQL project skeleton\\r\\n\\r\\nThis skeleton project is meant to scaffold a fullstack React, Relay, and GraphQL project. The skeleton uses webpack and gulp to manage the build and provide a great development experience. The frontend stack is React, and Relay. All React changes are automatically hot reloaded using react-hot-loader. Also, the backend server is automatically\\r\\nrestarted upon any changes using nodemon.\\r\\n\\r\\nBoth the server and frontend code are built and transpiled using webpack, while gulp is used primarily to start the webpack-dev-server and nodemon.\\r\\n\\r\\n### Typical Usage\\r\\n\\r\\nThis skeleton was designed with a typical use case of having a backend api serve a React SPA. The skeleton automatically proxies all requests to `/graphql` thru the webpack-dev-server to the backend GraphQL server.\\r\\n\\r\\nThe frontend is automatically hot reloaded whenever you save a file. See\\r\\n[react-hot-loader] for more details on how this works. It enables you to immediately see changes in React components without losing application state or having to reload your page!\\r\\n\\r\\nThe backend server is automatically restarted whenever you save a file.\\r\\nIf, for example, you modify the GraphQL schema, then the GraphQL server will be restarted to reflect the changes, the `schema.json` will be regenerated using an introspection query, and the frontend code will be recompiled to re-run `Relay.QL` queries through the `babel-relay-plugin`.\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Getting started with React & GraphQL part I","date":"2019-05-13T11:11:00.284Z","image":"cover.png","author":"Robert"},"path":"getting-started-with-react-graphql-i","images":{"cover.optimized.png":{"width":600,"height":252,"webpPath":"cover.optimized.webp","optimizedPath":"cover.optimized.optimized.png"},"cover.png":{"width":1000,"height":420,"webpPath":"cover.webp","optimizedPath":"cover.optimized.png"},"graphql.optimized.png":{"width":600,"height":199,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":880,"height":292,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"react.optimized.png":{"width":600,"height":202,"webpPath":"react.optimized.webp","optimizedPath":"react.optimized.optimized.png"},"react.png":{"width":880,"height":296,"webpPath":"react.webp","optimizedPath":"react.optimized.png"},"reactql.optimized.png":{"width":600,"height":172,"webpPath":"reactql.optimized.webp","optimizedPath":"reactql.optimized.optimized.png"},"reactql.png":{"width":419,"height":120,"webpPath":"reactql.webp","optimizedPath":"reactql.optimized.png"}}},{"content":"\\r\\n\\r\\n[The State of JavaScript](https://stateofjs.com/) is a survey created and maintained by [Sacha Greif](https://twitter.com/sachagreif), [Raphael Benitte](https://twitter.com/benitteraphael) & [Michael Rambeau](https://twitter.com/michaelrambeau). The survey collects data from over **20,000 developers**, who are asked questions regarding front-end frameworks, libraries and the part that interests us the most ... the Data Layer which of course includes the [GraphQL](https://graphql.org/) and its derivatives such as Apollo or Relay.\\r\\n\\r\\n#### Data layers report\\r\\n\\r\\nThe data layer regroups all the technologies used to transmit and manage data. It\'s a vast category where many approaches compete to make a tricky problem more approachable. The users were asked about their experience and knowledge of such technologies as [Redux](https://redux.js.org/), [Apollo](https://www.apollographql.com/), [MobX](https://mobx.js.org/), [Relay](https://facebook.github.io/relay/) & [GraphQL](http://graphqleditor.com). Let\'s take a look at the responses from last year (2018) surveys:\\r\\n\\r\\n#### GraphQL\'s popularity\\r\\n\\r\\nAs you can see on a chart below (hopefully), only 7.1% of the respondent has never heard of GraphQL (comparing to 36.% in 2016, and 17.9% in 2017). The 62.5% declare that they would like to learn the GraphQL, **20.4% used it and would use again** (which is a double growth comparing to 2017), and only 1.3% have already given it a try, but would not use it again.\\r\\n\\r\\n![Popularity](pop.png)\\r\\n##### Source: [stateofjs.com](https://2018.stateofjs.com)\\r\\n\\r\\n#### Most like aspects of GraphQL\\r\\n\\r\\nThe developers who declared that they *\u201cused it and would use again\u201d*, when asked about the most liked aspects of GraphQL picked the below top3:\\r\\n- elegant programming style & patterns\\r\\n- growing popularity\\r\\n- powerful tooling (i.e. [GraphQL Editor](https://graphqleditor.com/))\\r\\n\\r\\n![Liked](likedfor.png)\\r\\n##### Source: [stateofjs.com](https://2018.stateofjs.com)\\r\\n\\r\\n#### Most disliked aspects of GraphQL\\r\\n\\r\\nThe developers who declared that they *\u201cused it and would not use again\u201d*, when asked about the most disliked aspects of GraphQL picked:\\r\\n- high complexity\\r\\n- clumsy programming style,\\r\\n- hard learning curve \\r\\n\\r\\n![Disliked](disliked.png)\\r\\n##### Source: [stateofjs.com](https://2018.stateofjs.com)\\r\\n\\r\\n#### GraphQL Usage \\r\\n\\r\\nThe survey showed that **20.3% of respondents have used GraphQL** and would do it again for future projects. Below map represent the distribution of users enjoying [GraphQL](https://graphql.org/). Countries with the highest ratio are shown in red, those where it\'s lower are displayed in blue. Countries with less than 20 respondents were omitted.\\r\\n\\r\\n![The map](map.png)\\r\\n##### Source: [stateofjs.com](https://2018.stateofjs.com)\\r\\n\\r\\n\\r\\n#### The summary\\r\\n\\r\\nAfter analyzing over **20 000 surveys** the authors have put them into a quadrant chart where have four groups:\\r\\n\\r\\n|Recommendation|Tech|\\r\\n|-------|--------|\\r\\n|**Adopt**|[Redux](https://redux.js.org/) - it has very high usage & satisfaction rates, which makes it a safe technology to adopt.|\\r\\n| **Assess** |[GraphQL](https://graphql.org/), [Apollo](https://www.apollographql.com/), [MobX](https://mobx.js.org/) - they have high satisfaction, but still relatively low usage rate. These are the technologies worth following as they soon might transform into the big players.|\\r\\n|**Avoid**|[Relay](https://facebook.github.io/relay/) - low usage, combined with low satisfaction makes Relay a technology to avoid (at least right now).|\\r\\n|**Analyze**|NONE - high usage despite low satisfaction if being used you should consider reassessment.|\\r\\n\\r\\n![The summary](summary.png)\\r\\n##### Source: [stateofjs.com](https://2018.stateofjs.com)\\r\\n\\r\\n","data":{"title":"The State of GraphQL","date":"2019-05-06T13:37:00.284Z","image":"state.png","author":"Tomek"},"path":"the-state-of-graphql","images":{"disliked.optimized.png":{"width":600,"height":199,"webpPath":"disliked.optimized.webp","optimizedPath":"disliked.optimized.optimized.png"},"disliked.png":{"width":1534,"height":509,"webpPath":"disliked.webp","optimizedPath":"disliked.optimized.png"},"likedfor.optimized.png":{"width":600,"height":192,"webpPath":"likedfor.optimized.webp","optimizedPath":"likedfor.optimized.optimized.png"},"likedfor.png":{"width":1541,"height":493,"webpPath":"likedfor.webp","optimizedPath":"likedfor.optimized.png"},"map.optimized.png":{"width":600,"height":215,"webpPath":"map.optimized.webp","optimizedPath":"map.optimized.optimized.png"},"map.png":{"width":1561,"height":559,"webpPath":"map.webp","optimizedPath":"map.optimized.png"},"pop.optimized.png":{"width":600,"height":156,"webpPath":"pop.optimized.webp","optimizedPath":"pop.optimized.optimized.png"},"pop.png":{"width":1304,"height":338,"webpPath":"pop.webp","optimizedPath":"pop.optimized.png"},"state.optimized.png":{"width":600,"height":252,"webpPath":"state.optimized.webp","optimizedPath":"state.optimized.optimized.png"},"state.png":{"width":1000,"height":420,"webpPath":"state.webp","optimizedPath":"state.optimized.png"},"summary.optimized.png":{"width":600,"height":258,"webpPath":"summary.optimized.webp","optimizedPath":"summary.optimized.optimized.png"},"summary.png":{"width":1582,"height":680,"webpPath":"summary.webp","optimizedPath":"summary.optimized.png"}}},{"content":"\\r\\nI\'ve decided to create a list of top resources to learn for two modern and trending technologies after checking results of [The stage of Javascript 2018 Survey](https://2018.stateofjs.com). The survey was completed by 20k users. React is, of course, the most popular among front end frameworks. \\r\\n\\r\\n![](react.png)\\r\\n\\r\\nGraphQL is the top wanted to learn technology.\\r\\n\\r\\n![](graphql.png)\\r\\n\\r\\n# Clients\\r\\n\\r\\n- [Apollo GraphQL ](https://www.github.com/apollographql/apollo-client): A fully-featured, production ready caching GraphQL client for every UI framework and GraphQL server\\r\\n\\r\\n![](apollo.png)\\r\\n\\r\\n- [Relay Modern](https://facebook.github.io/relay/): A JavaScript framework for building data-driven React applications\\r\\n\\r\\n![](relay.jpeg)\\r\\n\\r\\n- [AppSync](https://github.com/awslabs/aws-mobile-appsync-sdk-js): JavaScript GraphQL library for Offline, Sync, Sigv4. includes support for React Native\\r\\n\\r\\n![](appsync.jpeg)\\r\\n\\r\\n- [FormidableLabs - urql](https://github.com/FormidableLabs/urql): A highly customizable and versatile GraphQL client for React\\r\\n\\r\\n![](urql.jpeg)\\r\\n\\r\\n- [Graphql.js](https://github.com/f/graphql.js):A Simple and Isomorphic GraphQL Client for JavaScripy\\r\\n\\r\\n![](graphqljs.png)\\r\\n\\r\\n# Tutorials\\r\\n\\r\\n- React\\r\\n  - [A complete React with GraphQL Tutorial](https://www.robinwieruch.de/react-with-graphql-tutorial/)\\r\\n  - [A complete React with Apollo and GraphQL Tutorial](https://www.robinwieruch.de/react-graphql-apollo-tutorial/)\\r\\n  - [React + Apollo Tutorial](https://www.howtographql.com/react-apollo/0-introduction/)\\r\\n  - [React + Relay Tutorial](https://www.howtographql.com/react-relay/0-introduction/)\\r\\n\\r\\n[![Getting Started with Relay Modern, React & GraphQL (Full Tutorial)](https://img.youtube.com/vi/XeALXh37WeU/0.jpg)](https://www.youtube.com/watch?v= XeALXh37WeU)\\r\\n\\r\\n[![React Apollo New Rendered Props Components](https://img.youtube.com/vi/gF-peiFjG0o/0.jpg)](https://www.youtube.com/watch?v= gF-peiFjG0o)\\r\\n\\r\\n[![#1 What is GraphQL? | Build a Complete App with GraphQL, Node.js, MongoDB and React.js](https://img.youtube.com/vi/7giZGFDGnkc/0.jpg)](https://www.youtube.com/watch?v= 7giZGFDGnkc)\\r\\n\\r\\n[![Using GraphQL, ReactJS and Apollo To Create Amazing Apps](https://img.youtube.com/vi/kXH2dbnHYA0/0.jpg)](https://www.youtube.com/watch?v= kXH2dbnHYA0)\\r\\n\\r\\n- React Native\\r\\n  - [Code an App With GraphQL, React Native, and AWS AppSync: The API](https://code.tutsplus.com/tutorials/code-an-app-with-graphql-and-react-native--cms-30511)\\r\\n  - [Code an App With GraphQL, React Native and AWS AppSync: The App](https://code.tutsplus.com/tutorials/code-an-app-with-graphql-react-native-and-aws-appsync-the-app--cms-30569)\\r\\n  - [How to setup React Native + GraphQL + Relay Modern](https://codeburst.io/how-to-setup-a-react-native-graphql-relay-modern-a6a5f6c18353)\\r\\n  - [Building Chatty](https://medium.com/react-native-training/building-chatty-a-whatsapp-clone-with-react-native-and-apollo-part-1-setup-68a02f7e11): A WhatsApp clone with React Native and Apollo\\r\\n\\r\\n[![Build a Twitter Clone with Apollo Graphql & React-Native - Part: 0 - The Setup](https://img.youtube.com/vi/33qP1QMmjv8/0.jpg)](https://www.youtube.com/watch?v= 33qP1QMmjv8)\\r\\n\\r\\n[![React Native and Prisma GraphQL eCommerce Project - Introduction](https://img.youtube.com/vi/nyE6shIRzxM/0.jpg)](https://www.youtube.com/watch?v= nyE6shIRzxM)\\r\\n\\r\\n# Developer Tools\\r\\n\\r\\n  - [GraphQL Playground](https://github.com/graphcool/graphql-playground): Powerful GraphQL IDE built on top of GraphiQL\\r\\n\\r\\n![](graphql-playground.png)\\r\\n\\r\\n  - [GraphiQL Online](https://graphiql-online.com): An online version of GraphiQL with a configurable endpoint and headers.\\r\\n\\r\\n  - [GraphQL Editor](https://graphqleditor.com): a visual graphql editor that allows you to visualize graphql schema and create fake backend out of schema.\\r\\n\\r\\n[![](editor.png)](https://app.graphqleditor.com/demo/blog-sample)\\r\\n\\r\\n  - [apollo-tooling](https://github.com/apollographql/apollo-tooling): Tooling for development and production Apollo workflows\\r\\n\\r\\n  - [graphql-code-generator](https://github.com/dotansimha/graphql-code-generator): GraphQL code generator with flexible support for custom templates\\r\\n\\r\\n![](gcg.png)\\r\\n\\r\\n  - [eslint-plugin-graphql](https://github.com/apollographql/eslint-plugin-graphql): Check your GraphQL query strings against a schema.\\r\\n\\r\\n![](eslint.png)\\r\\n\\r\\n  - [Apollo Client Developer Tools](https://chrome.google.com/webstore/detail/apollo-client-developer-t): Chrome extension for Apollo Client developer tools\\r\\n\\r\\n![](apollo-chrome.jpg)\\r\\n\\r\\n  - [Relay DevTools](https://chrome.google.com/webstore/detail/relay-devtools/oppikflppfjfdpjimpdadhelffjpciba): A Chrome Extension that creates a Relay tab in the developer tools interface for debugging apps in Chrome\\r\\n\\r\\n![](relay-chrome.jpg)\\r\\n\\r\\n  - [Relay Devtools Electron](https://www.npmjs.com/package/relay-devtools): Standalone Relay DevTools App for debugging Relay outside Chrome\\r\\n\\r\\n","data":{"title":"Best resources to learn React & GraphQL","date":"2019-05-06T12:17:00.284Z","image":"cover.png","author":"Robert"},"path":"best-resources-to-learn-react-graphql","images":{"apollo-chrome.jpg":{"width":640,"height":400,"webpPath":"apollo-chrome.webp","optimizedPath":"apollo-chrome.optimized.jpg"},"apollo-chrome.optimized.jpg":{"width":600,"height":375,"webpPath":"apollo-chrome.optimized.webp","optimizedPath":"apollo-chrome.optimized.optimized.jpg"},"apollo.optimized.png":{"width":600,"height":161,"webpPath":"apollo.optimized.webp","optimizedPath":"apollo.optimized.optimized.png"},"apollo.png":{"width":979,"height":262,"webpPath":"apollo.webp","optimizedPath":"apollo.optimized.png"},"cover.optimized.png":{"width":600,"height":252,"webpPath":"cover.optimized.webp","optimizedPath":"cover.optimized.optimized.png"},"cover.png":{"width":1000,"height":420,"webpPath":"cover.webp","optimizedPath":"cover.optimized.png"},"editor.optimized.png":{"width":600,"height":383,"webpPath":"editor.optimized.webp","optimizedPath":"editor.optimized.optimized.png"},"editor.png":{"width":880,"height":561,"webpPath":"editor.webp","optimizedPath":"editor.optimized.png"},"eslint.optimized.png":{"width":600,"height":379,"webpPath":"eslint.optimized.webp","optimizedPath":"eslint.optimized.optimized.png"},"eslint.png":{"width":489,"height":309,"webpPath":"eslint.webp","optimizedPath":"eslint.optimized.png"},"gcg.optimized.png":{"width":600,"height":600,"webpPath":"gcg.optimized.webp","optimizedPath":"gcg.optimized.optimized.png"},"gcg.png":{"width":256,"height":256,"webpPath":"gcg.webp","optimizedPath":"gcg.optimized.png"},"graphql-playground.optimized.png":{"width":600,"height":513,"webpPath":"graphql-playground.optimized.webp","optimizedPath":"graphql-playground.optimized.optimized.png"},"graphql-playground.png":{"width":538,"height":460,"webpPath":"graphql-playground.webp","optimizedPath":"graphql-playground.optimized.png"},"graphql.optimized.png":{"width":600,"height":199,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":880,"height":292,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"graphqljs.optimized.png":{"width":600,"height":170,"webpPath":"graphqljs.optimized.webp","optimizedPath":"graphqljs.optimized.optimized.png"},"graphqljs.png":{"width":1000,"height":283,"webpPath":"graphqljs.webp","optimizedPath":"graphqljs.optimized.png"},"react.optimized.png":{"width":600,"height":202,"webpPath":"react.optimized.webp","optimizedPath":"react.optimized.optimized.png"},"react.png":{"width":880,"height":296,"webpPath":"react.webp","optimizedPath":"react.optimized.png"},"relay-chrome.jpg":{"width":640,"height":400,"webpPath":"relay-chrome.webp","optimizedPath":"relay-chrome.optimized.jpg"},"relay-chrome.optimized.jpg":{"width":600,"height":375,"webpPath":"relay-chrome.optimized.webp","optimizedPath":"relay-chrome.optimized.optimized.jpg"}}},{"content":"\\r\\n\\r\\nIn this short read, I will try to break down for you the concept of GraphQL fragments. What are the fragments in GraphQL and how you can benefit from using them?\\r\\n\\r\\n### GraphQL Fragments\\r\\nIn [GraphQL](https://graphql.org/) you sometimes need to query for the same fields in multiple queries. This requires defining these fields over again which can lead to tiny, but very annoying errors. \\r\\n\\r\\n[![David Walsh Twitter](twitter.png)](https://twitter.com/davidwalshblog/status/1118526853948612608)\\r\\n\\r\\nThat\'s why GraphQL includes reusable units called fragments. Fragments let you construct reusable pieces of query logic (an equivalent to UI component of a [design system](https://blog.graphqleditor.com/Design-System/)). The small part of a query makes, ready to be used where needed, makes our work is way more effective, and possibly lower odds of making a simple typo.\\r\\n\\r\\nLet\'s say we have a `user` type containing some standard fields like:\\r\\n\\r\\n![](1.png)\\r\\n\\r\\nWe can use the `fragment` to represent a set of specific fields i.e. *online contact details*:\\r\\n\\r\\n![](2.png)\\r\\nso when querying for online details we can **referer to the fragment instead of querying for all fields separately**:\\r\\n\\r\\n![](3.png)\\r\\n\\r\\nLess typing, cleaner code, easier life :)\\r\\n\\r\\n### The benefits of using fragments\\r\\n\\r\\nGraphQL fragments allow you to reuse parts of your queries and provide such qualities as:\\r\\n- **consistency** - higher confidence that you\u2019re always working on the right fields i.e when running mutations you know you update the right data. \\r\\n- **better code organization** - fragments improve the structure & reusability of GraphQL code, which is  very handy in terms of team collaboration\\r\\n- **improved communication with GraphQL server** - querying for fragments isolates a component from any unwanted data.\\r\\n\\r\\nSounds good right? So if you are wondering if its worth using GraphQL fragments the answers is simple - YES!\\r\\n\\r\\n \\r\\n","data":{"title":"GraphQL Fragments and the benefits of using them","date":"2019-04-29T13:37:00.284Z","image":"gqljava.png","author":"Tomek"},"path":"GraphQL-fragments","images":{"1.optimized.png":{"width":600,"height":292,"webpPath":"1.optimized.webp","optimizedPath":"1.optimized.optimized.png"},"1.png":{"width":1584,"height":770,"webpPath":"1.webp","optimizedPath":"1.optimized.png"},"2.optimized.png":{"width":600,"height":223,"webpPath":"2.optimized.webp","optimizedPath":"2.optimized.optimized.png"},"2.png":{"width":1584,"height":590,"webpPath":"2.webp","optimizedPath":"2.optimized.png"},"3.optimized.png":{"width":600,"height":210,"webpPath":"3.optimized.webp","optimizedPath":"3.optimized.optimized.png"},"3.png":{"width":1584,"height":554,"webpPath":"3.webp","optimizedPath":"3.optimized.png"},"twitter.optimized.png":{"width":600,"height":450,"webpPath":"twitter.optimized.webp","optimizedPath":"twitter.optimized.optimized.png"},"twitter.png":{"width":600,"height":450,"webpPath":"twitter.webp","optimizedPath":"twitter.optimized.png"}}},{"content":"\\r\\nThis post is a summary of the best python libraries for GraphQL. Python in recent years is starting to be on the list of top programming language. GraphQL is emerging but very promising query language and execution engine tied to any backend service. \\r\\n\\r\\nPython is one of the most popular languages used in data science, machine learning and AI systems. GraphQL was introduced by Facebook as an alternative to REST and it\'s popular of flexibility on handling complex systems.\\r\\n\\r\\n#Ariadne\\r\\nAriadne is a Python library for implementing GraphQL servers using schema-first approach. \\r\\n\\r\\nAriadne is a Python library for implementing GraphQL servers.\\r\\n\\r\\n- Schema-first: Ariadne enables Python developers to use schema-first approach to the API implementation. This is the leading approach used by the GraphQL community and supported by dozens of frontend and backend developer tools, examples, and learning resources. Ariadne makes all of this immediately available to your and other members of your team.\\r\\n- Simple: Ariadne offers small, consistent and easy to memorize API that lets developers focus on business problems, not the boilerplate.\\r\\n- Open: Ariadne was designed to be modular and open for customization. If you are missing or unhappy with something, extend or easily swap with your own.\\r\\nDocumentation is available here.\\r\\n\\r\\nFeatures:\\r\\n\\r\\n- Simple, quick to learn and easy to memorize API.\\r\\n- Compatibility with GraphQL.js version 14.0.2.\\r\\n- Queries, mutations and input types.\\r\\n- Asynchronous resolvers and query execution.\\r\\n- Subscriptions.\\r\\n- Custom scalars and enums.\\r\\n- Unions and interfaces.\\r\\n- Defining schema using SDL strings.\\r\\n- Loading schema from .graphql files.\\r\\n- WSGI middleware for implementing GraphQL in existing sites.\\r\\n- Opt-in automatic resolvers mapping between camelCase and snake_case.\\r\\n- Build-in simple synchronous dev server for quick GraphQL experimentation and GraphQL Playground.\\r\\n- Support for Apollo GraphQL extension for Visual Studio Code.\\r\\n- GraphQL syntax validation via gql() helper function. Also provides colorization if Apollo GraphQL extension is installed.\\r\\n\\r\\n####Installation\\r\\n\\r\\n```\\r\\npip install ariadne\\r\\n```\\r\\n\\r\\n####Quickstart\\r\\n\\r\\nThe following example creates an API defining Person type and single query field people returning a list of two persons. It also starts a local dev server with GraphQL Playground available on the http://127.0.0.1:8000 address. Start by installing uvicorn, an ASGI server we will use to serve the API:\\r\\n\\r\\nStart by installing uvicorn, an ASGI server we will use to serve the API:\\r\\n\\r\\n```\\r\\npip install uvicorn\\r\\n```\\r\\n\\r\\nThen create an example.py file for your example application:\\r\\n\\r\\n```python\\r\\nfrom ariadne import ObjectType, QueryType, gql, make_executable_schema\\r\\nfrom ariadne.asgi import GraphQL\\r\\n\\r\\n# Define types using Schema Definition Language (https://graphql.org/learn/schema/)\\r\\n# Wrapping string in gql function provides validation and better error traceback\\r\\ntype_defs = gql(\\"\\"\\"\\r\\n    type Query {\\r\\n        people: [Person!]!\\r\\n    }\\r\\n\\r\\n    type Person {\\r\\n        firstName: String\\r\\n        lastName: String\\r\\n        age: Int\\r\\n        fullName: String\\r\\n    }\\r\\n\\"\\"\\")\\r\\n\\r\\n# Map resolver functions to Query fields using QueryType\\r\\nquery = QueryType()\\r\\n\\r\\n# Resolvers are simple python functions\\r\\n@query.field(\\"people\\")\\r\\ndef resolve_people(*_):\\r\\n    return [\\r\\n        {\\"firstName\\": \\"John\\", \\"lastName\\": \\"Doe\\", \\"age\\": 21},\\r\\n        {\\"firstName\\": \\"Bob\\", \\"lastName\\": \\"Boberson\\", \\"age\\": 24},\\r\\n    ]\\r\\n\\r\\n\\r\\n# Map resolver functions to custom type fields using ObjectType\\r\\nperson = ObjectType(\\"Person\\")\\r\\n\\r\\n@person.field(\\"fullName\\")\\r\\ndef resolve_person_fullname(person, *_):\\r\\n    return \\"%s %s\\" % (person[\\"firstName\\"], person[\\"lastName\\"])\\r\\n\\r\\n# Create executable GraphQL schema\\r\\nschema = make_executable_schema(type_defs, [query, person])\\r\\n\\r\\n# Create an ASGI app using the schema, running in debug mode\\r\\napp = GraphQL(schema, debug=True)\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n#Strawberry\\r\\n\\r\\n\\r\\nStrawberry is a new GraphQL library for Python 3, inspired by dataclasses. An initial version of Strawberry has been released on GitHub. Strawberry was created by @patrick91 who is also an organizer of @pyconit. It was originally announced during Python Pizza Berlin.\\r\\n\\r\\n\\r\\n![](https://thepracticaldev.s3.amazonaws.com/i/jrow1cc45mi8n650eiba.png)\\r\\n\\r\\nhttps://strawberry.rocks/\\r\\n\\r\\n####Installation\\r\\n\\r\\n```\\r\\npip install strawberry-graphql\\r\\n```\\r\\n\\r\\n####Getting Started\\r\\n\\r\\nCreate a file called app.py with the following code:\\r\\n\\r\\n```python\\r\\nimport strawberry\\r\\n\\r\\n\\r\\n@strawberry.type\\r\\nclass User:\\r\\n    name: str\\r\\n    age: int\\r\\n\\r\\n\\r\\n@strawberry.type\\r\\nclass Query:\\r\\n    @strawberry.field\\r\\n    def user(self, info) -> User:\\r\\n        return User(name=\\"Patrick\\", age=100)\\r\\n\\r\\n\\r\\nschema = strawberry.Schema(query=Query)\\r\\n```\\r\\n\\r\\nThis will create a GraphQL schema defining a User type and a single query field user that will return a hard-coded user.\\r\\n\\r\\nTo run the debug server run the following command:\\r\\n\\r\\n```\\r\\nstrawberry run server app\\r\\n```\\r\\n\\r\\nOpen the debug server by clicking on the following link: http://0.0.0.0:8000/graphql\\r\\n\\r\\nThis will open a GraphQL playground where you can test the API.\\r\\n\\r\\n#Graphene\\r\\n\\r\\nGraphene is a Python library for building GraphQL schemas/types fast and easily.\\r\\n\\r\\n- Easy to use: Graphene helps you use GraphQL in Python without effort.\\r\\n- Relay: Graphene has builtin support for Relay.\\r\\n- Data agnostic: Graphene supports any kind of data source: SQL (Django, SQLAlchemy), NoSQL, custom Python objects, etc. We believe that by providing a complete API you could plug Graphene anywhere your data lives and make your data available through GraphQL.\\r\\n\\r\\n####Integrations\\r\\n\\r\\nGraphene has multiple integrations with different frameworks:\\r\\n\\r\\n- Django - graphene-django\\r\\n- SQLAlchemy - graphene-sqlalchemy\\r\\n- Google App Engine - graphene-gae\\r\\n- Peewee - In progress (Tracking Issue)\\r\\n\\r\\nAlso, Graphene is fully compatible with the GraphQL spec, working seamlessly with all GraphQL clients, such as Relay, Apollo and gql.\\r\\n\\r\\n\\r\\n####Installation\\r\\n\\r\\nFor instaling graphene, just run this command in your shell\\r\\n\\r\\n```\\r\\npip install \\"graphene>=2.0\\"\\r\\n```\\r\\n\\r\\n####Examples\\r\\n\\r\\n```python\\r\\nHere is one example for you to get started:\\r\\n\\r\\nclass Query(graphene.ObjectType):\\r\\n    hello = graphene.String(description=\'A typical hello world\')\\r\\n\\r\\n    def resolve_hello(self, info):\\r\\n        return \'World\'\\r\\n\\r\\nschema = graphene.Schema(query=Query)\\r\\n```\\r\\n\\r\\nThen Querying graphene.Schema is as simple as:\\r\\n\\r\\n```python\\r\\nquery = \'\'\'\\r\\n    query SayHello {\\r\\n      hello\\r\\n    }\\r\\n\'\'\'\\r\\nresult = schema.execute(query)\\r\\n```","data":{"title":"Top 3 python libraries for graphql","date":"2019-04-23T10:23:04.284Z","author":"Robert"},"path":"top-3-python-libraries-for-graphql","images":{}},{"content":"\\r\\nOne of the things that differentiate an average developer from a good one is the constant urge for learning and adopting new tools that can simplify one\'s life. Here is a list of five developer tools that can facilitate your life :)\\r\\n\\r\\n\\r\\n### [CloudCraft](https://cloudcraft.co/)\\r\\n**CloudCraft** is a fancy tool allowing you to design your cloud architecture in no time. This tool allows you to build a smart **AWS diagram** and calculate the cost of the services. Isn\'t that cool?\\r\\n[![Visualize you cloud architecture](cloudcraft.png)](https://cloudcraft.co/)\\r\\n\\r\\n### [BundlePhobia](https://bundlephobia.com)\\r\\n> #### **bundle phobia**\\r\\n> /\u02c8b\u028cnd(\u0259)l f\u0259\u028ab\u026a\u0259/\\r\\n> \\r\\n> an irrational fear of possible consequences of adding new npm package to your bundle.\\r\\n\\r\\nIf you live in a constant fear that adding a npm package to your project will destroy it, this is a tool for you. **BundlePhobia** lets you understand the performance cost of `npm install`ing any package before actually adding it to your project.\\r\\n\\r\\n[![No more dangerous bundles](bundlephobia.png)](https://bundlephobia.com)\\r\\n\\r\\n\\r\\n\\r\\n### [GraphQL Editor](https://graphqleditor.com/)\\r\\n\\r\\nGraphQL is a query language for APIs, it shows types of data provided by the server and then the client can fetch exactly what it needs in one call rather than making multiple REST API calls. The schema is a crucial part of any GraphQL project and **GraphQL Editor** makes building or understanding existing GraphQL schema a lot easier as you can plan it by linking visual nodes. Features like loading schema from URL/file or a fake backend data can speed up the prototyping of your app by a lot!\\r\\n\\r\\n[![GraphQL Schema that can be turned into a production-ready backend](gqle.png)](https://graphqleditor.com/)\\r\\n\\r\\n\\r\\n### [Amplify Framework](https://aws-amplify.github.io/)\\r\\n\\r\\nWant to build a cloud base app? This is the only tool you need! **Amplify Framework by AWS** is a library for building fully-featured apps! The framework allows you to easily connect micro-services for:\\r\\n- *API*\\r\\n- *Analytics*\\r\\n- *Authentication*\\r\\n- *Notifications*\\r\\n- *Storage* \\r\\n\\r\\nand many more with just a few lines of code! The Amplify also offers a vast range of beautiful out-of-the-box **UI components** ready to take your app to the next level!\\r\\n\\r\\n[![Library for building your fancy cloud-powered apps](amplify.png)](https://aws-amplify.github.io/)\\r\\n\\r\\n### [Flare](https://www.2dimensions.com/about-flare)\\r\\n\\r\\n\\r\\n*Flare* is a powerful design and animation tool, which allows designers and developers to easily add high-quality animation to their apps and games. With Flare you can create:\\r\\n\\r\\n- *sophisticated interactions* \\r\\n- *animated icons*\\r\\n- *onboarding screens*\\r\\n- *game characters*\\r\\n\\r\\nThese are real design assets that run in your app - they don\'t need to be recreated in code! This makes future modifications super easy!\\r\\n\\r\\n\\r\\n[![Super cool animations](flare.gif)](https://www.2dimensions.com/about-flare)","data":{"title":"5 Developer Tools you need to check out!","date":"2019-04-15T13:37:00.284Z","image":"devtools.png","author":"Tomek"},"path":"Developer-Tools","images":{"amplify.optimized.png":{"width":600,"height":280,"webpPath":"amplify.optimized.webp","optimizedPath":"amplify.optimized.optimized.png"},"amplify.png":{"width":1576,"height":736,"webpPath":"amplify.webp","optimizedPath":"amplify.optimized.png"},"bundlephobia.optimized.png":{"width":600,"height":280,"webpPath":"bundlephobia.optimized.webp","optimizedPath":"bundlephobia.optimized.optimized.png"},"bundlephobia.png":{"width":1576,"height":736,"webpPath":"bundlephobia.webp","optimizedPath":"bundlephobia.optimized.png"},"cloudcraft.optimized.png":{"width":600,"height":280,"webpPath":"cloudcraft.optimized.webp","optimizedPath":"cloudcraft.optimized.optimized.png"},"cloudcraft.png":{"width":1576,"height":736,"webpPath":"cloudcraft.webp","optimizedPath":"cloudcraft.optimized.png"},"devtools.optimized.png":{"width":600,"height":252,"webpPath":"devtools.optimized.webp","optimizedPath":"devtools.optimized.optimized.png"},"devtools.png":{"width":1000,"height":420,"webpPath":"devtools.webp","optimizedPath":"devtools.optimized.png"},"flare.gif":{"width":600,"height":338,"webpPath":"flare.webp","optimizedPath":"flare.optimized.gif.png"},"flare.optimized.gif.png":{"width":600,"height":338,"webpPath":"flare.optimized.gif.webp","optimizedPath":"flare.optimized.gif.optimized.png"},"gqle.optimized.png":{"width":600,"height":280,"webpPath":"gqle.optimized.webp","optimizedPath":"gqle.optimized.optimized.png"},"gqle.png":{"width":1576,"height":736,"webpPath":"gqle.webp","optimizedPath":"gqle.optimized.png"}}},{"content":"\\r\\nLooking for a way of improving your design-development workflow? You need a design system! Why? Because it will help you work better, much faster & will take your team collaboration to the next level! \\r\\n\\r\\nDesign system is a very popular concept, arousing a lot of emotions and interest recently ...  even the government of United States of America has one they call [U.S. Web Design System](https://designsystem.digital.gov/).\\r\\n\\r\\n\\r\\n\\r\\n![](https://thepracticaldev.s3.amazonaws.com/i/8q7c5pkv4f927qajmkbu.png)\\r\\n\\r\\n### What\'s Design System\\r\\n\\r\\nA design system is a collection of reusable graphical components, design standards, style guides, which define **a common visual language** for product teams. It accelerates the design process and bridges the gap between teams involved in building a final product by having clear graphics standards, that makes assembling websites from components super easy. So basically the design system is a rulebook for graphical and development teams which we can breakdown like that:\\r\\n\\r\\n- **Design System** \u2013 the complete set of design standards along with principles, patterns & code components to achieve them,\\r\\n\\r\\n- **Pattern Library** \u2013 a subclass of a design system which defines allowed design patterns,\\r\\n\\r\\n- **Style guide** \u2013 a subclass showing how products should look, containing use cases for UI patterns, typography etc.\\r\\n\\r\\n![Design System](design_system.png)\\r\\n\\r\\nSource: [Zack Rutherford for Studio by UXPin](https://www.uxpin.com/studio/blog/design-systems-vs-pattern-libraries-vs-style-guides-whats-difference/)\\r\\n\\r\\n### The benefits\\r\\n\\r\\nDesign systems provide consistency in designing new elements of your company or product visual identification. Design system creates straightforward and beautiful experiences for end-user as well as product team makes collaboration a lot easier for:\\r\\n\\r\\n- **designers** as they can breakdown the design-process into smaller parts, easier to work on, manage, change than the whole webpage, \\r\\n\\r\\n- **developers** so they clear vision of how to build required components to maintain the unified styles,\\r\\n\\r\\n- **product owners/managers** as component-based approach makes requesting development teams for additional page elements a super easy process\\r\\n\\r\\n### Examples\\r\\nYou have all probably heard about the famous **[Material Design](https://material.io/)** by Google:\\r\\n\\r\\n[![Material Design](material.png)](https://material.io/)\\r\\n\\r\\nbut that\'s not the only one you can draw inspiration from as big companies like IBM, Audi or Atlassian make their design system publicly available. Here you can take a look at a couple of them:\\r\\n\\r\\n**[Carbon React Components by IBM](http://react.carbondesignsystem.com/)**\\r\\n\\r\\n[![Carbon React Components by IBM](ibm.png)](http://react.carbondesignsystem.com/)\\r\\n\\r\\n**[Zendesk Garden](https://garden.zendesk.com/)**\\r\\n\\r\\n[![Zendesk Garden](zendesk.png)](https://garden.zendesk.com/)\\r\\n\\r\\n**[Atlassian Design System](https://atlassian.design/)**\\r\\n\\r\\n[![Atlasian](atlasian.png)](https://atlassian.design/)\\r\\n\\r\\n**[Polaris by Shopify](https://polaris.shopify.com/)**\\r\\n\\r\\n[![Polaris](polaris.png)](https://polaris.shopify.com/)\\r\\n\\r\\n### Looking for more?\\r\\n\\r\\nMake sure to visit https://designsystemsrepo.com/design-systems/ for more samples & inspirations!\\r\\n\\r\\n\\r\\n","data":{"title":"What\'s Design System and why you need one?","date":"2019-04-10T13:37:00.284Z","image":"design.png","author":"Tomek"},"path":"Design-System","images":{"atlasian.optimized.png":{"width":600,"height":314,"webpPath":"atlasian.optimized.webp","optimizedPath":"atlasian.optimized.optimized.png"},"atlasian.png":{"width":1200,"height":628,"webpPath":"atlasian.webp","optimizedPath":"atlasian.optimized.png"},"design.optimized.png":{"width":600,"height":252,"webpPath":"design.optimized.webp","optimizedPath":"design.optimized.optimized.png"},"design.png":{"width":1000,"height":420,"webpPath":"design.webp","optimizedPath":"design.optimized.png"},"design_system.optimized.png":{"width":600,"height":386,"webpPath":"design_system.optimized.webp","optimizedPath":"design_system.optimized.optimized.png"},"design_system.png":{"width":1400,"height":900,"webpPath":"design_system.webp","optimizedPath":"design_system.optimized.png"},"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"ibm.optimized.png":{"width":600,"height":314,"webpPath":"ibm.optimized.webp","optimizedPath":"ibm.optimized.optimized.png"},"ibm.png":{"width":1200,"height":628,"webpPath":"ibm.webp","optimizedPath":"ibm.optimized.png"},"material.optimized.png":{"width":600,"height":314,"webpPath":"material.optimized.webp","optimizedPath":"material.optimized.optimized.png"},"material.png":{"width":1200,"height":628,"webpPath":"material.webp","optimizedPath":"material.optimized.png"},"polaris.optimized.png":{"width":600,"height":314,"webpPath":"polaris.optimized.webp","optimizedPath":"polaris.optimized.optimized.png"},"polaris.png":{"width":1200,"height":628,"webpPath":"polaris.webp","optimizedPath":"polaris.optimized.png"},"webdev.optimized.png":{"width":600,"height":405,"webpPath":"webdev.optimized.webp","optimizedPath":"webdev.optimized.optimized.png"},"webdev.png":{"width":1960,"height":1322,"webpPath":"webdev.webp","optimizedPath":"webdev.optimized.png"},"zendesk.optimized.png":{"width":600,"height":314,"webpPath":"zendesk.optimized.webp","optimizedPath":"zendesk.optimized.optimized.png"},"zendesk.png":{"width":1200,"height":628,"webpPath":"zendesk.webp","optimizedPath":"zendesk.optimized.png"}}},{"content":"\\r\\nA **GraphQL Java Cheat Sheet** to help you understand what is what in GraphQL Java world. You might find it useful if you:\\r\\n> - Want to learn GraphQL Java\\r\\n> - Feel confused by all the Java GraphQL libraries\\r\\n> - Want to try GraphQL Java in your project, but not sure how to start\\r\\n\\r\\n### Gradle or Maven?\\r\\n\\r\\n[Gradle](https://gradle.org/) and [Maven](https://maven.apache.org/) are the most popular build automation tools. \\r\\nWhich one you should choose? I can not provide you an answer to that question as this decision is to a large extent up to you and it depends on variables like your project\'s size or how much customization it needs. The tools like [Spring](https://spring.io/) and the constantly increasing amount of integration make it\'s quite a personal decision. As both approaches have their strengths and weaknesses, I hope this short summary can help you choose the right one for your project.\\r\\n\\r\\n|                                             |                   Gradle                    |                          Maven                           |\\r\\n| ------------------------------------------- | :-----------------------------------------: | :------------------------------------------------------: |\\r\\n| *builds approach*                           |    based on a graph of task dependencies    |       based on a fixed and linear model of phases        |\\r\\n| *dynamic and transitive dependencies*       |                   **yes**                   |                         **yes**                          |\\r\\n| *artifact repositories*                     |                   JCenter                   |                      Maven Central                       |\\r\\n| *private company repository*                |                   **yes**                   |                         **yes**                          |\\r\\n| *custom rules, resolving version conflicts* |                   **yes**                   |                            no                            |\\r\\n| *advance task orderings*                    |                   **yes**                   |                            no                            |\\r\\n| *administering build infrastructure*        | uses wrappers that accept auto provisioning | require an extension to support self-provisioning builds |\\r\\n\\r\\nTo sum up, Gradle is much more powerful than Maven, but in many cases, you won\'t need to use its fancy features. If you are working on a small project you should consider Maven, if it\'s a big enterprise application Gradle seems to be the right choice. In the end, it\'s your personal choice.\\r\\n\\r\\n\\r\\n### Libraries\\r\\n\\r\\nThere are a couple of GraphQL Java related libraries. The only library that is strictly required is a `graphql-java` which is the GraphQL implementation itself, but there are many others that you might find useful:\\r\\n\\r\\n- **[graphql-java](https://github.com/graphql-java/graphql-java)**: The alpha and omega of any project, the GraphQL Java implementation itself.\\r\\n\\r\\n- **[graphql-java-tools](https://github.com/graphql-java-kickstart/graphql-java-tools)**: The library that allows you to use the GraphQL schema language to [build your GraphQL schema](https://graphqleditor.com/). It\'s inspired by [Apollo\'s graphql-tools](https://github.com/apollographql/graphql-tools), it parses the given GraphQL schema and allows you to bring your own object to fill in the implementations.\\r\\n\\r\\n- **[graphql-spring-boot](https://github.com/graphql-java-kickstart/graphql-spring-boot)**: A lib that contains various Spring Boot starters to enable GraphQL related services and features.\\r\\n\\r\\n- **[graphql-java-servlet](https://github.com/graphql-java-kickstart/graphql-java-servlet)**: The implementation of GraphQL Java Servlet including support for popular libraries like [Relay.js](https://github.com/facebook/relay), [Apollo](https://github.com/apollographql), and [OSGi](https://www.osgi.org/) out of the box; wraps the Java implementation of GraphQL provided by GraphQL Java.\\r\\n\\r\\n- **[graphql-java-annotations](https://github.com/Enigmatis/graphql-java-annotations)**: The library that offers an annotations-based syntax for GraphQL schema definition.\\r\\n\\r\\n### DEV.TO GraphQL Java articles\\r\\n\\r\\n- [First impressions with GraphQL in Java](https://dev.to/committedsw/first-impressions-with-graphql-in-java-5c82) by [@committedsw](https://dev.to/committedsw)\\r\\n- [Notes from experimenting with GraphQL and Kotlin](https://dev.to/baens/notes-from-experimenting-with-graphql-and-kotlin-k8) by [@baens](https://dev.to/baens)\\r\\n- [Getting Started with GraphQL Java](https://dev.to/tomekponiat/getting-started-with-graphql-java-13j1) by [@tomekponiat](https://dev.to/tomekponiat)\\r\\n- [How to Build GraphQL Services in Java with Spring Boot](https://dev.to/sambenskin/howto-build-graphql-services-in-java-with-spring-boot---part-1-38b2) by [@sambenskin](https://dev.to/sambenskin)\\r\\n\\r\\n\\r\\n### Tutorials and other resources\\r\\n- [Gradel Tutorials and Guides](https://gradle.org/guides/)\\r\\n- [Maven in 5 Minutes](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)\\r\\n- [How to get your GraphQL Java server up and running in no time](https://medium.freecodecamp.org/graphql-java-development-stack-in-production-21f402c4c37a)\\r\\n- [graphql-java Tutorial](https://www.howtographql.com/graphql-java/0-introduction/)\\r\\n- [Migratiing Builds From Apache Maven](https://docs.gradle.org/current/userguide/migrating_from_maven.html)\\r\\n\\r\\n### Video tutorials:\\r\\n\\r\\n**Spring Boot with GraphQL Query Example - Tech Primers**\\r\\n[![](vid1.png)](https://www.youtube.com/watch?v=zX2I7-aIldE)\\r\\n\\r\\n**Building a GraphQL Server with Kotlin and graphql-java - Michael Hunger** \\r\\n[![](vid2.png)](https://www.youtube.com/watch?v=3-yyEaQfm9c)\\r\\n\\r\\n**Developing and maintaining a Java GraphQL back-end - Bojan Tomic**\\r\\n[![](vid3.png)](https://www.youtube.com/watch?v=1zIHHi2MaQE)\\r\\n\\r\\n","data":{"title":"GraphQL Java Cheat Sheet","date":"2019-04-08T13:37:00.284Z","image":"gqljava.png","author":"Tomek"},"path":"GraphQL-Java-Cheat-Sheet","images":{"gqljava.optimized.png":{"width":600,"height":314,"webpPath":"gqljava.optimized.webp","optimizedPath":"gqljava.optimized.optimized.png"},"gqljava.png":{"width":1200,"height":628,"webpPath":"gqljava.webp","optimizedPath":"gqljava.optimized.png"},"vid1.optimized.png":{"width":600,"height":336,"webpPath":"vid1.optimized.webp","optimizedPath":"vid1.optimized.optimized.png"},"vid1.png":{"width":705,"height":395,"webpPath":"vid1.webp","optimizedPath":"vid1.optimized.png"},"vid2.optimized.png":{"width":600,"height":334,"webpPath":"vid2.optimized.webp","optimizedPath":"vid2.optimized.optimized.png"},"vid2.png":{"width":707,"height":394,"webpPath":"vid2.webp","optimizedPath":"vid2.optimized.png"},"vid3.optimized.png":{"width":600,"height":338,"webpPath":"vid3.optimized.webp","optimizedPath":"vid3.optimized.optimized.png"},"vid3.png":{"width":707,"height":398,"webpPath":"vid3.webp","optimizedPath":"vid3.optimized.png"}}},{"content":"OOne of the best things about GraphQL is that it can be implemented in any language. Today let\u2019s take a look at Java server implementation for GraphQL. Let\u2019s use Maven and assume that we already have set up the project structure. What next?\\r\\n\\r\\n\\r\\n### Dependencies\\r\\nTo run GraphQL in your Java project you only need one library which is  [GraphQL Java](https://github.com/graphql-java/graphql-java) implementation. However, there are a couple of libs you might find useful when using GraphQL Java:\\r\\n- [Spring Boot](https://github.com/graphql-java/graphql-java-spring) - GraphQL Java Spring and Spring Boot integration that will handle any HTTP related tasks, expose the GraphQL service on the `/graphql` endpoint of your app and accept `POST` requests containing your GraphQL payload. \\r\\n- [GraphQL Java Tools](https://github.com/graphql-java-kickstart/graphql-java-tools) - this library allows you to use the GraphQL SDL to build your graphql-java schema. \\r\\n- [GraphQL Java Servlet](https://github.com/graphql-java-kickstart/graphql-java-servlet) - implementation of GraphQL Java Servlet including support for libraries like Relay.js, Apollo etc. and wraps the Java implementation of GraphQL provided by GraphQL Java.\\r\\n\\r\\nSo add dependencies you need to Project Object Model file (pom.xml):\\r\\n![Add GraphQL Java dependency](dependencies.png)\\r\\n\\r\\n### Define the schema\\r\\nGraphQL Schema is the centerpiece of any GraphQL implementation so we definitely need one before going any further. To make it easier to understand the operation that a server can perform GraphQL defined a universal schema syntax know as SDL (Schema Definition Language). \\r\\n\\r\\nThe SDL defines the elements of your project like:\\r\\n\\r\\n- **`type`** (the most basic GraphQL schema components):\\r\\n![GraphQL Type](type.png)\\r\\n\\r\\n- **`query`** (asking the server for the data) \\r\\n![GraphQL Query](query.png)\\r\\n\\r\\n- **`mutation`** (manipulating the data):\\r\\n![GraphQL Mutation](mutation.png)\\r\\n\\r\\n The fastest way to define your schema is to use [GraphQL Editor](https://graphqleditor.com/). It allows you to define your schema traditionally (code) or shape it from visual nodes.\\r\\n[![Low-code GraphQL Editor](https://thepracticaldev.s3.amazonaws.com/i/sjaue0skobsp62kedwbt.png)](https://graphqleditor.com/)\\r\\n\\r\\n\\r\\n### Server\\r\\n\\r\\nThere plenty of servlet containers to choose from, both open source and commercial,  so just pick the one you feel comfortable with. Let\'s use Jetty for our example and   implement it via a [Maven Plugins](https://maven.apache.org/pom.html#Plugins):\\r\\n![Jetty](https://thepracticaldev.s3.amazonaws.com/i/8za6ezzwuuc83khlaaf6.png)\\r\\n\\r\\nAnd you are almost there, the next steps are:\\r\\n- adding some more basic server configurations like right Java version or servlet specification\\r\\n- creating **`GraphQLEndpoint`** class for exposing your API\\r\\n- defining resolvers\\r\\n\\r\\n\\r\\nIf you want to read more details about GraphQL Java implementation to take a look at Bojan\'s tutorial regarding setting up [GraphQL Java](https://www.howtographql.com/graphql-java/1-getting-started/) server on https://www.howtographql.com/\\r\\n","data":{"title":"Getting started with GraphQL Java","date":"2019-03-29T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"Getting-started-with-GraphQL-Java","images":{"dependencies.optimized.png":{"width":600,"height":283,"webpPath":"dependencies.optimized.webp","optimizedPath":"dependencies.optimized.optimized.png"},"dependencies.png":{"width":2960,"height":1396,"webpPath":"dependencies.webp","optimizedPath":"dependencies.optimized.png"},"editor.optimized.png":{"width":600,"height":332,"webpPath":"editor.optimized.webp","optimizedPath":"editor.optimized.optimized.png"},"editor.png":{"width":1468,"height":812,"webpPath":"editor.webp","optimizedPath":"editor.optimized.png"},"gqljava.optimized.png":{"width":600,"height":314,"webpPath":"gqljava.optimized.webp","optimizedPath":"gqljava.optimized.optimized.png"},"gqljava.png":{"width":1200,"height":628,"webpPath":"gqljava.webp","optimizedPath":"gqljava.optimized.png"},"jetty.optimized.png":{"width":600,"height":371,"webpPath":"jetty.optimized.webp","optimizedPath":"jetty.optimized.optimized.png"},"jetty.png":{"width":2960,"height":1828,"webpPath":"jetty.webp","optimizedPath":"jetty.optimized.png"},"mutation.optimized.png":{"width":600,"height":217,"webpPath":"mutation.optimized.webp","optimizedPath":"mutation.optimized.optimized.png"},"mutation.png":{"width":2960,"height":1072,"webpPath":"mutation.webp","optimizedPath":"mutation.optimized.png"},"query.optimized.png":{"width":600,"height":239,"webpPath":"query.optimized.webp","optimizedPath":"query.optimized.optimized.png"},"query.png":{"width":2960,"height":1180,"webpPath":"query.webp","optimizedPath":"query.optimized.png"},"type.optimized.png":{"width":600,"height":349,"webpPath":"type.optimized.webp","optimizedPath":"type.optimized.optimized.png"},"type.png":{"width":2960,"height":1720,"webpPath":"type.webp","optimizedPath":"type.optimized.png"}}},{"content":"\\r\\nThis year will for sure bring new ideas to the web development as well as cultivate some well-known ones. To provide you with an insight into what is going to happen this year, these are the trends that will continue to dominate the development of the network.\\r\\n\\r\\n### Progressive Web Apps\\r\\nProgressive Web Apps (PWA) is a new approach to building applications by combing the best features of the web with the top qualities of mobile apps. PWA has no entry barrier as no install is required. From the very launch in a browser, PWA slowly builds a \u201crelationship\u201d with its user over time by providing features like blazingly fast loading time (even on low-performing networks), communicating relevant information with push notifications or as simple things as easier access by the home-screen icon.\\r\\n\\r\\nThe key advantages of Progressive Web App are:\\r\\n- **Progressive & responsive** - *works the same for every user, regardless of browser choice or device*\\r\\n- **Connectivity independent** - *designed to work offline or on a low-performing network connection.*\\r\\n- **Engageable & shareable** - *users can add apps to their home screen (by-passes app stores) & share easily via URL.*\\r\\n\\r\\n![PWA](pwa.png)\\r\\n###### Source: [Google Developers](https://developers.google.com/web/progressive-web-apps/)\\r\\n\\r\\n### Low-code development solutions\\r\\nLCDPs are visual-based design system which means that the amount of coding is often reduced to zero and that of most of it is replaced by a draw/drag-and-drop system. The rising demand for automation and innovation in many different industries requires:\\r\\n- *Faster development process*,\\r\\n- *Easier deployment*,\\r\\n- *Cost reduction*.\\r\\n\\r\\nThis allows building apps faster (shorter time-to-market) and is expected to push the low-code development trend into its highest high in the next couple of years, which would make tools like [Fuse Open](https://fuseopen.com/) (*mobile apps*), [BuildBox](https://www.buildbox.com/) (*mobile games*), [Airtable](https://airtable.com/product) (*spreadsheet-database*) or  [GraphQL Editor](https://graphqleditor.com/) (*GraphQL schema design*) observe the rise of popularity.\\r\\n\\r\\n![Low-code GraphQL Editor](graphql.png)\\r\\n\\r\\n### Cybersecurity\\r\\n\\r\\n> *We no longer go online, we live online.*\\r\\n\\r\\nIt\'s a truth hard to swallow but we are ruled by the Internet. It took control of our lives. We work, learn, shop & spend our free time online. More and more aspects of our lives are becoming digitalized so no wonder that our security online has become one of the most (if not the most) important issue. Since we are more tend to upload our confidential data like credit cards, IDs and other to the web, it makes data breaches & cyber threats becoming more frightening than ever before. As recent history has shown, no one is safe. In 2018 we had some major data breaches including Starwood-Marriot (500 million users data), Quora (100 million) and 2019 started with shocking information that since 2012 Facebook has not properly secured the passwords of as many as 600 million users. These passwords were stored in plain text and able to be accessed by more than 20,000 of Facebook\u2019s employees. \\r\\n\\r\\n![Data Breaches](breaches.png)\\r\\n\\r\\n###### Source: [Avast Blog](https://blog.avast.com/biggest-data-breaches)\\r\\n\\r\\nWith that in mind, companies need to improve their security system to protect their (and their users) private data. Cybercriminals won\u2019t stop to look for vulnerabilities and new solutions are necessary to battle new cybersecurity challenges.\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Top 3 Development trends of 2019","date":"2019-03-29T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"Top-3-Development-trends-of-2019","images":{"breaches.optimized.png":{"width":600,"height":312,"webpPath":"breaches.optimized.webp","optimizedPath":"breaches.optimized.optimized.png"},"breaches.png":{"width":1600,"height":833,"webpPath":"breaches.webp","optimizedPath":"breaches.optimized.png"},"gql.optimized.png":{"width":600,"height":339,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":900,"height":508,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"graphql.optimized.png":{"width":600,"height":332,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":1468,"height":812,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"pwa.optimized.png":{"width":600,"height":338,"webpPath":"pwa.optimized.webp","optimizedPath":"pwa.optimized.optimized.png"},"pwa.png":{"width":1850,"height":1042,"webpPath":"pwa.webp","optimizedPath":"pwa.optimized.png"}}},{"content":"\\r\\n##Introduction\\r\\n\\r\\nIt\'s hard to choose what to learn when you\'re starting your journey as a frontend developer. There\'re plenty of sources, courses, tutorials or frameworks to choose from. You might get confused starting researching all above. One practical approach is a craftsman road where you learn the process by tools. I\'ve created a list of top tools for junior frontend developer and explained why you should use them. Follow me to get more tutorials!\\r\\n\\r\\n#GitHub\\r\\n\\r\\nGitHub is a web-based hosting service for version control using Git. It offers all of the distributed version control and source code management (SCM) functionality of Git as well as adding its other features. It provides access control and several collaboration features such as bug tracking, feature requests, task management, and wikis for every project. Github is also a great community where you find and collaborate a lot of open source projects. \\r\\n\\r\\n![](https://github.githubassets.com/images/modules/explore/social.jpg)\\r\\n\\r\\n#Chrome Dev Tools\\r\\n\\r\\nIt\'s a set of developer tools built into the Chrome browser. With DevTools you can access the internals of any web application, see how it performs on different screen sizes and change any page. You can edit pages real-time and diagnose problems quickly. It ultimately helps you build better websites and faster. Additional network tools can help you optimise your loading flows while a timeline gives you a knowledge of what the browser is doing at the moment.\\r\\n\\r\\n![](https://developers.google.com/web/tools/chrome-devtools/images/panels/elements.png)\\r\\n\\r\\n#React Developer Tools\\r\\n\\r\\nReact is a popular javascript framework among web development last years.  However, Google Chrome Developer tools cannot examine the Dom as React Components. Don\u2019t be confused; there is a Chrome Extension called React Developer Tools that allows you to get into the nitty-gritty of how data is passed through components.\\r\\n\\r\\n![](https://camo.githubusercontent.com/3fd1137b6b254da8c5596acf7b8583246fd76e29/687474703a2f2f692e696d6775722e636f6d2f6a5969655271692e706e67)\\r\\n\\r\\n#Pixel Perfect \\r\\n\\r\\nThis chrome extension helps develop your websites with per-pixel sharpness! It\'s for web developers and markup designers. PerfectPixel allows developers to put a half-transparent image overlay over the top of the developed HTML and perform pixel perfect comparison among them.\\r\\n\\r\\n![](http://www.welldonecode.com/img/screenshot.jpg)\\r\\n\\r\\n#Visual Code Editor\\r\\n\\r\\nVisual Studio Code\xa0is the number one code editor for building and debugging modern web and cloud applications.\xa0It\u2019s very customizable, has built-in git, massive list of integrations, powerful autocomplete and debugging features. It\u2019s a powerful multilanguage IDE, super fast and simple. Also, free an open source. \\r\\n\\r\\n![](https://code.visualstudio.com/assets/docs/getstarted/userinterface/hero.png)\\r\\n\\r\\n#Codepen\\r\\n\\r\\nCodepen it\u2019s amazing web-based and community-driven code editor. You can see right away results of code. It\u2019s a magic place for designers and front end developers where people are sharing and commenting on their front end skills.  It\u2019s a great source of inspiration for new ideas and ways to code.  The editor is used for: prototyping new ideas, instant bug testing, sending clients things to look at, evaluating potential hires and finding inspiration.\xa0\\r\\n\\r\\n\\r\\n#GraphQL and GraphQL Editor\\r\\n\\r\\nGraphQL is a query language for APIs. It\'s very trendy nowadays and recognised by leading tech organisations. GraphQL Editor makes understanding GraphQL schema a lot easier. Plan it out by linking visual blocks and our editor will transform them into a code! Create fake backend out of GraphQL, and you could power up your application.\\r\\n\\r\\n![](https://thepracticaldev.s3.amazonaws.com/i/l712vn5w612l0qp2q6na.png)(https://app.graphqleditor.com/demo/blog-sample)\\r\\n\\r\\n#Npm\\r\\n\\r\\nIt\'s a package manager for JS. It helps to find packages of reusable code and compile them in new ways. It has over 470,000 free code packages in the database to be used by you. This web dev tool is a command-line utility for interacting with a repository that aids in the package. It also has team features with your private namespace.  \\r\\n\\r\\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Npm-logo.svg/1200px-Npm-logo.svg.png)\\r\\n\\r\\n#Webpack\\r\\n\\r\\nIt\'s a bundler for javascript and friends which packs many modules into a few bundled assets. Code Splitting allows for loading parts of the application on demand. Through \\"loaders\\", modules can be CommonJs, AMD, ES6 modules, CSS, Images, JSON, CoffeeScript, LESS, ... and your custom stuff.\\r\\n\\r\\n![](https://scotch-res.cloudinary.com/image/upload/dpr_3,w_350,q_auto:good,f_auto/media/5000/UsIrFFPwStmuuAaidk7k_Screen%20Shot%202017-11-30%20at%204.28.18%20AM.png)\\r\\n\\r\\n#Figma\\r\\n\\r\\nFigma is a design app but very trendy and good to collaborate with designers. Every Figma file has Code Mode where a developer can inspect design files. When designer share view-only files with the developer, he will have access to Code Mode where they can examine, comment, and export without having full edit access to the files.\\r\\n\\r\\n![](https://images.ctfassets.net/1khq4uysbvty/QsIb6oxyNLMrTAkoSAkGX/b722f50d920244dfdf1d20341497924b/Figma_Home_OG.png)\\r\\n\\r\\n#Web.dev\\r\\n\\r\\nEvery web project needs proper feedback and testing. With this tool, you can check how your website performs according to modern standards. You can measure things: performance, PWA status, accessibility or SEO. Also, you can practice skills: like load speed, network resilience or data security. Check how your website performs over time, and keep track as you learn on your schedule. \\r\\n\\r\\n![](https://web.dev/images/social.png)\\r\\n\\r\\n#Terminal\\r\\n\\r\\nA terminal is a text-based interface\xa0you can type your\xa0commands\xa0in. A\xa0shell\xa0takes these commands and tells the operating system to execute them. Getting familiar with tools like Git from the terminal gives you more power and flexibility over GUI. In the end, a GUI is a graphical shell in front of a command-line tool. Being \u201ccloser to the metal\u201d, it can also help you to get out of trouble in case a GUI is stuck or messed up. It\'s an essential productivity tool in a developer\'s arsenal. \\r\\n\\r\\n![](https://help.apple.com/assets/5B9190B30946221279C5A608/5B9190B30946221279C5A60F/en_US/dfa4eabaceda47fa30991ecfd2c28d7c.png)\\r\\n\\r\\n#Others\\r\\n\\r\\n- Caniuse.com - are you worried about browser compatibility for some cutting edge ideas? Try this site and see if you can use it. \\r\\n- StackOverflow - that site doesn\'t need explanation ;)\\r\\n- TinyPNG- Advanced lossy compression for PNG images\\r\\n- Compressor.io - another image compression tool\\r\\n- Notion.so -  recording notes, specs, product owner feedback and planning.\\r\\n- Postman - when working with REST APIs.","data":{"title":"Top tools for a junior frontend developer","date":"2019-03-19T11:05:04.284Z","author":"Robert"},"path":"top-tools-for-a-junior-frontend-developer.jpg","images":{"chrome dev tools.optimized.png":{"width":600,"height":457,"webpPath":"chrome dev tools.optimized.webp","optimizedPath":"chrome dev tools.optimized.optimized.png"},"chrome dev tools.png":{"width":880,"height":670,"webpPath":"chrome dev tools.webp","optimizedPath":"chrome dev tools.optimized.png"},"Codepen.jpg":{"width":690,"height":570,"webpPath":"Codepen.webp","optimizedPath":"Codepen.optimized.jpg"},"Codepen.optimized.jpg":{"width":600,"height":496,"webpPath":"Codepen.optimized.webp","optimizedPath":"Codepen.optimized.optimized.jpg"},"Figma.optimized.png":{"width":600,"height":315,"webpPath":"Figma.optimized.webp","optimizedPath":"Figma.optimized.optimized.png"},"Figma.png":{"width":880,"height":462,"webpPath":"Figma.webp","optimizedPath":"Figma.optimized.png"},"github.jpg":{"width":880,"height":462,"webpPath":"github.webp","optimizedPath":"github.optimized.jpg"},"github.optimized.jpg":{"width":600,"height":315,"webpPath":"github.optimized.webp","optimizedPath":"github.optimized.optimized.jpg"},"GraphQL Editor.optimized.png":{"width":600,"height":383,"webpPath":"GraphQL Editor.optimized.webp","optimizedPath":"GraphQL Editor.optimized.optimized.png"},"GraphQL Editor.png":{"width":880,"height":561,"webpPath":"GraphQL Editor.webp","optimizedPath":"GraphQL Editor.optimized.png"},"Npm.optimized.png":{"width":600,"height":233,"webpPath":"Npm.optimized.webp","optimizedPath":"Npm.optimized.optimized.png"},"Npm.png":{"width":880,"height":342,"webpPath":"Npm.webp","optimizedPath":"Npm.optimized.png"},"pixel perfect.jpg":{"width":880,"height":550,"webpPath":"pixel perfect.webp","optimizedPath":"pixel perfect.optimized.jpg"},"pixel perfect.optimized.jpg":{"width":600,"height":375,"webpPath":"pixel perfect.optimized.webp","optimizedPath":"pixel perfect.optimized.optimized.jpg"},"react dev tools.optimized.png":{"width":600,"height":215,"webpPath":"react dev tools.optimized.webp","optimizedPath":"react dev tools.optimized.optimized.png"},"react dev tools.png":{"width":1580,"height":566,"webpPath":"react dev tools.webp","optimizedPath":"react dev tools.optimized.png"},"Terminal.optimized.png":{"width":600,"height":472,"webpPath":"Terminal.optimized.webp","optimizedPath":"Terminal.optimized.optimized.png"},"Terminal.png":{"width":880,"height":692,"webpPath":"Terminal.webp","optimizedPath":"Terminal.optimized.png"},"Visual Code Editor.optimized.png":{"width":600,"height":412,"webpPath":"Visual Code Editor.optimized.webp","optimizedPath":"Visual Code Editor.optimized.optimized.png"},"Visual Code Editor.png":{"width":880,"height":604,"webpPath":"Visual Code Editor.webp","optimizedPath":"Visual Code Editor.optimized.png"},"Web.dev.optimized.png":{"width":600,"height":600,"webpPath":"Web.dev.optimized.webp","optimizedPath":"Web.dev.optimized.optimized.png"},"Web.dev.png":{"width":880,"height":880,"webpPath":"Web.dev.webp","optimizedPath":"Web.dev.optimized.png"},"Webpack.optimized.png":{"width":600,"height":278,"webpPath":"Webpack.optimized.webp","optimizedPath":"Webpack.optimized.optimized.png"},"Webpack.png":{"width":880,"height":408,"webpPath":"Webpack.webp","optimizedPath":"Webpack.optimized.png"}}},{"content":"\\r\\n\\r\\n## Being short-sighted\\r\\nIt\u2019s a mistake that can lead to serious complications later on. Thinking about your schema try being as predictive as possible in terms what can be required later on when your project grow. Even if you think that initial odds of this happening seems very low, take a while to plan through possible future elements like additional fields or output/input object types. If there is even a tiny changes that you will need them in the future, having them thought through will prevent your project from breaking changes later on.\\r\\n\\r\\n> Remember: A schema is a most important part of any [GraphQL](https://graphql.org/) project so make sure to treat it with all due respect!\\r\\n\\r\\n![Plan your schema!](schema.png)\\r\\n\\r\\n## Inconsistency in naming\\r\\n\\r\\nIt\'s really important to keep naming conventions consistent. There are some common practices you shouldn\'t ignore, like:\\r\\n\\r\\n- using [camelCase](https://en.wikipedia.org/wiki/Camel_case) for fields\\r\\n- using [PascalCase](https://en.wikipedia.org/wiki/Camel_case) for the names of types\\r\\n![](ok.png)\\r\\n- using all capital letters for ENUM values\\r\\n![](enum.png)\\r\\n\\r\\n\\r\\n## Flattening objects in queries\\r\\n\\r\\nThere are a lot of mistakes you can make when \\"speaking\\" GraphQL. Not only mistakes that might prevent your project form working properly, but also that they won\'t use GraphQL possibilities to the fullest. A good example is a type we have created above.\\r\\n\\r\\n![Avoid queries like this](ok.png)\\r\\n\\r\\nThe `leageId` is a problem here as this will be seen as an inconsistency. When querying for a team\u2019s league you need to perform two database calls:\\r\\n- to get the team with the `leagueId`\\r\\n- to pass the `leagueId` to another query\\r\\n\\r\\nThis is very negligent as GraphQL it\'s all about reducing the number of database calls. The GraphQL preferable way is nesting the output types which makes it easier to call your database with a single request and [batch your data](https://blog.graphqleditor.com/GraphQL-Performance-issues-and-how-to-handle-them/):\\r\\n![Try structurize your GraphQL queries this way](bad.png)\\r\\n\\r\\n## Not using  graphical interfaces\\r\\n\\r\\nGraphQL is a very modern \\"language\\" so there are a lot of [amazing tools, plugins or editors](https://blog.graphqleditor.com/GraphQL-resources-top-tools-tutorials-for-beginners/) that can speed up the schema design process so why not using them? If you are starting your journey with GraphQL it is a great idea design your first schema with a graphical interface. This will reduce the number of mistakes, speed up your work and learning curve of GraphQL by a lot!\\r\\n\\r\\n[![GraphQL Editor](gql.png)](https://graphqleditor.com/)\\r\\n\\r\\n## Not using GraphQL\\r\\n\\r\\nIf you are still focusing on REST you are making a canonical mistake. As none of them is perfect and both have pros & cons, it\'s really wise to know them both and then make a rational decision which would suit your project better.\\r\\n\\r\\n\\r\\n","data":{"title":"Five mistakes to avoid when getting started with GraphQL","date":"2019-03-15T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"Five-mistakes-to-avoid-when-getting-started-with-GraphQL","images":{"bad.optimized.png":{"width":600,"height":334,"webpPath":"bad.optimized.webp","optimizedPath":"bad.optimized.optimized.png"},"bad.png":{"width":1126,"height":626,"webpPath":"bad.webp","optimizedPath":"bad.optimized.png"},"enum.optimized.png":{"width":600,"height":349,"webpPath":"enum.optimized.webp","optimizedPath":"enum.optimized.optimized.png"},"enum.png":{"width":1076,"height":626,"webpPath":"enum.webp","optimizedPath":"enum.optimized.png"},"gql.optimized.png":{"width":600,"height":332,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1468,"height":812,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"ok.optimized.png":{"width":600,"height":334,"webpPath":"ok.optimized.webp","optimizedPath":"ok.optimized.optimized.png"},"ok.png":{"width":1126,"height":626,"webpPath":"ok.webp","optimizedPath":"ok.optimized.png"},"schema.optimized.png":{"width":600,"height":373,"webpPath":"schema.optimized.webp","optimizedPath":"schema.optimized.optimized.png"},"schema.png":{"width":900,"height":559,"webpPath":"schema.webp","optimizedPath":"schema.optimized.png"}}},{"content":"\\r\\nGraphQL popularity is continuously growing. \\r\\nIf you want to jump on a GraphQL train here is a list of the best tools, extensions, and tutorials to start with. Let\'s learn it together! \\r\\n\\r\\nIf you have any interesting resources mail me a tip to tomek@graphqleditor.com and I will update our directory.\\r\\n\\r\\n![Let\'s learn GraphQL together](learn.png)\\r\\n\\r\\n### Knowlege base\\r\\n\\r\\n1. [GrapQL Official Documentation](https://graphql.org/learn/) is definitely the best place to start your GraphQL adventure.\\r\\n2. [Official Facebook Draft RFC Specification](https://facebook.github.io/graphql/draft/) is a place to go if you are looking for raw knowledge regarding GraphQL project.\\r\\n3. [GraphQL Weekly](https://graphqlweekly.com/) is a newsletter with news, articles, and everything related to GraphQL\\r\\n4. [How to GraphQL](https://www.howtographql.com/) is a website which will take you into a journey from GraphQL newbie to releasing your first  GraphQL project.\\r\\n5. [Explore-tech.org](https://graphql.explore-tech.org/) is a helpful resource for collecting GraphQL tools, especially libraries.\\r\\n\\r\\n\\r\\n### Tools & Extensions\\r\\n\\r\\n1. [GraphQL Docs](https://github.com/2fd/graphdoc) is a simple way of generating static documentation for a GraphQL schema in seconds.\\r\\n2.  [GraphCMS](https://graphcms.com/) a tool that allows you to define the GraphQL API. Create structures, relationships, powerful permissions and manage your content with ease, generally speaking, build a hosted GraphQL back-end for your web project along with tools to manage its content.\\r\\n3. [GraphQL Editor](https://graphqleditor.com/) makes it easier to understand the GraphQL schema. Create it by combining visual blocks and the editor will transform them into code! Features like loading schema from URL/file or a fake backend data can speed up the prototyping of your app.\\r\\n4. [Apollo Launchpad](https://launchpad.graphql.com/new) allows you to write a  GraphQL schema in JavaScript making GraphQL code very accessible.\\r\\n5. [GraphiQL](https://github.com/graphql/graphiql) is a simple IDE tool for testing and documenting GraphQL APIs with a nice graphical interface.\\r\\n6. [GraphQL Playground](https://github.com/prisma/graphql-playground) a GraphiQL alternative.\\r\\n7. [Apollo Elements](https://github.com/apollo-elements/apollo-elements) a library for building GraphQL-backed UIs without UI frameworks.\\r\\n\\r\\n\\r\\n### Blogs\\r\\n\\r\\n1. https://blog.apollographql.com/\\r\\n2. https://www.robinwieruch.de/\\r\\n3. https://graphqlmastery.com/blog\\r\\n4. https://blog.graphqleditor.com/\\r\\n5. https://graphql.org/blog/\\r\\n6. https://blog.hasura.io/tagged/graphql/\\r\\n \\r\\n\\r\\n### Video tutorials\\r\\n1. [How to build a GraphQL Server](https://www.youtube.com/playlist?list=PLillGF-RfqbYZty73_PHBqKRDnv7ikh68&utm_source=notify_mailer&utm_medium=email&utm_campaign=new_reply_email)\\r\\n\\r\\n\\r\\n### Communities\\r\\n\\r\\n1. https://www.reddit.com/r/graphql\\r\\n2. [ReactiFlux Discord (#graphql)](https://discordapp.com/invite/0ZcbPKXt5bYZVCkR)\\r\\n3. https://spectrum.chat/apollo\\r\\n\\r\\n\\r\\n### Let\'s build this directory together!\\r\\n\\r\\nDo you know any other useful tools, tutorials or blogs for GraphQL?\\r\\nMaybe you are running your own blog or developing a GraphQL tool?\\r\\n\\r\\nSend me a link to tomek@graphqleditor.com and I will post it here :)\\r\\n\\r\\n\\r\\n","data":{"title":"GraphQL Resources - list of tools, extensions & tutorials for beginners","date":"2019-03-12T13:37:00.284Z","image":"learn.png","author":"Tomek"},"path":"GraphQL-resources-top-tools-tutorials-for-beginners","images":{"learn.optimized.png":{"width":600,"height":314,"webpPath":"learn.optimized.webp","optimizedPath":"learn.optimized.optimized.png"},"learn.png":{"width":1200,"height":628,"webpPath":"learn.webp","optimizedPath":"learn.optimized.png"}}},{"content":"\\r\\n###Introduction\\r\\nThis article covers the basic introduction and advantages of GraphQL and [GraphQL Editor](https://app.graphqleditor.com) for business users. \\r\\n\\r\\n###What is GraphQL?\\r\\nHave you heard tech terms like frontend, backend or API? Well, those are essential components of every web application. The front end is what you see; the backend is the hidden engine that powers every action of your visual interface. API is a connector in between those two which allows them to communicate. It\u2019s a set of clearly defined methods, definitions and routines how apps communicate with each other.\\r\\n\\r\\n>#GraphQL is a query language to describe an API\\r\\n\\r\\nSo far REST API was the most popular standard of creating API\u2019s. GraphQL was introduced in 2015 by Facebook as an alternative to REST. Back then It wasn\u2019t just an experiment - it was already in production inside facebook mobile apps since 2012. Just after public release, It became extremely popular, and around that time many companies were working on similar solutions. This technology started to gain attention since it can be used with many other languages and there\u2019re many ready to go libraries to most popular styles. Right now according to Stackshare there\u2019re nearly 2k companies using it. Early adopters included Coursera, Github, ProductHunt, Yelp or Twitter.\\r\\n\\r\\n![Design Schema](design_schema2.gif \\"Design Schema\\")\\r\\n\\r\\n###Visual tool for app prototyping\\r\\nGraphQL from its core name is something more than new API standard. Some users describe it as a tool for the specification of new solutions. Thanks to graph sourcing we can visualise existing database schema and show existing solutions on the screen. From the other side, you can prototype new business applications. With visualised graph possibilities are endless. Think about the potential advantages of giving access to internal systems for a business manager at company meeting or speeding up onboarding of new developers. Some companies have significant and complex systems; therefore it slows down digital transformation. Check below how Github\u2019s schema in action.\\r\\n\\r\\n![Github](github.gif \\"Github\\")\\r\\n\\r\\n###Easy to learn\\r\\nGraphQL is easy to learn. You have to learn 15-20 definitions to start understanding it. Not joking! Check below a list of the most important ones. Don\u2019t get overwhelmed by too many definitions at the start. Start by checking object type - in definition is a group of fields.\\r\\n\\r\\n![add node type](add_node_type.gif \\"add node type\\")\\r\\n\\r\\nBasic type definitions\\r\\n\\r\\n- Type - it\'s a group of object.\\r\\n- Input - it\'s used to create or update objects in database.\\r\\n- Scalar types - add characteristics for type object.\\r\\n- Interface - it\'s a type object that has certain set of the same fields.\\r\\n- Union - mostly used for search purpose.\\r\\n- Enum - specific scalar user mostly when dealing with allowed values.\\r\\n\\r\\n![add node input](add_node_input.gif \\"add node input\\")\\r\\n\\r\\nGraphql is strongly typed, which means that each definition must have a particular type. The Type System comes with the help, which provides several possibilities for defining elements of our API. Another exciting thing about strongly typed is the visual part.\\r\\n\\r\\n###Communication with all developers\\r\\nThe most important feature of GraphQL for business users is that it\u2019s language agnostic. It\u2019s not created to work with a specific technology. It\u2019s a query language with its own rules which for most popular programming languages. There\u2019re many supportive libraries on the internet for C#/.NET, PHP. Javascript, Java, Python, Ruby and many more. Therefore learning a little bit of schema definition language, you\u2019re able to communicate with all kind of developers. \\r\\n\\r\\n###Flexibility\\r\\nGraphQL is flexible and efficient. In traditional REST approach developers had to send many requests to show data on one screen. It\u2019s not super efficient when it comes to mobile apps - it slows them down and needs more internet data transfer. GraphQL allows a user to create only one endpoint and get exactly required data. Thanks to technology introduced by Facebook engineers communication between client and a server is better optimised.\\r\\n\\r\\nThat\u2019s the power of GraphQL - flexibility. You don\u2019t need to create endpoints for different screens. Various clients can use a once defined schema in a way that they need to.\\r\\n\\r\\n![graphql vs rest](graphql_vs_rest.png \\"graphql vs rest\\")\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Is GraphQL Editor a right tool for business users?","date":"2019-03-11T11:05:04.284Z","author":"Robert"},"path":"Is-GraphQL-Editor-a-right-tool-for-business-users","images":{"add_node_input.gif":{"width":1080,"height":500,"webpPath":"add_node_input.webp","optimizedPath":"add_node_input.optimized.gif.png"},"add_node_input.optimized.gif.png":{"width":600,"height":278,"webpPath":"add_node_input.optimized.gif.webp","optimizedPath":"add_node_input.optimized.gif.optimized.png"},"add_node_type.gif":{"width":1080,"height":498,"webpPath":"add_node_type.webp","optimizedPath":"add_node_type.optimized.gif.png"},"add_node_type.optimized.gif.png":{"width":600,"height":277,"webpPath":"add_node_type.optimized.gif.webp","optimizedPath":"add_node_type.optimized.gif.optimized.png"},"design_schema.gif":{"width":1410,"height":858,"webpPath":"design_schema.webp","optimizedPath":"design_schema.optimized.gif.png"},"design_schema.optimized.gif.png":{"width":600,"height":365,"webpPath":"design_schema.optimized.gif.webp","optimizedPath":"design_schema.optimized.gif.optimized.png"},"design_schema2.gif":{"width":1050,"height":650,"webpPath":"design_schema2.webp","optimizedPath":"design_schema2.optimized.gif.png"},"design_schema2.optimized.gif.png":{"width":600,"height":371,"webpPath":"design_schema2.optimized.gif.webp","optimizedPath":"design_schema2.optimized.gif.optimized.png"},"github.gif":{"width":1050,"height":600,"webpPath":"github.webp","optimizedPath":"github.optimized.gif.png"},"github.optimized.gif.png":{"width":600,"height":343,"webpPath":"github.optimized.gif.webp","optimizedPath":"github.optimized.gif.optimized.png"},"graphql_vs_rest.optimized.png":{"width":600,"height":343,"webpPath":"graphql_vs_rest.optimized.webp","optimizedPath":"graphql_vs_rest.optimized.optimized.png"},"graphql_vs_rest.png":{"width":1050,"height":600,"webpPath":"graphql_vs_rest.webp","optimizedPath":"graphql_vs_rest.optimized.png"}}},{"content":"\\r\\n\\r\\nOne of biggest [GraphQL](https://graphql.org/) flaws is missing of some basic implementation know from which are crucial for application performance. A simple [GraphQL server](https://graphql.org/graphql-js/running-an-express-graphql-server/) comes without a built-in caching or batching mechanism. This might cause some problems for you apps.\\r\\n\\r\\n\\r\\n### Redundant calls ... lots of redundant calls\\r\\n\\r\\nGraphQL is about querying for specific fields on objects. The `fields` are intended to be stand-alone functions which means that unsophisticated GraphQL server might produce redundant calls to issue new database requests each time a `field` is resolved.\\r\\n\\r\\nLet\u2019s take a simple [GraphQl Blog](https://blog.graphqleditor.com/) as an example. Our blog will use pagination to load faster, let\u2019s say that we want to display 5 at once.\\r\\n\\r\\nWe want to get our posts along with their authors names. Our author\u2019s details is a standard \u2018user\u2019 fields that has its own resolver so we need:\\r\\n- 1 call for list of our blog posts\\r\\n- 5 calls to get authors for each post (we need to get user for each resolver)\\r\\n\\r\\nBut what if these posts have comments? Let\u2019s say that each blog post has 2 comments and of course each comment has its author, this gives as:\\r\\n\\r\\n- 1 call for list of blog posts\\r\\n- 5 calls for authors of each post\\r\\n- 5 calls to get lists of comments of each post\\r\\n- 10 calls to get the comments\u2019 authors\\r\\n\\r\\nThis gives us 21 calls. What if we have 10 or 20 comments under each posts? The number of calls will skyrocket and this will cause serious issue with the application loading time.\\r\\n\\r\\n![](2v9ltl.jpg)\\r\\n\\r\\n### Batching & Caching\\r\\nFortunately there is a solution! [Dataloader](https://github.com/facebook/dataloader) is a utility developed by Facebook dev team that lets you batch and cache database calls.\\r\\n\\r\\n**Batching** is DataLoader\'s primary feature. When Dataloader sees that you\u2019re hitting same table multiple times, it\u2019ll batch all calls together i.e. 5 blog posts\u2019 authors & 10 comments\u2019 authors would be batched in a one call.\\r\\n \\r\\nTo get started you need  to create loaders by providing a batch loading function.\\r\\n\\r\\n```jsx\\r\\nvar DataLoader = require(\'dataloader\')\\r\\n\\r\\nvar userLoader = new DataLoader(keys => myBatchGetUsers(keys));\\r\\n```\\r\\nThe function accepts an Array of keys and returns a Promise which resolves to an Array of values.  You need to load individual values from the loader. DataLoader will merge individual loads which occur the same time and then call your batch function with all requested keys.\\r\\n```jsx\\r\\nuserLoader.load(1)\\r\\n  .then(user => userLoader.load(user.invitedByID))\\r\\n  .then(invitedBy => console.log(`User 1 was invited by ${invitedBy}`));\\r\\n\\r\\n// Elsewhere in your application\\r\\nuserLoader.load(2)\\r\\n  .then(user => userLoader.load(user.lastInvitedID))\\r\\n  .then(lastInvited => console.log(`User 2 last invited ${lastInvited}`));\\r\\n```\\r\\n **Caching** is another DataLoader\u2019s feature.  Each `DataLoader`  instance represents a unique cache and when Dataloader detects that two blog posts, comments or their combination have the same author instead of making a new database call it will reuse the object it already has in memory.\\r\\n \\r\\n\\r\\nIf you want to make sure that your application running as smooth as possible I highly suggest trying DataLoader. Read more about the implemenation of DataLoader check its [GitHub repo](https://github.com/facebook/dataloader) or watch *\\"DataLoader - Source code walkthrough\\"* by [Lee Byron](https://twitter.com/leeb), one of the GraphQL creators.\\r\\n\\r\\n[![DataLoader - Source code walkthrough](https://camo.githubusercontent.com/64fd0e9834838f60049778fc800e7af18ff74f3c/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f4f51546e584e43447977412f302e6a7067)](https://www.youtube.com/watch?v=OQTnXNCDywA&feature=youtu.be)\\r\\n\\r\\n\\r\\n","data":{"title":"GraphQL Performance issues and how to handle them","date":"2019-03-06T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"GraphQL-Performance-issues-and-how-to-handle-them","images":{"2v9ltl.jpg":{"width":735,"height":500,"webpPath":"2v9ltl.webp","optimizedPath":"2v9ltl.optimized.jpg"},"2v9ltl.optimized.jpg":{"width":600,"height":408,"webpPath":"2v9ltl.optimized.webp","optimizedPath":"2v9ltl.optimized.optimized.jpg"},"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"}}},{"content":"\\r\\nLet\'s explore second and last part of our tutorial of schemas and types\\r\\n\\r\\n###Interfaces\\r\\n\\r\\nLike many type systems, GraphQL supports interfaces. An interface exposes a specific set of fields that a type must include implementing the interface. For example, you could have an interface Actor that represents any humankind character in the Movies:\\r\\n\\r\\n```graphql\\r\\ninterface Actor {\\r\\n  id: ID!\\r\\n  name: String!\\r\\n  friends: [Actor]\\r\\n  appearsIn: [Movie]!\\r\\n}\\r\\n```\\r\\n\\r\\nThis means that any type that implements Actor needs to have these exact fields, with these arguments and return types. Look at the example:\\r\\n\\r\\n```graphql\\r\\ntype Arnold implements Actor {\\r\\n  id: ID!\\r\\n  name: String!\\r\\n  friends: [Character]\\r\\n  appearsIn: [Movie]!\\r\\n}\\r\\n\\r\\ntype James implements Actor {\\r\\n  id: ID!\\r\\n  name: String!\\r\\n  friends: [Character]\\r\\n  appearsIn: [Movie]!\\r\\n  wonOscar: Boolean!\\r\\n}\\r\\n```\\r\\nYou can see that both of these types have all of the fields from the Actor interface, but also bring in extra fields like wonOscar which is specific to this Actor.\\r\\n\\r\\n### Union\\r\\n\\r\\nAn interesting mechanism is the Union type, which allows you to represent a group of objects that do not have the same fields. An excellent example is a query to a search engine that can search both the title of the Movie and the Actor\'s name. Union types are very similar to interfaces, but they don\'t get to specify any common fields between the types.\\r\\n\\r\\n```graphql\\r\\nunion SearchResult = Movie | Actor\\r\\n  \\r\\ntype Query {\\r\\n  search(text: String!): SearchResult\\r\\n}\\r\\n\\r\\nquery {\\r\\n  search(text: \\"Park\\") {\\r\\n    ... on Book {\\r\\n      title\\r\\n    }\\r\\n    ... on Author {\\r\\n      name\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n```graphql\\r\\n  {\\r\\n      \\"data\\": {\\r\\n        \\"search\\": [\\r\\n          {\\r\\n            \\"name\\": \\"Jurassic Park\\",\\r\\n          },\\r\\n          {\\r\\n            \\"name\\": \\"Jessica Park\\",\\r\\n          }\\r\\n        ]\\r\\n      }\\r\\n    }\\r\\n```\\r\\nWherever we return a SearchResult type in our schema, we might get a Movie or an Actor. Note that members of a union type need to be concrete object types; you can\'t create a union type out of interfaces or other unions.\\r\\n\\r\\n### Input type\\r\\n\\r\\nTo modify or create new elements in the application via GraphQL, a particular type input was created, which behaves very much like a regular object, with the difference that during the declaration input is used instead of the keyword type. This is particularly valuable in the case of mutations, where you might want to pass in a whole object to be created. In the GraphQL schema language, input types look exactly the same as regular object types, but with the keyword input instead of type:\\r\\n\\r\\n```graphql\\r\\nschema {\\r\\n  query: Query\\r\\n  mutation: Mutation\\r\\n}\\r\\n  \\r\\ntype Mutation {\\r\\n  createActor(input: ActorInput): Actor\\r\\n  updateActor(id: ID!, input: ActorInput): Actor\\r\\n}\\r\\n  \\r\\ninput ActorInput {\\r\\n  name: String!\\r\\n  appearsIn: [Movie]!\\r\\n}\\r\\n```\\r\\n\\r\\nIn the above example, you can observe that the createActor and updateActor actions expect the ActorInput object as an argument and return the Actor object. For the declared scheme, creating a new book requires a similar action:\\r\\n\\r\\n### Lists and Non-Null \\r\\n\\r\\nIn your query variable declarations, you can apply additional type modifiers that affect the validation of those values.  In the example below we\'re using a String type and marking it as Non-Null by adding an exclamation mark, ! after the type name. This means that our server regularly requires to return a non-null value for this field, and if it ends up getting a null value that will trigger a GraphQL execution error, letting the client know that something has gone wrong.\\r\\n\\r\\n```graphql\\r\\ntype Actor {\\r\\n  name: String!\\r\\n  appearsIn: [Episode]!\\r\\n}\\r\\n```\\r\\nThe Non-Null type modifier can also be used when defining arguments for a field, which will cause the GraphQL server to return a validation error if a null value is passed as that argument, whether in the GraphQL string or in the variables.\\r\\n\\r\\nLsts work similarly: We can use a type modifier to mark a type as a List, which means that this field will return an array of that type. In the schema language, it\'s by wrapping the type in square brackets, [ and ]. It works the same for arguments, where the validation step will expect an array for that value. The Non-Null and List modifiers can be combined. \\r\\n\\r\\n```\\r\\nmyField: [String!]\\r\\n```\\r\\n```\\r\\nmyField: null // valid\\r\\nmyField: [] // valid\\r\\nmyField: [\'a\', \'b\'] // valid\\r\\nmyField: [\'a\', null, \'b\'] // error\\r\\n```\\r\\n```\\r\\nmyField: [String]!\\r\\n```\\r\\n```\\r\\nmyField: null // error\\r\\nmyField: [] // valid\\r\\nmyField: [\'a\', \'b\'] // valid\\r\\nmyField: [\'a\', null, \'b\'] // valid\\r\\n```\\r\\n\\r\\n\\r\\n","data":{"title":"GraphQL Tutorial - Schemas and types part 2","date":"2019-02-14T10:23:04.284Z","author":"Robert"},"path":"graphql-schemas-and-types-part-2","images":{}},{"content":"\\r\\nWWelcome in another episode of our Code Academy series in which we present the most interesting code related things like tools, libraries, approaches etc. This week we will cover a GraphQL schema visualization topic.\\r\\n\\r\\n\\r\\nAs your probably already know [GraphQL was defined by npm as one of the technologies that will dominate 2019.](https://blog.graphqleditor.com/javascript-predictions-for-2019-by-npm/)\\r\\nGraphQL is a technology you must learn this year to keep up the pace of the frontend and the backend evolution. As for now, [RESTful APIs](https://blog.graphqleditor.com/graphql-vs-rest/) are the most popular choice but this will change soon. The sooner you make a decision to start the transition from REST to GraphQL the less painful its going to be. There are many tools and libraries to make it easier to convert from [REST to GraphQL](https://blog.graphqleditor.com/grapqhl-vs-rest-caching/) and there is a huge reward waiting for you at the end of the road.\\r\\n\\r\\n\\r\\n## Know your schema\\r\\n\\r\\n#### What\u2019s a GraphQL schema and why it\'s so important to know it well?\\r\\nThe [GraphQL schema](https://graphql.org/learn/schema/) is a centerpiece of your GraphQL project.  GraphQL schema is nested in your GraphQL server and defines every functionality available to the clients. The main element of each schema is `type` which allows establishing relations between different types, define allowed GraphQL operations (Queries and Mutations) to be performed on the server and more.\\r\\n\\r\\nTo make it easier to understand the operation that a server can perform GraphQL defined a universal schema syntax know as SDL (Schema Definition Language). The SDL defines the elements of your project i.e. `type`:\\r\\n\\r\\n```graphql\\r\\ntype Movie {\\r\\n   title: String\\r\\n   Director: Director\\r\\n}\\r\\n\\r\\ntype Director {\\r\\n   name: String\\r\\n   movies: [Movie]\\r\\n}\\r\\n```\\r\\nor `query` (asking the server for the data) and `mutation` (manipulating the data):\\r\\n\\r\\n```graphql\\r\\ntype Query{\\r\\n    getMovies: [Movie]\\r\\n    getDirectors: [Director]\\r\\n}\\r\\n```\\r\\n\\r\\n```graphql\\r\\ntype Mutation {\\r\\n   addMovie(title: String, director: String) : Movie\\r\\n}\\r\\n```\\r\\nSo as you see the schema is indeed a centerpiece of any GraphQL project and it\'s important to be aware of what is what and where to find it. Big complicated schemas are really hard to comprehend. Let\'s take GitHib schema as an example, it has **9182** lines of code! It\'s really hard to follow... Fortunately, graphs are coming with help!\\r\\n\\r\\n\\r\\n## Visualization is the key\\r\\n\\r\\nA graph is an abstract data type. It\'s structure consists of a finite set of vertices, nodes or points linked together. Graphs are a great tool for shaping logic behind your app as they fit-in well for any IT project and at this point, we can agree that graphs are more accessible than code in terms of apprehending the schema.\\r\\n\\r\\n![Schema graph](graph.png)\\r\\n\\r\\n#### Turning schema code into graphs\\r\\n\\r\\nSo how can we turn our schema code into a visual graph? It\'s simpler than you can imagine. We are going to use [GraphQL Editor](https://graphqleditor.com).\\r\\n\\r\\nAll you need to do is go to [app.graphqldditor.com](https://app.graphqleditor.com)and load your schema as below and ...\\r\\n\\r\\n![Load your schema URL](schemaurl.png)\\r\\n\\r\\n... and that\'s it!\\r\\n\\r\\nIf you have provided editor a valid schema it will automatically turn its code into a visual graph. Cool, right?\\r\\n\\r\\n![Your schema turned into a graph](result.png)\\r\\n","data":{"title":"Code Academy - How to visualize your GraphQL schema?","date":"2019-02-11T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"visualize-your-schema","images":{"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"graph.optimized.png":{"width":600,"height":314,"webpPath":"graph.optimized.webp","optimizedPath":"graph.optimized.optimized.png"},"graph.png":{"width":1200,"height":628,"webpPath":"graph.webp","optimizedPath":"graph.optimized.png"},"result.optimized.png":{"width":600,"height":294,"webpPath":"result.optimized.webp","optimizedPath":"result.optimized.optimized.png"},"result.png":{"width":1869,"height":916,"webpPath":"result.webp","optimizedPath":"result.optimized.png"},"schemaurl.optimized.png":{"width":600,"height":293,"webpPath":"schemaurl.optimized.webp","optimizedPath":"schemaurl.optimized.optimized.png"},"schemaurl.png":{"width":1862,"height":910,"webpPath":"schemaurl.webp","optimizedPath":"schemaurl.optimized.png"}}},{"content":"\\r\\nLow-code development platforms (LCDP) is a booming market which is predicted to grow from USD 4.3 Billion in 2017 to almost USD 30.0 Billion by 2022. What exactly are LCDPs?  LCDPs are application development platforms that provide rapid app delivery with coding reduced to the minimum and easy deployment. The main idea behind LCDPs is to reduce the time required from an idea to prototype, which is related to decreased project cost overall.\\r\\n\\r\\n![Low Code Development](lowcode.png)\\r\\n\\r\\n### Market data and predictions\\r\\n\\r\\nThe report provided by [MarketsAndMarkets](https://www.marketsandmarkets.com/Market-Reports/low-code-development-platforms-market-103455110.html) identify that rising demand for customer-centric web and mobile applications fuels the rapid growth of the [Low-Code Development Platform](https://en.wikipedia.org/wiki/Low-code_development_platform) Market across the globe. Obviously, the largest geo-market for LCDPs is North America. Whereas, Asia Pacific (APAC) was identified as the fastest growing one. The rising demand for automation and innovation in many different industries requires:\\r\\n- Faster development process (both web and mobile application),\\r\\n- Easier Deployment,\\r\\n- Cost reduction.\\r\\n\\r\\nAll the above is expected to push the low-code development trend into its highest high in the next couple of years.\\r\\n\\r\\n![LCDPs Market is Booming](grow.png)\\r\\n\\r\\n### Low-code development pros\\r\\n\\r\\n#### Development time\\r\\n\\r\\nLCDPs are visual-based design system which means that the amount of coding is often reduced to zero and that of most of it is replaced by a draw/drag-and-drop system. This allows building apps faster and results in shorter time-to-market.\\r\\n\\r\\n#### Development cost\\r\\n\\r\\nThe ability to build an MVP faster means a cost decrease.  Moving further, LCDPs can reduce requisition for developers work. This results in lower personnel costs, directly and indirectly (office costs, HR personnel costs). The tricky part is that if the personnel cost reduction goes too far, it can easily turn into a clear disadvantage.\\r\\n\\r\\n#### Cross-platform\\r\\nAs time users spend on their smartphones or tablets has closed the gap with desktop, the modern applications must have cross-platform functionality standard built-in in their design. Automatical deployment over multiple platforms with none or almost zero effort is one of the LCDPs biggest features.\\r\\n\\r\\n![Multiplatform Solution](multiplatform.png)\\r\\n\\t\\r\\n### What about the cons?\\r\\n\\r\\n#### Security\\r\\nSecurity is one of the LCDPs main flaws. As by default, low-code development platforms aim for small or medium customers. The security provided by them is often fine for non-commercial or small commercial projects. Although some platforms claim to have enterprise-level security procedures and certifications, it\u2019s most of the time not enough to be trusted by large-scale commercial projects.\\r\\n\\r\\n#### Scalability & compliance\\r\\nAlong with security, LCDPs platforms scalability is often questioned. Applications built so quickly at high risk of lack of adequate management which might cause some serious compliance issues later on. Many IT professionals remain skeptical about that low-code development platforms as they don\u2019t address the challenge of increasing complexity due to changes, therefore they shouldn\'t be a platform of choice for any large-scale enterprise applications.\\r\\n\\r\\n\\r\\n### Summary\\r\\nLow-code/no-code is a very strong trend in modern IT projects. Although it\'s becoming more & more popular across private or small commercial projects it will be hard to be popularized it across large-scale enterprise projects where security is a top priority.\\r\\n\\r\\n","data":{"title":"Code Academy - Low-code development","date":"2019-02-08T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"low-code-development","images":{"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"grow.optimized.png":{"width":600,"height":314,"webpPath":"grow.optimized.webp","optimizedPath":"grow.optimized.optimized.png"},"grow.png":{"width":1200,"height":628,"webpPath":"grow.webp","optimizedPath":"grow.optimized.png"},"lowcode.optimized.png":{"width":600,"height":227,"webpPath":"lowcode.optimized.webp","optimizedPath":"lowcode.optimized.optimized.png"},"lowcode.png":{"width":1200,"height":454,"webpPath":"lowcode.webp","optimizedPath":"lowcode.optimized.png"},"multiplatform.optimized.png":{"width":600,"height":314,"webpPath":"multiplatform.optimized.webp","optimizedPath":"multiplatform.optimized.optimized.png"},"multiplatform.png":{"width":1200,"height":628,"webpPath":"multiplatform.webp","optimizedPath":"multiplatform.optimized.png"}}},{"content":"\\r\\nWelcome in yet another episode of our Code Academy series. This week we will show you how \\r\\neasy you can create a fake backend with a [GraphQL Editor](https://graphqleditor.com) tool.\\r\\n\\r\\n[Mocking](https://en.wikipedia.org/wiki/Mock_object) is primarily used in unit testing. What is mocking? In short, it\u2019s a practice of creating a fake version of an object or a component, so you can isolate its behavior to develop other parts of your software independently (tested objects might have dependencies on other components). \\r\\n\\r\\n## Importance of mocking data in modern projects\\r\\n\\r\\nCreating a mock backend is considered a good practice because it:\\r\\n### 1. Speed up development \\r\\nIt\u2019s still a very popular (unfortunately) practice to start a frontend and a backend development at the same time. Clients often insist on it as they see this as a faster approach (nothing more wrong!).  Having a mock backend let you work on frontend server-depended tasks even if you don\u2019t have a working backend yet. \\r\\n\\r\\n### 2. It\u2019s a safe way\\r\\nFake backend lets you run local tests. When you don\u2019t need to connect to a real backend it\'s much safer (and faster). As the project becoming more and more complex, preparing a server infrastructure just to run some tests can be a very unpleasant task and might cause you a lot of trouble.\\r\\n\\r\\n\\r\\n## Is it hard to create a mock backend?\\r\\n\\r\\n\\r\\nAs you see having a mock backend is definitely a huge benefit, then you must be asking yourself why this solution still isn\u2019t that popular? I bet that the first reason that would appear in your mind is that it\u2019s probably too difficult or time-consuming.  If that came to your mind you are partially right - creating a mock backend used to be difficult, but it\u2019s not anymore! \\r\\n\\r\\nGraphQL made mocking data super easy! GraphQL is a strongly typed language. Type System defines various data types that can be used in a GraphQL application and these types can be easily shared between frontend and backend as they have all the information required to mock data.\\r\\n\\r\\nWe went a step further, our [GraphQL Editor](https://graphqleditor.com) allows you to created mock backend with a single click! Don\u2019t believe? Test it yourself. First, go to https://app.graphqleditor.com/ :\\r\\n\\r\\n![Create fake backend with GraphQL Editor](graphqleditor.png)\\r\\n\\r\\nAll you need to have is a valid [GraphQL schema](https://graphql.org/learn/schema/). You can upload an existing schema from a link or use one of our sample schemas. Once you have it loaded just save it and click \u201cMock Backend\u201d button:\\r\\n\\r\\n![One click fake backend deploy!](deploy.png)\\r\\n\\r\\nAnd that\u2019s it! You have a ready to use fake backend endpoint ready for some tests. Use the [GraphiQL](https://github.com/graphql/graphiql) window and play around with your fresh mock backend:\\r\\n\\r\\n![Ready Fake Data](fakedata.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Code Academy - Create Fake Backend with GraphQL Editor","date":"2019-02-05T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"create-fake-backend","images":{"deploy.optimized.png":{"width":600,"height":146,"webpPath":"deploy.optimized.webp","optimizedPath":"deploy.optimized.optimized.png"},"deploy.png":{"width":1200,"height":292,"webpPath":"deploy.webp","optimizedPath":"deploy.optimized.png"},"fakedata.optimized.png":{"width":600,"height":236,"webpPath":"fakedata.optimized.webp","optimizedPath":"fakedata.optimized.optimized.png"},"fakedata.png":{"width":1468,"height":578,"webpPath":"fakedata.webp","optimizedPath":"fakedata.optimized.png"},"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"graphqleditor.optimized.png":{"width":600,"height":335,"webpPath":"graphqleditor.optimized.webp","optimizedPath":"graphqleditor.optimized.optimized.png"},"graphqleditor.png":{"width":1468,"height":820,"webpPath":"graphqleditor.webp","optimizedPath":"graphqleditor.optimized.png"}}},{"content":"\\r\\nIn this article, I\'ll cover a general introduction to backend development without a deep dive into the code. I\'ll provide you with languages and frameworks that you can learn and use a little bit of graphql as an example. If you\'re looking for more technical tutorials, please check other posts on our blog or other resources. \\r\\n\\r\\nIf you\'re not a software developer terms like backend or front end development can give you a headache. Adding to that a long list of different tools, languages and frameworks it\'s confusing where to start.  However, there\'s good news - you don\'t need to learn coding to understand the basics. It\'s helpful to know the basics of typical tech stack whether any developer is working around you.\\r\\n\\r\\nTo help you understand more from backend development, we\'ve divided this articles into few sections.\\r\\n\\r\\n### What is backend?\\r\\n\\r\\nImagine a typical web application like Facebook or your online banking service - what comes to your mind? You have the visual part which is designed for human interaction and something behind. That\'s the easiest way we can describe front end (the visible part - colours, animations, layout, and all the stuff that you can experience) The backend is the internal engine of the application which includes things like the server, the database.\\r\\n\\r\\n![https://dribbble.com/shots/5455567-Front-end-vs-Back-end](https://cdn.dribbble.com/users/1971934/screenshots/5455567/ezgif.com-resize.gif)\\r\\n\\r\\nThe backend is often described as a \\"server-side\\" opposite to \\"client-side\\" or \\"browser side\\" where the client sends a request to the backend by clicking on a specific button. The backend\'s the machinery that works silently behind the scenes.\\r\\n\\r\\n![](https://i.imgur.com/UqIwgQL.jpg)\\r\\n\\r\\nIt\'s is essential to know that over last ten years that divide has changed a lot due to growing capabilities of Javascript and it\'s frameworks which can do more on the front end than before. This language can be both used on the front end and the backend by specific frameworks. We\'ll get back to that later.  \\r\\n\\r\\n![](https://media3.giphy.com/media/4MwP0n2iPbkcM/giphy.gif)\\r\\n\\r\\nA modern backend is a mix of the server, APIs, databases and operating systems that power an application\'s front end. Every app can use very different tools whether it\u2019s the use of cloud-based servers and data warehouses, containerization with a service like Docker, APIs to replace more complex processing or Backend-as-a-Service providers. \\r\\n\\r\\nTo start things, we\u2019ll break the server side down into four main components: the server, the database, the operating system, and the software. In the next chapters, we\'ll explain more about each of these components of the backend.\\r\\n\\r\\n### Servers\\r\\n\\r\\nWhen you type any domain into a web browser that means you type server address. If you go deeper into specific sections of that website, you\'ll see that URL is extended with additional details. This include folder path, subdirectory locations and specific file names. Let\'s have a look at Google\'s logo. This particular address contains precise information on where exactly on the server file exists.\\r\\n\\r\\n```\\r\\nhttps://www.google.pl/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\\r\\n```\\r\\n\\r\\nAs part of other components, the server is the heart of the system. It could be located locally on your computer or in a modern way in the cloud. You can imagine cloud as a group of connected computers. That network of computers can run various tasks including file storage, security and encryption, databases, email, and web services. The cheapest option of cloud servers is a shared virtual machine, a computer which are running many servers at the same time. More expensive one are dedicated machines which you can rent according to your needs. Shared servers are created in the process of virtualisation. \\r\\n\\r\\n![](https://media0.giphy.com/media/xTaWnRA9hNaYkYgGLS/giphy.gif?cid=3640f6095c59a35d3632546277261fcc)\\r\\n\\r\\nThe primary goal of virtualisation is to manage workloads by transforming traditional computing to make it more scalable. In operating system-level virtualisation, it is possible to run multiple operating systems on a single piece of hardware. Virtualisation technology involves separating the physical hardware and software by emulating device using the software.\\r\\n\\r\\nOne of a popular lightweight alternative to virtualisation is containerization. Imagine catching application into a virtual container with its environment. It provides benefits of loading an application onto a virtual machine, as the application can be run on any suitable physical computer without any worries. Containerization has gained recent fame with the open-source technology called Docker. Using containers, you can easily migrate apps between servers. \\r\\n\\r\\n![](https://media1.giphy.com/media/6AFldi5xJQYIo/giphy.gif)\\r\\n\\r\\nAs you\u2019ve got the basics about on-site servers, expand your knowledge with a look at virtualisation, how servers get provisioned to house multiple apps, and containerization, another way servers provision their operating systems out to house compartmentalised applications.\\r\\n\\r\\n### Databases\\r\\n\\r\\nA database is storage of a collection of data. That may sound overly naive, but it pretty much sums up what any database is. A database could be as primary as a text file with a list of names. Alternatively, it could be as complex as a large, relational database management system, complete with in-built tools to help you maintain the data.\\r\\n\\r\\nAny time you request something from a website or search a place to stay at Airbnb your front end sends a request to the database and creates a response. The data is transmitted back to the website, and you see the result of your actions. You can also update or edit data in your database from the visual interface. Imagine uploading pictures to Facebook or adding a description to your products in CMS.\\r\\n\\r\\nA Database Management System (DBMS), is a tool that enables the management and creation of databases. Today most database systems are referred to as a Relational-DBMS, because of their capacity to store related data across multiple tables. When more than two tables contain related data, they have a relationship. You design your database in a way that defines which tables will have to be related. Most popular relational DBMS include Microsoft Access, SQL Server, MySQL.\\r\\n\\r\\nAlternatively, to related databases we have NoSQL. It\'s a comprehensive term that doesn\'t describe any particular database type. It\'s a group of databases that don\'t fit into a relational model. Let\'s explore some examples: \\r\\n- Column store database,\\r\\n- Graph databases that use a graphical model,\\r\\n- Document store database that uses a document-oriented model,\\r\\n\\r\\n### Backend developer\\r\\n\\r\\nBack-end developers work with front-end developers by giving the outward facing web app elements of server-side logic. In other words, back-end dev\'s create the business logic to make the web app work correctly, and they achieve this through the use of back end scripting languages. Some of the regular responsibilities include: \\r\\n\\r\\n- Writing server-side code\\r\\n- Interacting with database\\r\\n- Writing code to communicate with the database \\r\\n- Deploying the system online so the app can be usable \\r\\n- Maintaining security of the code\\r\\n- Maintaining code to be optimised to handle large traffic volume\\r\\n- Integrating server-side logic with front end\\r\\n- Design and implementation of data storage solutions\\r\\n- Building reusable code and libraries for future use\\r\\n- Writing documentation for ease of use for new developers\\r\\n\\r\\n\\r\\nBack-end developers usually work in groups or teams. Within larger organisations, there can be both back-end and front-end engineers, which can include engineers with specific roles like REST API developers or quality assurance or architects.\\r\\n\\r\\n\\r\\n### Backend  & languages\\r\\n\\r\\nBack-end developers can learn a variety of languages and frameworks depending on the type of app they\u2019re developing, its specific processing specifications, and what other components already exist on the back end.\\r\\n\\r\\nLanguages will differ in file size, speed, adaptability, how many lines of code required, and the style of coding. Some back-end scripting languages are object-oriented, a method of programming that bundles properties and functions within objects. Different languages may be compiled rather than interpreted, something that affects load speed, readability, and processing power needed to run the app.\\r\\n\\r\\nMost of the sites are built on PHP, making it one of the most common back-end languages. However, there are plenty of others to choose from. You may want to use the processing power of Python for a data-driven site, or leverage the speed of lightweight languages like Ruby for quick prototyping. It\u2019s up to you and your developers, and every language has its pros and typical applications.\\r\\n\\r\\nTake a look at a few of the other big hitters in back-end programming, like:\\r\\n\\r\\n- Java\\r\\n- C# and C++\\r\\n- .NET\\r\\n- Perl\\r\\n- Scala\\r\\n- Node.js (and JavaScript)","data":{"title":"Code academy - backend development","date":"2019-02-05T11:13:04.284Z","author":"Robert"},"path":"Code-academy-backend-development","images":{}},{"content":"\\r\\nWelcome to our Code Academy series in which we will try to present you useful tool, libraries and methods. This week we will focus on a Dgraph, a very promisng graph database.\\r\\n[Dgraph](https://dgraph.io/) is an open-source distributed graph database aimed at providing high production-level scale, efficient enough to be serving real-time user queries. Dgraph uses [GraphQL](https://graphql.org/) as its default query language and responds in JSON. There has been a lot of talk in the media about Dgraph about a year ago when the company announced that it has raised [$3 million in funding](https://techcrunch.com/2017/12/19/dgraph-raises-3m-for-its-open-source-distributed-graph-database-hits-1-0-release/).\\r\\n\\r\\n![Dgraph.io](logo.png)\\r\\n\\r\\n###  Dgraph\\r\\nDgraph is a distributed, highly available graph database. Unlike GraphQL,  there is no concept of complex types or groups of properties. Dgraph defines the schema for properties within the graph, so you can store any GraphQL schema in Dgraph.\\r\\n\\r\\nDgraph cluster consists of three different nodes, each serving a different purpose:\\r\\n\\r\\n- Dgraph Zero -  responsible for the Dgraph cluster; it assigns servers to a group, balances data between them (required)\\r\\n\\r\\n- Dgraph Alpha - responsible for predicates and indexes (required)\\r\\n\\r\\n- Dgraph Ratel - serves the UI to run queries, mutations & schema alterations.\\r\\n\\r\\n### Starting with DgraphQL\\r\\n\\r\\nIf you want to give it a try the easiest way to do it is to use Docker (you will need also [Docker Compose](https://docs.docker.com/compose/install/)).\\r\\n\\r\\n```sh\\r\\ndocker pull dgraph/dgraph\\r\\n```\\r\\nOnce you have Docker Compose installed to start up Dgraph put below code in your docker-compose yaml file.\\r\\n```yml\\r\\nversion: \\"3.2\\"\\r\\nservices:\\r\\nzero:\\r\\n image: dgraph/dgraph:latest\\r\\n volumes:\\r\\n   - type: volume\\r\\n     source: dgraph\\r\\n     target: /dgraph\\r\\n     volume:\\r\\n       nocopy: true\\r\\n ports:\\r\\n   - 5080:5080\\r\\n   - 6080:6080\\r\\n restart: on-failure\\r\\n command: dgraph zero --my=zero:5080\\r\\nserver:\\r\\n image: dgraph/dgraph:latest\\r\\n volumes:\\r\\n   - type: volume\\r\\n     source: dgraph\\r\\n     target: /dgraph\\r\\n     volume:\\r\\n       nocopy: true\\r\\n ports:\\r\\n   - 8080:8080\\r\\n   - 9080:9080\\r\\n restart: on-failure\\r\\n command: dgraph alpha --my=server:7080 --lru_mb=2048 --zero=zero:5080\\r\\nratel:\\r\\n image: dgraph/dgraph:latest\\r\\n volumes:\\r\\n   - type: volume\\r\\n     source: dgraph\\r\\n     target: /dgraph\\r\\n     volume:\\r\\n       nocopy: true\\r\\n ports:\\r\\n   - 8000:8000\\r\\n command: dgraph-ratel\\r\\n\\r\\nvolumes:\\r\\ndgraph:\\r\\n\\r\\n```\\r\\n\\r\\nLet\'s take A Song of Ice and Fire (aka. Game of Thrones) books series as our data set:\\r\\n\\r\\n```sh\\r\\ncurl localhost:8080/mutate -H \\"X-Dgraph-CommitNow: true\\" -XPOST -d $\'\\r\\n{\\r\\nset {\\r\\n _:ned <name> \\"Eddard Stark\\" .\\r\\n _:robert <name> \\"Robbert Baratheon\\" .\\r\\n _:cersei <name> \\"Cersei Lannister\\" .\\r\\n _:joffrey <name> \\"Joffrey Baratheon\\".\\r\\n\\r\\n _:got1 <name> \\"A Song of Ice and Fire: A Game of Thrones\\" .\\r\\n _:got1 <release_date> \\"1996-08-01\\" .\\r\\n _:got1 <characters> _:ned .\\r\\n _:got1 <characters> _:robert .\\r\\n _:got1 <characters> _:cersei .\\r\\n _:got1 <characters> _:joffrey .\\r\\n\\r\\n _:got2 <name> \\"A Song of Ice and Fire:A Clash of Kings\\" .\\r\\n _:got2 <release_date> \\"1998-11-16\\" .\\r\\n _:got2 <characters> _:cersei .\\r\\n _:got2 <characters> _:joffrey .\\r\\n\\r\\n\\r\\n _:got3 <name> \\"A Song of Ice and Fire: A Storm of Swords\\" .\\r\\n _:got3 <release_date> \\"2000-08-08\\" .\\r\\n _:got3 <characters> _:cersei .\\r\\n _:got3 <characters> _:joffrey .\\r\\n  }\\r\\n}\\r\\n\' | python -m json.tool | less\\r\\n\\r\\n```\\r\\n\\r\\nYou can alter your schema by adding indexes on some of data. This will allow queries to very convenient features as term matching, filtering and sorting:\\r\\n\\r\\n```sh\\r\\ncurl localhost:8080/alter -XPOST -d $\'\\r\\nname: string @index(term) .\\r\\nrelease_date: date @index(year) .\\r\\n\' | python -m json.tool | less\\r\\n```\\r\\nHaving that done you can either query for all the books:\\r\\n```sh\\r\\ncurl localhost:8080/query -XPOST -d $\'\\r\\n{\\r\\nme(func: has(characters)) {\\r\\n name\\r\\n}\\r\\n}\\r\\n\' | python -m json.tool | less\\r\\n```\\r\\nor query for just those published after year 2000:\\r\\n```sh\\r\\ncurl localhost:8080/query -XPOST -d $\'\\r\\n{\\r\\nme(func:allofterms(name, \\" A Song of Ice and Fire\\")) @filter(ge(release_date, \\"2000\\")) {\\r\\n  name\\r\\n  release_date\\r\\n  characters {\\r\\n   name\\r\\n  }\\r\\n}\\r\\n}\\r\\n\' | python -m json.tool | less\\r\\n```\\r\\nwhich will result in:\\r\\n\\r\\n```json\\r\\n{\\r\\n\\"data\\":{\\r\\n  \\"me\\":[\\r\\n    {\\r\\n      \\"name\\":\\"A Song of Ice and Fire: A Storm of Swords\\",\\r\\n      \\"release_date\\":\\"2000-08-08\\",\\r\\n      \\"characters\\":[\\r\\n        {\\r\\n          \\"name\\":\\"Cersei Lannister\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\":\\"Joffrey Baratheon\\"\\r\\n        },\\r\\n      ]\\r\\n    },\\r\\n  ]\\r\\n}\\r\\n}\\r\\n```\\r\\nAnd that\'s it! Thanks to Mr. Dgraph Ratel we have a filtered data we have queried for.\\r\\n\\r\\n![Dgraph](dgraph.png)\\r\\nSource: https://dgraph.io/\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Code Academy - Dgraph a distributed graph database you need to know","date":"2019-01-29T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"dgraph-distributed-graph-database","images":{"dgraph.optimized.png":{"width":600,"height":679,"webpPath":"dgraph.optimized.webp","optimizedPath":"dgraph.optimized.optimized.png"},"dgraph.png":{"width":486,"height":550,"webpPath":"dgraph.webp","optimizedPath":"dgraph.optimized.png"},"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"logo.optimized.png":{"width":600,"height":180,"webpPath":"logo.optimized.webp","optimizedPath":"logo.optimized.optimized.png"},"logo.png":{"width":1000,"height":300,"webpPath":"logo.webp","optimizedPath":"logo.optimized.png"}}},{"content":"\\r\\nAn important part of any development project is handling errors as any application, no matter how simple it is, may contain a considerable amount of errors. In our previous blog posts, we have made a comparison of certain aspects ([data fetching](https://blog.graphqleditor.com/graphql-vs-rest/), [performance](https://blog.graphqleditor.com/graphql-vs-rest-performance/), [caching](https://blog.graphqleditor.com/grapqhl-vs-rest-caching/)) of [GraphQL](https://github.com/graphql) vs REST so you already know that it differs a lot. The same is true also in terms of handling errors.\\r\\n\\r\\n## Handling errors in REST\\r\\n\\r\\nError handling in REST is pretty straightforward, we simply check the [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) headers to see the status of a response:\\r\\n- `200 OK`,\\r\\n- `404 Not Found`,\\r\\n- `500 Internal Server Error`\\r\\n\\r\\nand so on.\\r\\n\\r\\n Depending on the HTTP status code we get, we can easily identify what\u2019s went wrong and how to handle it. In [GraphQL](https://graphql.org/) it\u2019s different.\\r\\n\\r\\n![Method Not Allowed](405.jpg)\\r\\n\\r\\n## Errors in GraphQL\\r\\nThere are plenty of errors that a client can face when querying a GraphQL Server. Regardless of whether it\'s a query, mutation or subscription, they can be divided into six types:\\r\\n\\r\\n- Server problems (5xx HTTP codes, 1xxx WebSocket codes)\\r\\n- Client problems like rate-limited, unauthorized, etc. (4xx HTTP codes)\\r\\n- `Query` is missing or was malformed\\r\\n- `Query` fails GraphQL internal validation of syntax, schema logic etc. \\r\\n- User-provided `variables` or `context` is bad and `resolve`/`subscribe` function shows an error\\r\\n- Developer error occurred inside the `resolve`/`subscribe` function\\r\\n\\r\\nThe first four are critical errors that ignore all data. The first three happens before we call GraphQL server, the fourth one calls GraphQL receiving only \'errors\' in response.\\r\\n\\r\\nOn the contrary, the GraphQL server will always return `200 OK` for position five and six (if operated over HTTP). If there is an error while processing GraphQL queries, the detailed error message is sent to the customer with the answer i.e.\\r\\n\\r\\n```graphql\\r\\n    {\\r\\n      \\"errors\\": [\\r\\n        {\\r\\n          \\"message\\": \\"Field \\\\\\"blabla\\\\\\" must not have a selection since type \\\\\\"String\\\\\\" has no subfields.\\",\\r\\n          \\"locations\\": [\\r\\n            {\\r\\n              \\"line\\": 2,\\r\\n              \\"column\\": 20\\r\\n            }\\r\\n          ]\\r\\n        }\\r\\n      ]\\r\\n    }\\r\\n```\\r\\nSo how to handle this type of errors? GraphQL is a very immature language so some parts (such as handling errors) do not have worked out the best practices, but there are some approaches that we highly recommend to follow:\\r\\n\\r\\n#### 1. DATA IS DATA\\r\\nIf GraphQL returns `results.data`, there is no error.\\r\\n\\r\\n#### 2. ERRORS AS A PART OF SCHEMA \\r\\nIf the viewer should see the error, make sure to return the error as a field in your response. If your server expect an error it shouldn\'t interup the resolution, instead return a regular payload with `error` field explainng what went wrong.\\r\\n\\r\\n```graphql\\r\\n    return {\\r\\n        error:{\\r\\n            id:\'222\'\\r\\n            type:\'errorType\'\\r\\n            title: \'Name of an error\'\\r\\n            message: \'Let user know what\'s wrong how to fix\'    \\r\\n        }\\r\\n    }\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"GraphQL vs REST - Handling errors","date":"2019-01-23T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"graphql-vs-rest-errors","images":{"405.jpg":{"width":650,"height":500,"webpPath":"405.webp","optimizedPath":"405.optimized.jpg"},"405.optimized.jpg":{"width":600,"height":462,"webpPath":"405.optimized.webp","optimizedPath":"405.optimized.optimized.jpg"},"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"}}},{"content":"\\r\\nGraphQL is a query language for APIs that was originally built by Facebook.\\r\\nIts biggest advantage is making a lot easier to get the data you actually need from a query. Today we will show you how to set up MongoDB with GraphQL.\\r\\n\\r\\n\\r\\n\\r\\n## Install MongoDB with Homebrew\\r\\n\\r\\nFirst you need to install a [Homebrew](brew.sh). To do it go to Visual Code Studio and run this line from [Brew.sh](brew.sh):\\r\\n ```\\r\\n /usr/bin/ruby -e \\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\\"\\r\\n ```\\r\\n\\r\\nNow you should have your Homebrew installed. If you had it already installed, we suggest to do a brew update before proceeding, then you can install MongoDB:\\r\\n\\r\\n```sh\\r\\n$ brew update\\r\\n$ brew install mongo\\r\\n```\\r\\nWhat you need to do now is to go to a root directory, create the directory for the database and set its permissions, then you can star Mongo:\\r\\n\\r\\n```sh\\r\\n$ sudo mkdir -p /data/db\\r\\n$ sudo chmod 777 /data/db\\r\\n$ mongod\\r\\n```\\r\\nEt voila! We have it installed and running.\\r\\n\\r\\n## Mongoose\\r\\n[Mongoose](https://mongoosejs.com/) provides a straight-forward, schema-based solution to model your application data.\\r\\nIt includes:\\r\\n- built-in type casting, \\r\\n- validation, \\r\\n- query building, \\r\\n- business logic hooks\\r\\n\\r\\n\\r\\nSo let\'s install Mongoos. Make sure you are in the right directory and use `$npm install`:\\r\\n```sh\\r\\n$ npm install --save mongoose\\r\\n```\\r\\n\\r\\n## Connecting Mongo\\r\\nCreate a new folder and move your `resolvers.js` and `schema.js` files there. Remember to update your `index.js` file to make sure everything will be correctly imported here. Once we have it done we can create a new file in our fresh folder which we will use to connect Mongo to our databases, let\'s call it `connect.js`.\\r\\n\\r\\n```jsx\\r\\nimport mongoose from \'mongoose\';\\r\\n\\r\\nmongoose.Promise = global.Promise;\\r\\nmongoose.connect =(\'mongodb://localhost/users\', {\\r\\n    useMongoClient: true\\r\\n});\\r\\n```\\r\\nWhen we have it done we can start creating our schema for Mongo with the same elements as our original schema.\\r\\n\\r\\n```jsx\\r\\nconst usersSchema = new mongoose.Schema({\\r\\n    name: \\r\\n        type: String\\r\\n    }\\r\\n})\\r\\n```\\r\\nThe next important step is to create a value to our variable with that model inside, passing the schema and export:\\r\\n\\r\\n```jsx\\r\\nconst Users = mongoose.model(\'users\', usersSchema)\\r\\nexport {Users};\\r\\n```\\r\\nNow let\'s create some GraphQL resolvers. So let\'s go to `resolvers.js` and start with importing Mongoose and Users into resolvers:\\r\\n\\r\\n```jsx\\r\\nimport mongoose from \'mongoose\';\\r\\nimport { Users } from \'./connect\';\\r\\n\\r\\nexport const resolvers ={\\r\\n    Query: {\\r\\n        getUser: ({id}) => {\\r\\n            return new User (id, userDatabase[id]);\\r\\n        },\\r\\n    },\\r\\n    Mutation: {\\r\\n        createUser: (root, { input}) => {\\r\\n            const newUser = new Users({\\r\\n                name: input.name,\\r\\n            });\\r\\n\\r\\n            newUser.id = newUser._id;\\r\\n\\r\\n            return new Promise((resolve, object)) =>\\r\\n                newUser.save((err) => {\\r\\n                    if (err) reject (err)\\r\\n                    else resolve(newUser)\\r\\n                })\\r\\n            })    \\r\\n        },\\r\\n    },\\r\\n};\\r\\n```\\r\\n\\r\\nIn next part we will create nodejs GraphQL server. Stay tuned!\\r\\n\\r\\n![Done!](done.gif)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Installing MongoDB for GraphQL","date":"2019-01-22T13:37:00.284Z","image":"gql.png","author":"Artur"},"path":"installing-graphql-to-mongo","images":{"done.gif":{"width":500,"height":281,"webpPath":"done.webp","optimizedPath":"done.optimized.gif.png"},"done.optimized.gif.png":{"width":600,"height":337,"webpPath":"done.optimized.gif.webp","optimizedPath":"done.optimized.gif.optimized.png"},"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"}}},{"content":"Let\'s explore the next stage of our [GraphQL](https://graphqleditor.com/) tutorial -  type system and how it defines what data can be queried. Since GraphQL can be used with any backend programming language, we\'ll focus mostly on general the concepts.\\r\\n\\r\\n\\r\\n## Type language \\r\\nGraphQL can be used with any language. Since we can\'t rely on any specific language syntax, to talk about GraphQL schemas, we\'ll define our simple language. We\'ll use the \\"GraphQL schema language\\" - it\'s similar to the query and allows us to talk about GraphQL schemas in an agnostic way\\r\\n\\r\\n## Type system\\r\\nGraphQL query language is basically about selecting fields on objects. Let\'s check that on our example:\\r\\n\\r\\n```graphql\\r\\n{\\r\\n  Actor {\\r\\n    name\\r\\n    appearsIn\\r\\n  }\\r\\n}\\r\\n```\\r\\n```graphql\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"hero\\": {\\r\\n      \\"name\\": \\"Arnold\\",\\r\\n      \\"appearsIn\\": [\\r\\n        \\"TERMINATOR\\",\\r\\n        \\"CONAN\\",\\r\\n        \\"PREDATOR\\"\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n1. We start with a unique \\"root\\" object and select actor field on that\\r\\n2. For the object returned by actor, we select the name and appearsIn fields\\r\\n\\r\\nGraphQL query closely matches the result; therefore you can predict what the query will respond without knowing much about the server. But it\'s helpful to have an accurate description of the data we can ask for - what fields can we choose? What fields are possible on those sub-objects? What kinds of things might they respond? \\r\\n\\r\\nEvery GraphQL service describes a set of types which ultimately represent the set of potential data you can query on that service. Then, when queries come in, they are validated and executed against that schema.\\r\\n\\r\\n## Object types and fields \\r\\nThe essential elements of a GraphQL schema are object types, which describe a kind of object you can fetch from your service, and what fields it has. In the GraphQL schema language, we might represent it like this:\\r\\n\\r\\n```\\r\\ntype Actor {\\r\\n  name: String!\\r\\n  appearsIn: [Movie!]!\\r\\n}\\r\\n```\\r\\nThe language is pretty simple, but let\'s go over it so that we can have a shared dictionary:\\r\\n\\r\\n1. Actor is a GraphQL Object Type, meaning it\'s a type with some fields. Most of the types in your schema will be object types.\\r\\n2. name and appearsIn are fields on the Actor type. That means that name and appearsIn are the only fields that can appear in any part of a GraphQL query that operates on the Actor type.\\r\\n3. String is one of the built-in scalar types - these are types that resolve to a single scalar object, and can\'t have sub-selections in the query. We\'ll go over scalar types later.\\r\\n4. String! means that the field is non-nullable, saying that the GraphQL service promises always to give you value when you ask. In the type of language, we\'ll serve those with an exclamation mark.\\r\\n5. [Movie!]! represents an collection of Movie objects. Since it is also non-nullable, you can regularly expect an array (with zero or more items) when you ask the appearsIn field. And since Movie! is also non-nullable, you can always expect every item of the array to be an Movie object.\\r\\nNow you know what a GraphQL object type looks like, and how to read the basics of the GraphQL.\\r\\n\\r\\n## The Query and Mutation types\\r\\nMost types in your schema will be standard object types, but two types are special within a schema:\\r\\n\\r\\n```\\r\\nschema {\\r\\n  query: Query\\r\\n  mutation: Mutation\\r\\n}\\r\\n```\\r\\nEvery GraphQL service has a query type and don\'t need to have a mutation type. These types are the same as a regular object type, but they are unique because they define the entry point of every GraphQL query.\\r\\n\\r\\n```\\r\\nquery {\\r\\n  hero {\\r\\n    name\\r\\n  }\\r\\n  droid(id: \\"2000\\") {\\r\\n    name\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n```\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"hero\\": {\\r\\n      \\"name\\": \\"R2-D2\\"\\r\\n    },\\r\\n    \\"droid\\": {\\r\\n      \\"name\\": \\"C-3PO\\"\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\nThat means that the GraphQL service needs to have a Query type with hero and droid fields:\\r\\n\\r\\n```\\r\\ntype Query {\\r\\n  hero(episode: Episode): Character\\r\\n  droid(id: ID!): Droid\\r\\n}\\r\\n```\\r\\nMutations work similarly - you define fields on the Mutation type, and those are possible as the root mutation fields you can call in your query.\\r\\n\\r\\nIt\'s essential to master that other than the special status of being the \\"entry point\\" into the schema, the Query and Mutation types are the same as any other GraphQL object type, and their fields act precisely the same way.\\r\\n\\r\\n## Scalar types \\r\\nA GraphQL object type has a name and fields, but at some level those fields have to resolve to some particular data. That\'s where the scalar types come in: they represent the leaves of the query.\\r\\n\\r\\nIn the next query, the name and appearsIn fields will choose to scalar types. We know this because those fields don\'t have any sub-fields - they are the leaves of the query.\\r\\n\\r\\n```graphql\\r\\n{\\r\\n  Actor {\\r\\n    name\\r\\n    appearsIn\\r\\n  }\\r\\n}\\r\\n```\\r\\n```graphql\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"hero\\": {\\r\\n      \\"name\\": \\"Arnold\\",\\r\\n      \\"appearsIn\\": [\\r\\n        \\"TERMINATOR\\",\\r\\n        \\"CONAN\\",\\r\\n        \\"PREDATOR\\"\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nGraphQL comes with a set of default scalar types out of the box:\\r\\n\\r\\n- Int: A signed 32\u2010bit integer.\\r\\n- Float: A signed double-precision floating-point value.\\r\\n- String: A UTF\u20108 character sequence.\\r\\n- Boolean: true or false.\\r\\n- ID: The ID scalar type represents a unique identifier, often used to refetch an object or as the key for a cache. The ID type is serialized in the same way as a String; however, defining it as an ID signifies that it is not intended to be human\u2010readable.\\r\\n\\r\\nIn most GraphQL service implementations, there is also a way to specify custom scalar types. For example, we could define a Date type:\\r\\n\\r\\n```\\r\\nscalar Date\\r\\n```\\r\\nThen it\'s up to our implementation to define how that type should be validated serialized or deserialized. For example, you could specify that the Date type should always be serialized into an integer timestamp, and your client should know to expect that format for any date fields.\\r\\n\\r\\n## Enumeration types \\r\\nAlso called Enums, enumeration types are a special kind of scalar that\'s limited to an appropriate set of allowed values. This allows you to:\\r\\n\\r\\nValidate that any arguments of this type are one of the allowed values\\r\\nCommunicate through the type system that a field will always be one of a finite set of values\\r\\n\\r\\n```\\r\\nenum Movie {\\r\\n  TERMINATOR\\r\\n  CONAN\\r\\n  PREDATOR\\r\\n}\\r\\n```\\r\\nIt means that anywhere we use the type Movie in our schema, we expect it to be precisely one of TERMINATOR, CONAN, or PREDATOR.\\r\\n\\r\\nNote that GraphQL service implementations in different languages will have their own programming-specific way to deal with enums. In languages that support enums as a first-class citizen, the application might take advantage of that; in a language like JavaScript with no enum support, these values might be internally mapped to a set of integers.","data":{"title":"GraphQL Tutorial - Schemas and Types Part 1","date":"2019-01-18T12:15:04.284Z","author":"Robert"},"path":"graphql-schemas-and-types-part-1","images":{}},{"content":"\\r\\n[GraphQL](https://graphql.org/) is a query language for [API](https://en.wikipedia.org/wiki/Application_programming_interface)s that:\\r\\nprovides a complete and understandable description of the data in your API,\\r\\nallows Clients to ask specifically for what they need,\\r\\nmakes evolving APIs over time a lot easier,\\r\\nenhance your APIs with amazing tools inaccessible with REST\\r\\n\\r\\nGraphQL differs from traditional RESTful APIs (we covered that shortly in our [GraphQL vs REST](https://blog.graphqleditor.com/graphql-vs-rest/) blog post) so on your first encounter with the GraphQL you might notice a lot of unfamiliar terms and phrases. As big GraphQL fans, we decided to prepare a sort of GraphQL Dictionary containing the most common GraphQL terms to help you start with GraphQL.\\r\\n\\r\\n![I know the best words](bestwords.gif)\\r\\n\\r\\n## Argument\\r\\nArgument is a set of key-value attached to a field. The Arguments can have a form of literal values or variables.\\r\\n\\r\\n## Alias\\r\\nAlias is an alternative name assigned to the result of a field to avoid conflicts during data fetching operations i.e. `admin` and `regular`.\\r\\n\\r\\n```graphql\\r\\n{\\r\\n admin: users(role: admin) {\\r\\n   id\\r\\n   firstname\\r\\n   lastname\\r\\n }\\r\\n regular: users(role: regular) {\\r\\n   id\\r\\n   firstname\\r\\n   lastname\\r\\n }\\r\\n}\\r\\n```\\r\\n\\r\\n## Directive\\r\\nAn explanation preceded by a `@` that encloses the logic for query execution on client/server. GraphQL built-in directives are @skip and @include, and allow to define custom ones.\\r\\n\\r\\n## Field\\r\\nA basic unit of data you request from your schema returned as a field in JSON response i.e. `id`and `name`.\\r\\n\\r\\n```graphql\\r\\ntype User {\\r\\n id: Int!\\r\\n name: String\\r\\n}\\r\\n```\\r\\n\\r\\n## Fragment\\r\\nA selection set that can be reused in multiple query operations. A GraphQL fragment is a shared piece of query logic.\\r\\n\\r\\n## GraphQL Editor\\r\\nGraphQL Editor makes understanding GraphQL schema a lot easier. Plan your schema by linking visual blocks and GraphQL Editor will transform them into code.\\r\\n\\r\\n![GraphQL Editor](graph.png)\\r\\n\\r\\n## Introspection\\r\\nA method to provide precise information about the schema of a GraphQL API. Introspections are prefixed by \\"__\\".\\r\\n\\r\\n## Mutation\\r\\nOne of basic GraphQL operation allowing to manipulate data (create, modify, delete).\\r\\n\\r\\n```graphql\\r\\nmutation DeleteTodo($type: String!) {\\r\\n deleteTodo(type: $type) {\\r\\n   id\\r\\n   type\\r\\n }\\r\\n}\\r\\n```\\r\\n\\r\\n## Object Type\\r\\nIt\'s type in a GraphQL schema that contains fields. `User` is our Object Type here:\\r\\n```graphql\\r\\ntype User {\\r\\n  name: String!,\\r\\n}\\r\\n```\\r\\n\\r\\n## Operation\\r\\nThe single query, mutation or subscription, which could be interpreted by execution engine in GraphQL.\\r\\n\\r\\n## Operation Name\\r\\nA name for above-mentioned elements. Name make a lot easier identifying, logging or debugging errors in a GraphQL server.\\r\\n\\r\\n## Query\\r\\nIt\'s a basic fetch operation to reqest data in GraphQL.\\r\\n\\r\\n## Query Colocation\\r\\nOne of [GraphQL best practices](https://graphql.org/learn/best-practices/), where you place a GraphQL query in the same location as the app component\u2019s view logic.\\r\\n\\r\\n## Query whitelisting\\r\\nA security practice involving defining a list of approved queries that are allowed in your app.\\r\\n\\r\\n## Resolver\\r\\nA function tconecting your GraphQL schema elements to backends.  Resolvers turn operations into data; they can return strings, ints, null & other primitives.\\r\\n\\r\\n\\r\\n## Schema\\r\\nA GraphQL schema is the central piece of every GraphQL server implementation. The GraphQL schema is responsible for the whole logic of your project and describes functionalities available to the client app.\\r\\n\\r\\n## Schema Definition Language (SDL)\\r\\nA GraphQL Schema Definition is a way to define a GraphQL schema. The syntax is a are part of the official GraphQL specification. The main components of each schema are the `types` and their `fields`.\\r\\n\\r\\nThe GraphQL schema for a movie review site could be defined like this:\\r\\n\\r\\n```graphql\\r\\ntype Review {\\r\\n id: String!\\r\\n title: String!\\r\\n publishedAt: DateTime!\\r\\n stars: Int! @default(value: 0)\\r\\n feed: Feed @relation(name: \\"Reviews\\")\\r\\n}\\r\\n\\r\\ntype Feed {\\r\\n id: String!\\r\\n name: String!\\r\\n description: String,\\r\\n reviews: [Review!]! @relation(name: \\"Review\\")\\r\\n}\\r\\n```\\r\\n\\r\\n## Schema Stitching\\r\\nMerging minor schemas into central GraphQL schema.\\r\\n\\r\\n## Subscription\\r\\nIs a real-time operation in GraphQL that is defined in a schema.\\r\\n\\r\\n```graphql\\r\\ntype Subscription {\\r\\n reviewAdded(repoFullName: String!): Review\\r\\n}\\r\\n...graphql\\r\\nsubscription onReviewAdded($repoFullName: String!){\\r\\n reviewAdded(repoFullName: $repoFullName){\\r\\n   id\\r\\n   content\\r\\n }\\r\\n}\\r\\n```\\r\\n\\r\\n## Scalar Type\\r\\nIt\'s GraphQL type that validate the data that GraphQL field resolves. String, Int, Boolean, Float are all built-in scalars that you can do a lot with out of the box. Custom scalar types can be specified in a GraphQL service implementation.\\r\\n\\r\\n\\r\\n## Type System\\r\\nIt\'s a set of rules that define the set of data that can be valiudated, queried & executed.\\r\\n\\r\\n## Variable\\r\\nIt\'s a value that can be passed to an operation, like `userID` in below example:\\r\\n\\r\\n```graphql\\r\\nquery GetUser($userId: ID!){\\r\\n user(id: $userId){\\r\\n   name\\r\\n }\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"GraphQL Tutorial - Dictionary","date":"2019-01-16T13:37:00.284Z","image":"gql.png","author":"Tomek"},"path":"GraphQL-tutorial-dictionary","images":{"bestwords.gif":{"width":480,"height":360,"webpPath":"bestwords.webp","optimizedPath":"bestwords.optimized.gif.png"},"bestwords.optimized.gif.png":{"width":600,"height":450,"webpPath":"bestwords.optimized.gif.webp","optimizedPath":"bestwords.optimized.gif.optimized.png"},"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"graph.optimized.png":{"width":600,"height":369,"webpPath":"graph.optimized.webp","optimizedPath":"graph.optimized.optimized.png"},"graph.png":{"width":600,"height":369,"webpPath":"graph.webp","optimizedPath":"graph.optimized.png"}}},{"content":"\\r\\nIn this GraphQL tutorial, we will show you how easy is implementing GraphQL in a React application. We\u2019ll be using the [React Apollo](https://github.com/apollographql/react-apollo) library that allows you to fetch data from your GraphQL server and use it the [React](https://reactjs.org/) framework.\\r\\n\\r\\n## Setup a project\\r\\n\\r\\nBefore you start make sure that you have Node.js installed. To get started we first need to set up a new React project. The easiest way to do so is to use [create-react-app](https://github.com/facebook/create-react-app), which allows you to create a new React project with zero build configuration.\\r\\n\\r\\n```\\r\\n$ npx create-react-app my-graphql-project\\r\\n$ cd my-graphql-project\\r\\n$ npm start\\r\\n```\\r\\n\\r\\n## Install dependencies\\r\\n\\r\\nOnce you have above done the next step will be to install dependencies. You can do it with a single NPM command which will install the following packages:\\r\\n\\r\\n```\\r\\n$ npm install apollo-boost react-apollo graphql graphql-tag\\r\\n```\\r\\n\\r\\n- `apollo-boost`: a package with all necessary Apollo Client components\\r\\n- `react-apollo`: a view layer for React\\r\\n- `graphql` & `graphql-tag`: both required to parse GraphQL queries\\r\\n\\r\\n## Create a client\\r\\n\\r\\nNow you need to create an instance of [Apollo Client](https://github.com/apollographql/apollo-client). You can do it `App.js` by adding the following code:\\r\\n\\r\\n```jsx\\r\\nimport ApolloClient from \'apollo-boost\'\\r\\nconst client = new ApolloClient({\\r\\n  uri: \'[Put your GraphQL endpoint URI here]\',\\r\\n})\\r\\n```\\r\\n\\r\\n## Create GraphlQL Endpoint\\r\\n\\r\\nTo start with, all you really need is the endpoint for your GraphQL server. You can define it in `uri` or it will be `/graphql` endpoint on the same host as your app by default.\\r\\n\\r\\n## Connect your React app with Apollo\\r\\n\\r\\nTo connect the Apollo Client to React use the `ApolloProvider` component exported from `react-apollo`. The `ApolloProvider` works simillar to React\u2019s context provider:\\r\\n\\r\\n- it wrapps your React app,\\r\\n- places the client on the context,\\r\\n\\r\\ngiving you access to it anywhere in your component tree.\\r\\n\\r\\n```jsx\\r\\nimport React from \'react\'\\r\\nimport { render } from \'react-dom\'\\r\\nimport { ApolloProvider } from \'react-apollo\'\\r\\nimport ApolloClient from \'apollo-boost\'\\r\\nconst client = new ApolloClient({\\r\\n  uri: \'[Put your GraphQL endpoint URI here]\',\\r\\n})\\r\\nconst App = () => (\\r\\n  <ApolloProvider client={client}>\\r\\n    <div>\\r\\n      <h1>My app</h1>\\r\\n    </div>\\r\\n  </ApolloProvider>\\r\\n)\\r\\n\\r\\nrender(<App />, document.getElementById(\'root\'))\\r\\n```\\r\\n\\r\\n## You made it!\\r\\n\\r\\nNow, once your first React + GraphQL app is up and running you can start fetching some data with GraphlQL Queries have fun!\\r\\n","data":{"title":"Getting started with React GraphQL","date":"2019-01-15T13:37:00.284Z","image":"gqlreact.png","author":"Tomek"},"path":"getting-started-with-react-graphql","images":{"gqlreact.optimized.png":{"width":600,"height":315,"webpPath":"gqlreact.optimized.webp","optimizedPath":"gqlreact.optimized.optimized.png"},"gqlreact.png":{"width":1200,"height":630,"webpPath":"gqlreact.webp","optimizedPath":"gqlreact.optimized.png"}}},{"content":"\\r\\n## Graphs, graphs everywhere!\\r\\n\\r\\nGraphs are powerful tools for modeling complicated structures. In [GraphQL](https://graphql.org/) you model your business model as a graph by defining a schema, then within your [GraphQL schema](https://graphql.org/learn/schema/), you define different types of nodes and how they relate with other nodes. This creates a well-known pattern (Object-Oriented Programming) on the client side. Think of your [GraphQL schema](https://www.apollographql.com/docs/graphql-tools/generate-schema.html) as a common language spoken by your business team, development team as well as your users. Defining your schema is a crucial thing for the GraphQL project. Since GraphQL only defines the interface you have the freedom to use it with any backend.\\r\\n\\r\\nThere are plenty of tools and extensions helping with its creation, among them our [Visual GraphQL Editor](https://graphqleditor.com/).\\r\\n\\r\\n![Think in graphs](graphs.jpg)\\r\\n\\r\\n\\r\\n\\r\\n## Authorization\\r\\n\\r\\nAuthorization is a type of business logic that describes whether a given user, session or context has permission to perform some action or read data. Defining authorization logic inside the resolver is fine when prototyping, however, you should delegate authorization logic to the business logic layer for production. It\'s recommended having a single source of truth for authorization instead of a token or API key, this allows better handling of authorization and authentication in different stages of the request processing pipeline.\\r\\n\\r\\n## Caching\\r\\n\\r\\nCaching is an integral part of the HTTP specification. Because of the way GraphQL operates, it does not follow the HTTP specification for caching and instead uses a single endpoint, so it is up to the developer to make sure that caching is implemented properly for non-mutable queries. Fortunately, there are some libraries that can help GraphQL solve this problem like [Apollo](https://www.apollographql.com/) or [FlacheQL](http://www.flacheql.io/). You can read more about them in [GraphQL vs REST - Caching](https://blog.graphqleditor.com/grapqhl-vs-rest-caching/) blog post.\\r\\n\\r\\n![Caching in GraphQL](cache.jpeg)\\r\\n\\r\\n## Pagination\\r\\n\\r\\nA common practice in GraphQL is to trace the interactions between sets of objects. There are many ways in which these dependencies can be disclosed. In GraphQL we could do pagination as:\\r\\n- `friends(first:2 offset:2)` to ask for the next two on the list.\\r\\n- `friends(first:2 after:$friendId)`, to ask for the next two after the last friend we fetched.\\r\\n- `friends(first:2 after:$friendCursor)`, where we get a cursor from the last item and use that to paginate.\\r\\n\\r\\nDifferent pagination models enable different client capabilities\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"GraphQL Best Practices","date":"2019-01-11T16:00:00.284Z","image":"gql.png","author":"Tomek"},"path":"graphql-best-practices","images":{"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"},"graphs.jpg":{"width":600,"height":327,"webpPath":"graphs.webp","optimizedPath":"graphs.optimized.jpg"},"graphs.optimized.jpg":{"width":600,"height":327,"webpPath":"graphs.optimized.webp","optimizedPath":"graphs.optimized.optimized.jpg"}}},{"content":"\\r\\nAs you all know, a cache is a hardware or software component that stores data (usually as a result of an earlier computation) so that future requests could be served faster. Caching is considered by many developers as one of the GraphQL weaknesses. Is that true? And why caching is so important?\\r\\n\\r\\n\\r\\n## The importance of caching\\r\\nWe implement caching to increase the performance of our applications and decrease loads on our servers. Google observed that 53% of page visitors leave the page if it takes more than three seconds to load. A neural network trained to predict user behavior with 90% accuracy revealed that as page load time goes from one second to five, the probability of bounce increases by 90%. \\r\\n\\r\\n![google.png](google.png)\\r\\n\\r\\n## GraphQL vs REST\\r\\nCaching is an integral part of the HTTP specification that REST APIs can use. GET vs. POST caching semantics is clearly defined so that browser caches, intermediary proxies, and server frameworks can follow. Because of the way GraphQL operates, it does not follow the HTTP specification for caching and instead uses a single endpoint, so it is up to the developer to make sure that caching is implemented properly for non-mutable queries. The GraphQL page even frankly suggests that the client should take care of the caching on its end. Fortunately, there are some libraries that can help GraphQL solve this problem with the help of developers.\\r\\n\\r\\n## GraphQL Libraries that can help\\r\\nChoosing one of them will help you develop more performance-focused applications and reduce the number of sessions being bounced:\\r\\n\\r\\n- [FlacheQL](https://github.com/FlacheQL/FlacheQL) - [FlacheQL](http://www.flacheql.io/#/) offers partial retrieval of cached data based on search parameters \u2014 a feature that no other [GraphQL](https://graphql.org) library offers. Larger implementations like Apollo and Relay can only cache data based on GraphQL query fields. \\r\\n\\r\\n- [Apollo GraphQL](https://www.apollographql.com) - [Apollo](https://www.apollographql.com) includes a default cache implementation for Apollo Client 2.0. It\'s called InMemoryCache and it is a normalized data storage that supports all of Apollo Client 1.0\u2019s features without the dependency on Redux. You can read more about its use-cases [here](https://www.apollographql.com/docs/react/advanced/caching.html#recipes).\\r\\n\\r\\n- [Relay Library](https://github.com/graphql/graphql-relay-js) - [Relay](https://facebook.github.io/relay/) faciliate creation of Relay-compliant servers using the GraphQL.js reference implementation of a GraphQL server.\\r\\n\\r\\n## Conclusion\\r\\nGraphQL definitely needs a better caching system to win the GraphQL vs REST war.\\r\\n","data":{"title":"GraphQL vs REST - Caching","date":"2019-01-09T13:37:00.284Z","image":"gqlvsrest.png","author":"Tomek"},"path":"grapqhl-vs-rest-caching","images":{"google.optimized.png":{"width":600,"height":290,"webpPath":"google.optimized.webp","optimizedPath":"google.optimized.optimized.png"},"google.png":{"width":1629,"height":788,"webpPath":"google.webp","optimizedPath":"google.optimized.png"},"gqlvsrest.optimized.png":{"width":600,"height":315,"webpPath":"gqlvsrest.optimized.webp","optimizedPath":"gqlvsrest.optimized.optimized.png"},"gqlvsrest.png":{"width":1200,"height":630,"webpPath":"gqlvsrest.webp","optimizedPath":"gqlvsrest.optimized.png"}}},{"content":"\\r\\nIn [Part 1](https://blog.graphqleditor.com/graphql-tutorial-queries-and-mutations-part1/) of our GraphQL Tutorial, we have ended covering Operation Name. Let\u2019s move to a feature allowing us to save some time as well as bits over the wire - the Variables.\\r\\n\\r\\n## Variables\\r\\n\\r\\nUntil now, our arguments were written inside a query string. As most of the time, arguments to fields will be dynamic, it\u2019s a poor idea to pass the dynamic arguments in the query string. To handle this client-side code would need to manipulate the query string at runtime dynamically, serializing it into a format specific for GraphQL. [GraphQL](https://graphqleditor.com/) comes with a solution - variables.\\r\\n\\r\\nTo start using them, we need to follow three steps. First, we need to replace a static value in the query with $variableName. Next to declare $variableName as one of the variables accepted by the query and finally pass variableName: value in the separate, transport-specific variables dictionary (a JSON would be just fine).\\r\\n\\r\\nQuery:\\r\\n```graphql\\r\\nquery UserNameAndFriends($gender: Gender) {\\r\\n  user(gender: $gender) {\\r\\n    name\\r\\n    friends {\\r\\n      name\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nVariable:\\r\\n```graphql\\r\\n{\\r\\n  \\"gender\\": \\"MALE\\"\\r\\n}\\r\\n```\\r\\n\\r\\nResult:\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"user\\": {\\r\\n      \\"name\\": \\"James\\",\\r\\n      \\"friends\\": [\\r\\n        {\\r\\n          \\"name\\": \\"Adam\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \\"Paul\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \\"Chris\\"\\r\\n        }\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n## Variable definitions\\r\\n\\r\\nThe variable definitions are the part that looks like this in the above query ($gender: Gender). It operates the same way as the argument definitions for a function in a typed language. It lists all variables prefixed with $ followed by their type (in this case Gender).\\r\\n\\r\\nAll declared variables must be both:\\r\\n- Scalars\\r\\n- Enums\\r\\n- Input Object Types\\r\\n\\r\\nThis means that if you want to pass a complex object into a field, you need to know which input type will match on the server. \\r\\n\\r\\nVariable definitions can be:\\r\\n- optional \\r\\n- requisitely\\r\\n\\r\\nIn the above case, it is optional. But if the field in which you pass the variable requires a non-zero argument, the variable must also be required.\\r\\n\\r\\nYou will learn more about the syntax for these variable definitions in our next article about the schema language GraphQL.\\r\\n\\r\\n## Default variables\\r\\n\\r\\nIn [GraphQL](https://graphql.org/) you can assign Default values to the variables. It\u2019s done by by adding the default value after the type declaration in your query. If Default values are provided for all variables, you can call the query without passing any variables. Note that If you will pass any variables in your query they Default values will be overridden.\\r\\n\\r\\n```graphql\\r\\nquery UserNameAndFriends($gender: Gender = MALE) {\\r\\n  user(gender: $gender) {\\r\\n    name\\r\\n    friends {\\r\\n      name\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n## Directives\\r\\n\\r\\nDirectives let you include or exclude a field if a variable is `true` or `false`. It\'s very useful when we need to dynamically change the structure of the query.\\r\\n\\r\\nQuery:\\r\\n```graphql\\r\\nquery User($gender: Gender, $withFriends: Boolean!) {\\r\\n  user(gender: $gender) {\\r\\n    name                \\r\\n    friends @include(if: $withFriends) {\\r\\n      name\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nVariables:\\r\\n```graphql\\r\\n{\\r\\n  \\"gender\\": \\"MALE\\",\\r\\n  \\"withFriends\\": true\\r\\n}\\r\\n```\\r\\nResult:\\r\\n```json\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"user\\": {\\r\\n      \\"name\\": \\"James\\",\\r\\n      \\"friends\\": [\\r\\n        {\\r\\n          \\"name\\": \\"Adam\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \\"Paul\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \\"Chris\\"\\r\\n        }\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nIn this case `withFriends` variable we pass is `true` so we also get the friends field, if `false` we won\'t.\\r\\n\\r\\nThere are two types of directives available in GraphQL:\\r\\n- `@include(if: Boolean)` that includes field in the result if true.\\r\\n- `@skip(if: Boolean)` that skip field if the argument is true.\\r\\n\\r\\nAs already mentioned, Directives are great to handle situations where you normally would have to perform string manipulations to change some fields in your query. \\r\\n\\r\\n","data":{"title":"GraphQL Tutorial - Queries and mutations Part 2","date":"2019-01-08T12:30:00.284Z","image":"gql.png","author":"Tomek"},"path":"graphql-tutorial-queries-and-mutations-part2","images":{"gql.optimized.png":{"width":600,"height":315,"webpPath":"gql.optimized.webp","optimizedPath":"gql.optimized.optimized.png"},"gql.png":{"width":1200,"height":630,"webpPath":"gql.webp","optimizedPath":"gql.optimized.png"}}},{"content":"\\r\\n\\r\\nThis time let\u2019s take a look at another important aspect of [GraphQL](https://graphqleditor.com/) vs REST discussion - the PERFORMANCE.\\r\\n\\r\\n\\r\\n## GraphQL = performance vs REST = reliability \\r\\n\\r\\nThe main GraphQL quality is being less loquacious than traditional [REST API](https://www.restapitutorial.com/lessons/whatisrest.html).  GraphQL treats performance as its top priority while REST is focused on keeping services reliability as their main objective. Even if a REST API returns only a basic partial, it is still transferring more data, while GraphQL is always aiming for the smallest possible request. In an example, if the client needs a field, they request it, and if the API adds a new field, clients don\'t get it, unless it\'s being added into the GraphQL query.\\r\\n\\r\\n\\r\\n## No wasted bits over the wire\\r\\n\\r\\nYou all have seen APIs where you need to `GET /author` first and then fetch each book individually via `GET /author/:id/books/:id` endpoint. This result in n+1 queries, a  well-known performance issue face in REST APIs.  While REST API calls are chained on the client side before the final representation can be formed for display, in GraphQL its simplified by enabling the server to combined all the data for the client within a single query which results in less bits being transferred over the wire.\\r\\n\\r\\n```graphql\\r\\n{\\r\\n  author (id: \\"1\\") {\\r\\n    name\\r\\n    book (id: \\"5\\") {\\r\\n      title\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n```json\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"author: {\\r\\n      \\"name\\": \\"George R.R. Martin\\",\\r\\n      \\"book\\": [\\r\\n        {\\r\\n          \\"title\\": \\"A Dance with Dragons\\"\\r\\n        }\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n## Conclusion\\r\\n\\r\\n[GraphQL](https://graphql.org/) is faster than [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) because as you can pick the fields you want to query, so the request will always be the smallest possible. Additionally, with GraphQL, you can enquire multiple entities in one request,  and because less bits will be transferred over the wire so your projects will perform faster than while using [REST](https://en.wikipedia.org/wiki/Representational_state_transfer).\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"GraphQL vs REST Performance","date":"2019-01-07T13:37:00.284Z","image":"gqlvsrest.png","author":"Tomek"},"path":"graphql-vs-rest-performance","images":{"gqlvsrest.optimized.png":{"width":600,"height":315,"webpPath":"gqlvsrest.optimized.webp","optimizedPath":"gqlvsrest.optimized.optimized.png"},"gqlvsrest.png":{"width":1200,"height":630,"webpPath":"gqlvsrest.webp","optimizedPath":"gqlvsrest.optimized.png"}}},{"content":"\\r\\nGraphQL is a query language for APIs and a runtime for fulfilling these queries with your existing data. The technology makes it possible for clients to request data that they exactly need, nothing more. GraphQL queries not only have access to the properties of a single source but also easily track references between them. While typical REST APIs require loading from multiple URLs, GraphQL APIs get all the data your app needs in a single request, making applications using GraphQL a lot faster, even on mobile network connections.\\r\\n\\r\\n\\r\\nAs you already know [npm Inc.](https://www.npmjs.com/) claims that the [GraphQL is going to be a tech force to reckon in 2019](https://blog.graphqleditor.com/javascript-predictions-for-2019-by-npm/). There is no better way to start your journey with GraphQL than use the most popular client library which is [Apollo GraphQL](https://www.apollographql.com/).\\r\\n\\r\\n\\r\\n\\r\\n## What\u2019s Apollo GraphQL?\\r\\n\\r\\nApollo is an implementation of GraphQL created to address the specific needs of modern development teams building data-driven applications. It adopts an agile, scalable approach that takes extra care not to modify existing APIs and services. The library puts an emphasis on tooling and workflows. The Apollo GraphQL platform is a stack of open source components, commercial extensions, and cloud services.\\r\\n\\r\\n\\r\\n![structure.png](structure.png)\\r\\n\\r\\nSource: [Apollo Docs](https://www.apollographql.com/docs/)\\r\\n\\r\\n## Most of the core components are open source\\r\\n\\r\\nApollo is an open source company, focused on what developers really need, and with a clear mission which is providing a better GraphQL experience for everyone. The collaboration of hundreds of developers working on Apollo Client, Apollo Server, as well as other components of the Apollo platform, makes it an industry-leading solution for GraphQL implementations.\\r\\n\\r\\n\\r\\n![apollo.png](apollo.png)\\r\\nSource: [Apollo](https://www.apollographql.com/)\\r\\n\\r\\n[Apollo Server](https://github.com/apollographql/apollo-server) is a JavaScript GraphQL server for defining a schema and a set of resolvers that implement each part of that schema. An Apollo Server is extensible which means plugins can hook into each stage of the request pipeline. This is a great feature that allows implementing custom behaviors as add-on packages. Apollo Server works with any GraphQL schema built with GraphQL.js, serverless environments such as AWS Lambda and is open source and community-maintained.\\r\\n\\r\\n[Apollo Client](https://github.com/apollographql/apollo-client) is a full-featured GraphQL client that manages data and state in your app. It enables a declarative programming style that allows developers to define queries as part of UI components while the client manages all query binding, manages consistency, caching, and much more.  Apollo Client includes integrations with the most popular View lawyers such as React, React Native or Vue.\\r\\n\\r\\n[Apollo iOS](https://github.com/apollographql/apollo-ios) is a strongly-typed GraphQL caching client for iOS written in Swift. It allows the execution of queries and mutations on a GraphQL server and returns the results as query-specific Swift types. This means that you do not have to deal with parsing JSON or making the client to cast values to the right type manually. Model types are generated from the GraphQL definitions your application\'s UI.\\r\\n\\r\\n\\r\\n[Apollo Android](https://github.com/apollographql/apollo-android) is a GraphQL client for generating Java models from GraphQL queries, giving you a typesafe API to work with your GraphQL servers. Although it\u2019s designed mainly for Android, you can use it in any Java/Kotlin app.\\r\\n\\r\\n[Apollo CLI](https://github.com/apollographql/apollo-tooling) is a simple command line client that merges your GraphQL clients and servers with features such as validation of your GraphQL schema, securing compatibility of your server operations, or generating static types for client-side type security.\\r\\n\\r\\n## A solution for development teams\\r\\n\\r\\nGraphQL is all about collaboration. Development teams that work collaboratively on their GraphQL API achieve the best results. To facilitate this collaboration Apollo team created some useful solutions such as:\\r\\n\\r\\n- Schema Registry - a registry for GraphQL schemas that functions as a central source of truth for a schema, enriched with additional metadata such as field-level usage statistics.\\r\\n\\r\\n- Client registry \u2014 a registry to track each known schema user, both pre-registered and ad-hoc consumers.\\r\\n\\r\\n- Operation registry \u2014 a registry of all the known operations against the schema\\r\\n\\r\\n- Trace warehouse \u2014 a data pipeline that stores a detailed log of every operation performed against your schema. All these registries work collectively to give your development team a good understanding of the API.\\r\\n\\r\\n- Safelisting - locking your API down to trusted, pre-registered operations. Apollo CLI extracts all the queries from a client codebase and stores it in the operation registry. Separately, an Apollo Server plugin synchronizes the list of pre-registered operations to the server, which then rejects queries that aren\u2019t present in its local copy.\\r\\n\\r\\n- Schema validation - which tests a proposed schema against the known set of operations observed in production, returning a list of affected clients for each breaking change.\\r\\n\\r\\n- GraphQL Gateway - a configuration of Apollo Server, along with some add-ons that functions as a GraphQL Gateway. The gateway composes separately deployed \u201cmicro-schemas\u201d that reference each other into a single master schema, which looks to a client just like any regular GraphQL schema. To answer queries, the gateway builds a query plan, fetches data from each upstream GraphQL service, and assembles it all back together into a single result. \\r\\n\\r\\n![graphql.png](graphql.png)\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"Apollo GraphQL - a short overview","date":"2019-01-03T13:37:00.284Z","image":"apollo.png","author":"Tomek"},"path":"Apollo-GraphQL-a-short-overview","images":{"apollo.optimized.png":{"width":600,"height":365,"webpPath":"apollo.optimized.webp","optimizedPath":"apollo.optimized.optimized.png"},"apollo.png":{"width":1726,"height":1051,"webpPath":"apollo.webp","optimizedPath":"apollo.optimized.png"},"graphql.optimized.png":{"width":600,"height":210,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":1000,"height":350,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"structure.optimized.png":{"width":600,"height":302,"webpPath":"structure.optimized.webp","optimizedPath":"structure.optimized.optimized.png"},"structure.png":{"width":1024,"height":516,"webpPath":"structure.webp","optimizedPath":"structure.optimized.png"}}},{"content":"\\r\\n## Fields \\r\\n\\r\\nAt its purest, GraphQL is about asking for specific fields on objects. Let\'s start by looking at a very easy query:\\r\\n\\r\\n```graphql\\r\\n{\\r\\n  user {\\r\\n    name\\t\\r\\n  }\\r\\n}\\r\\n```\\r\\n```graphql\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"user\\": {\\r\\n      \\"name\\": \\"James\\"\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nYou can see quickly that the query has the same shape as an output. This is fundamental to GraphQL, because you always get back what you expect. \\r\\n\\r\\nThe field name returns a String type. The query above is interactive. That means you can change it as you like and see the new result. Try adding an appears. In field to the user object in the query, and see the new result.\\r\\n\\r\\nIn the previous case, we just asked for the name of our user which returned a String, but fields can also commit to Objects. In that case, you can get a sub-selection of fields for that object. GraphQL queries can cross related objects and their fields, allowing customers to get lots of associated data in one request, instead of making many round trips as one would need in a classic REST architecture.\\r\\n\\r\\n```graphql\\r\\n{\\r\\n  player {\\r\\n    name\\r\\n    # You can add comments!\\r\\n    friends {\\r\\n      name\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n```graphql\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"player\\": {\\r\\n      \\"name\\": \\"James\\",\\r\\n      \\"friends\\": [\\r\\n        {\\r\\n          \\"name\\": \\"Adam\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \\"Paul\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \\"Chris\\"\\r\\n        }\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nNote that in this sample, the friends field returns an collection of items. GraphQL queries look the same for both individual items or lists of items, however we understand which one to expect based on what is indicated in the schema.\\r\\n\\r\\n## Aliases\\r\\n\\r\\nIf you have a fine eye, you may have discovered that, since the result object fields match the name of the field in the query but don\'t include arguments, you can\'t directly query for the same field with various arguments. That\'s why you require aliases - they let you rename the result of a field to anything you want.\\r\\n\\r\\n```graphql\\r\\n{\\r\\n  bluePlayer: player(team: BLUE) {\\r\\n    name\\r\\n  }\\r\\n  blackPlayer: player(team: BLACK) {\\r\\n    name\\r\\n  }\\r\\n}\\r\\n```\\r\\n```graphql\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"bluePlayer\\": {\\r\\n      \\"name\\": \\"Superman\\"\\r\\n    },\\r\\n    \\"blackPlayer\\": {\\r\\n      \\"name\\": \\"Batman\\"\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nIn the previous instance, the **player** fields would have clashed, but since we can alias them to different names, we can get both results in one request.\\r\\n\\r\\n## Arguments\\r\\n\\r\\nIf the only thing we could do was traverse objects and their fields, GraphQL would already be a beneficial language for data fetching. But when you add the ability to pass arguments to fields, things get much more impressive.\\r\\n\\r\\n```graphql\\r\\n{\\r\\n player(id: \\"1\\") {\\r\\n    name\\r\\n    weight\\r\\n  }\\r\\n}\\r\\n```\\r\\n```graphql\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"player\\": {\\r\\n      \\"name\\": \\"James\\",\\r\\n      \\"weight\\": 80\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nIn practice like REST, you can only pass an individual set of arguments - the query parameters and URL segments in your request. However, in GraphQL, every field and a nested object can get its set of cases, causing GraphQL a total replacement for doing many API fetches. You can even pass arguments into scalar fields, to complete data transformations once on the server, alternately of on each client separately.\\r\\n\\r\\n```graphql\\r\\n{\\r\\n player(id: \\"1\\") {\\r\\n    name\\r\\n    height(unit: CM)\\r\\n  }\\r\\n}\\r\\n```\\r\\n```graphql\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"player\\": {\\r\\n      \\"name\\": \\"James\\",\\r\\n      \\"height\\": 180\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\nArguments can be of many various types. In the above sample, we have adopted an Enumeration type, which describes one of a finite set of options (in this case, units of length, either METER or FOOT). GraphQL comes with a default set of types, but a GraphQL server can also declare its own custom types, as long as they can be serialized into your transport format.\\r\\n\\r\\n## Fragments\\r\\n\\r\\nLet\'s say we had a moderately complex page in our app, which let us look at two players along with their friends. You can imagine that such a query could quickly get difficult because we would need to repeat the fields at least once - one for each side of the comparison.\\r\\n\\r\\nThat\'s why GraphQL covers reusable units called fragments. Fragments let you create collections of fields, and then add them in queries where you need to. Here\'s a sample of how you could solve the above situation using fragments:\\r\\n\\r\\n```graphql\\r\\n{\\r\\n  leftComparison: player(team: BLUE) {\\r\\n    ...comparisonFields\\r\\n  }\\r\\n  rightComparison: player(team: Black) {\\r\\n    ...comparisonFields\\r\\n  }\\r\\n}\\r\\nfragment comparisonFields on Character {\\r\\n  name\\r\\n  friends {\\r\\n    name\\r\\n  }\\r\\n}\\r\\n```\\r\\n```graphql\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"leftComparison\\": {\\r\\n      \\"name\\": \\"Superman\\",\\r\\n      \\"friends\\": [\\r\\n        {\\r\\n          \\"name\\": \\"Lois Lane\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \\"Martha Kent\\"\\r\\n        },\\r\\n      ]\\r\\n    },\\r\\n    \\"rightComparison\\": {\\r\\n      \\"name\\": \\"Batman\\",\\r\\n      \\"friends\\": [\\r\\n        {\\r\\n          \\"name\\": \\"Joker\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \u201cCatwoman\u201d\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \\"Leia Organa\\"\\r\\n        }\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\nYou can see how the above query would be much repeated. The concept of fragments is usually used to split complex application data requirements into tinier pieces, especially when you need to join lots of UI components with different fragments into one initial data fetch.\\r\\n\\r\\n\\r\\n## Operation name \\r\\n\\r\\nUntil now, we have been practising a shorthand syntax where we omit both the query keyword and the query name, but in live apps, it\'s useful to use these to make our code less ambiguous.\\r\\n\\r\\nHere\u2019s an example that includes the keyword query as operation type and operation name:\\r\\n\\r\\n```graphql\\r\\nquery PlayerNameAndFriends {\\r\\n  player {\\r\\n    name\\r\\n    friends {\\r\\n      name\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n```graphql\\r\\n{\\r\\n  \\"data\\": {\\r\\n    \\"player\\": {\\r\\n      \\"name\\": \\"James\\",\\r\\n      \\"friends\\": [\\r\\n        {\\r\\n          \\"name\\": \\"Adam\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \\"Paul\\"\\r\\n        },\\r\\n        {\\r\\n          \\"name\\": \\"Chris\\"\\r\\n        }\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\nThe operation type is either query, mutation, or subscription and defines what kind of operation you intend to do. The operation type is required unless you\'re using the query shorthand syntax, in which case you can\'t supply a name or mutable definitions for your operation.\\r\\n\\r\\nThe operation name is an important and explicit name for your operation. It is demanded in multi-operation documents, but its use is encouraged because it is beneficial for debugging and server-side logging. When something runs crazy either in your network logs or your GraphQL server, it is easier to identify a query in your codebase by name somewhat of trying to decipher the contents. Think of this just like a function name in your desired programming language. For example, in JavaScript we can easily work only with anonymous functions, but when we give a function a name, it\'s easier to track it down, debug our code, and log when it\'s called. In the same way, GraphQL query and mutation names, along with fragment names, can be a useful debugging tool on the server side to identify different GraphQL requests.\\r\\n\\r\\n","data":{"title":"GraphQL Tutorial - Queries and mutations Part 1","date":"2019-01-02T10:23:04.284Z","author":"Robert"},"path":"graphql-tutorial-queries-and-mutations-part1","images":{}},{"content":"\\r\\nnpm, Inc., which runs the world\u2019s biggest software registry and maintains the \u2018npm\u2019 software development tool has shared some very interesting read about insights and predictions about JavaScript for 2019 and it\'s going to be a great year for GraphQL!\\r\\n\\r\\n\\r\\nThe co-founder and Chief Operating Officer of npm during his lecture at the Node+JS Interactive 2018 event made some predction about there direction the web development sector is heading, the future of JavaScript and more. He also covered some development tools used within the npm community, discussed best practices, rising-star frameworks and those fading into oblivion. The predictions were made based on insights reflect feedback from 16,000 developers on JavaScript usage trends and best practices and the top four predictions are:\\r\\n\\r\\n\\r\\n## 1: You will abandon one of your current tools\\r\\n\\r\\nNothing lasts forever and this is very true for frameworks and tools in JavaScript. The average peak phase of popularity lasts from three to five years and is followed by a slow decline, as organizations have to maintain their existing applications, but have already moved to newer frameworks for new projects. For developers, this basically means that it is better to learn new frameworks than to stick to their current tools too hard.\\r\\n\\r\\n![bye.gif](bye.gif)\\r\\n\\r\\n## 2: Somebody on your team will bring in TypeScript ...\\r\\n\\r\\n... And you should be thankful! A survey of more than 16,000 developers showed that 46% of respondents used Microsoft\'s TypeScript - a proprietary JavaScript superset that compiles to regular JavaScript. The main reason for this conversion rate by enthusiasts may be the additional security TypeScript provides by type-checking. Adopting TypeScript in 2019 can give you real value, especially if you are a member of a larger team.\\r\\n\\r\\n![thanks.gif](thanks.gif)\\r\\n\\r\\n## 3: React will be the dominant framework in 2019; you\u2019ll need to learn GraphQL\\r\\n\\r\\nDespite the fact that React\u2019s growth has slowed down during 2018, it still continues to dominate the web scene. The 60% of npm survey respondents said they are using React. The npm predicts that in 2019 more people will use React for building web applications which will lead to more tutorials, cases and bug\'s being fixed.\\r\\n\\r\\n\\r\\n![react.png](react.png)\\r\\nSource: [This year in JavaScript by npm](https://img04.en25.com/Web/NPMInc/%7B82407d56-74c7-4fde-a3b7-59a2df23544f%7D_This_Year_In_JavaScript__2019_Predictions_Copy.pdf)\\r\\n\\r\\n\\r\\n\\r\\n## 4: You\u2019ll need to learn GraphQL\\r\\n\\r\\nThe 2019 will be the year of GraphQL. There is a strong likelihood that developers will use it in new projects in 2019 and afterwards. GraphQL, tracked by its most popular client library Apollo, continues to explode in popularity. GraphQL it\u2019s going to be a technical force to reckon within 2019.\\r\\n\\r\\n![graphql.png](graphql.png)\\r\\nSource: [This year in JavaScript by npm](https://img04.en25.com/Web/NPMInc/%7B82407d56-74c7-4fde-a3b7-59a2df23544f%7D_This_Year_In_JavaScript__2019_Predictions_Copy.pdf)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n## Tl;dr\\r\\n\\r\\nGraphQL, React and TypeScript are the three technologies you will need to learn in 2019!\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"JavaScript predictions for 2019 by npm","date":"2018-12-31T13:37:00.284Z","author":"Tomek"},"path":"javascript-predictions-for-2019-by-npm","images":{"bye.gif":{"width":370,"height":300,"webpPath":"bye.webp","optimizedPath":"bye.optimized.gif.png"},"bye.optimized.gif.png":{"width":600,"height":486,"webpPath":"bye.optimized.gif.webp","optimizedPath":"bye.optimized.gif.optimized.png"},"graphql.optimized.png":{"width":600,"height":463,"webpPath":"graphql.optimized.webp","optimizedPath":"graphql.optimized.optimized.png"},"graphql.png":{"width":804,"height":621,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.png"},"react.optimized.png":{"width":600,"height":518,"webpPath":"react.optimized.webp","optimizedPath":"react.optimized.optimized.png"},"react.png":{"width":848,"height":732,"webpPath":"react.webp","optimizedPath":"react.optimized.png"},"thanks.gif":{"width":443,"height":250,"webpPath":"thanks.webp","optimizedPath":"thanks.optimized.gif.png"},"thanks.optimized.gif.png":{"width":600,"height":339,"webpPath":"thanks.optimized.gif.webp","optimizedPath":"thanks.optimized.gif.optimized.png"}}},{"content":"\\r\\n## Is GraphQL a nail to the REST coffin or a tool to empower your REST APIs?\\r\\n\\r\\nREST has become the standard for designing web APIs. It introduced some great ideas like stateless servers or structured access to resources. Over the past years REST API was the best (only) available solution but due to the rapid evolution of web development REST wasn\'t able to keep up with changing requirements of the clients that access them.\\r\\n\\r\\nIn 2012  the GraphQL was developed. The main goal for GraphQL was to solve many of the shortcomings and inefficiencies that developers were experiencing while working with REST APIs.\\r\\n\\r\\n## Data Fetching with REST vs GraphQL\\r\\n\\r\\nWhen using a REST API you would gather the data by accessing multiple endpoints. In the example, you would first call endpoint to fetch the initial user data, then make a sperate call to fetch its all properties.\\r\\n\\r\\n![REST.png](REST.png)\\r\\nSource: [howtographql.com](https://www.howtographql.com/basics/1-graphql-is-the-better-rest/)\\r\\n\\r\\nIn GraphQL it\u2019s handled totally different. The specification for queries is encoded in the client rather than on the server side. You would simply send a single query to the GraphQL server that includes the concrete data requirements and the server will respond with a JSON object where it will returns exactly what you required, nothing more.\\r\\n\\r\\n![GQL.png](GQL.png)\\r\\nSource: [howtographql.com](https://www.howtographql.com/basics/1-graphql-is-the-better-rest/)\\r\\n\\r\\n\\r\\n## Nothing is perfect\\r\\n\\r\\nNew approach definitely has its pros and fixed many issues that developers complained about while working with REST, but there are some issues that trouble both technologies and on some fields REST is still a better solution. To summarize cons and pros take a look at below juxtaposition.\\r\\n\\r\\n\\r\\n|                                    | GraphQL | REST API |\\r\\n| ---------------------------------- | :-----: | :------: |\\r\\n| No Over/Under Fetching Problem     |    +    |    -     |\\r\\n| Easy Fetching of Related Resources |    +    |    -     |\\r\\n| Great Client Performance           |    +    |    -     |\\r\\n| Easy Caching                       |    -    |    +     |\\r\\n| Scoped Includes                    |    -    |    -     |\\r\\n| Easy Deprecations                  |    +    |    -     |","data":{"title":"GraphQL vs REST","date":"2018-12-27T13:37:00.284Z","author":"Tomek"},"path":"graphql-vs-rest","images":{"GQL.optimized.png":{"width":600,"height":491,"webpPath":"GQL.optimized.webp","optimizedPath":"GQL.optimized.optimized.png"},"GQL.png":{"width":2078,"height":1700,"webpPath":"GQL.webp","optimizedPath":"GQL.optimized.png"},"REST.optimized.png":{"width":600,"height":362,"webpPath":"REST.optimized.webp","optimizedPath":"REST.optimized.optimized.png"},"REST.png":{"width":1566,"height":946,"webpPath":"REST.webp","optimizedPath":"REST.optimized.png"}}},{"content":"\\r\\n2019 is going to be a good year for [GraphQL](https://graphql.org/). A lot of new tools to bridge the implementation gap, hundreds of interesting meetups across the whole globe and a couple conferences you can not afford to miss like the [GraphlQL Conf  in Berlin](https://www.graphqlconf.org/).\\r\\n\\r\\n\\r\\n### **GraphQL Conf** \\r\\nThe [GraphlQL Conf](https://www.graphqlconf.org/) is the biggest, non-profit GraphQL conference in Europe. Speakers from all around the world are coming to talk about GraphQL best practices and the latest trends. GraphQL Conf Berlin is the best place to meet industry experts and become part of the rising GraphQL community. The last year edition gathered ~270 attendees and 19 speakers from across the world.\\r\\n\\r\\n![conf.png](conf.png)\\r\\n###### Source: [https://www.graphqlconf.org/](https://www.graphqlconf.org/)\\r\\n\\r\\n\\r\\n### **Confirmed Speakers for 2019**\\r\\n\\r\\nThe line up for the upcoming year is not fully confirmed yet.  So far we have three speakers and it looks promising, just take a look!\\r\\n\\r\\n**Lee Byron**\\\\\\r\\nEx-Facebook, [GraphQL](https://graphql.org/) co-creator\\r\\nCurrently responsible for designing, building software and teams at Robinhood - the app that lets you invest in the stock market for free, directly from your phone or desktop.\\r\\n\\r\\n![2.png](2.png) \\r\\n###### Source: [https://www.graphqlconf.org/](https://www.graphqlconf.org/static/speakers/lee-byron.jpg)\\r\\n\\r\\n**Dan Schafer**\\\\\\r\\n[Facebook](https://developers.facebook.com/), [GraphQL](https://graphql.org/) co-creator\\r\\nDan Schafer is a software engineer at Facebook and a co-creator of GraphQL. He worked on the implementations of both GraphQL Mutations and Subscriptions.\\r\\n\\r\\n![3.png](3.png)\\r\\n###### Source: [https://www.graphqlconf.org/](https://www.graphqlconf.org/static/speakers/dan-scghafer.jpg)\\r\\n\\r\\n\\r\\n\\r\\n**Mirela Iclodean**\\\\\\r\\nSoftware Engineer at [Twitter](https://twitter.com/)\\r\\nMirela is a software engineer at Twitter, working on TweetDeck. In the last year, she worked closely with Twitter\u2019s GraphQL team to build the new Tweets streaming service using GraphQL Subscriptions.\\r\\n\\r\\n![1.png](1.png)\\r\\n###### Source: [https://www.graphqlconf.org/](https://www.graphqlconf.org/static/speakers/mirela-iclodean.jpg)\\r\\n\\r\\n\\r\\n### **How to register?**\\r\\n\\r\\nViist the link below for more details on how to praticipate as a atendees or a speaker. See you in Berlin!\\r\\n\\r\\n**GraphQL Conf Berlin 2019**\\\\\\r\\nDate: June 20-21, 2019\\\\\\r\\nLocation: Berlin, Germany\\\\\\r\\nOrganizers: [Prisma](https://www.prisma.io/) and [Honeypot](https://www.honeypot.io/)\\\\\\r\\nLink: https://www.graphqlconf.org/\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"The GraphQL conference you cannot miss","date":"2018-12-12T13:37:00.284Z","author":"Tomek"},"path":"graphql-conference-berlin-2019","images":{"1.optimized.png":{"width":600,"height":600,"webpPath":"1.optimized.webp","optimizedPath":"1.optimized.optimized.png"},"1.png":{"width":336,"height":336,"webpPath":"1.webp","optimizedPath":"1.optimized.png"},"2.optimized.png":{"width":600,"height":600,"webpPath":"2.optimized.webp","optimizedPath":"2.optimized.optimized.png"},"2.png":{"width":336,"height":336,"webpPath":"2.webp","optimizedPath":"2.optimized.png"},"3.optimized.png":{"width":600,"height":600,"webpPath":"3.optimized.webp","optimizedPath":"3.optimized.optimized.png"},"3.png":{"width":336,"height":336,"webpPath":"3.webp","optimizedPath":"3.optimized.png"},"conf.optimized.png":{"width":600,"height":256,"webpPath":"conf.optimized.webp","optimizedPath":"conf.optimized.optimized.png"},"conf.png":{"width":1570,"height":671,"webpPath":"conf.webp","optimizedPath":"conf.optimized.png"}}},{"content":"\\r\\nHello This is third article of advanced typescript tutorial series. Today I\'ll cover basic usage of generic functions\\r\\n\\r\\n```typescript\\r\\ntype Point = {\\r\\n  x?: number\\r\\n  y?: number\\r\\n  z?: number\\r\\n}\\r\\nconst myFunc = <T extends Point>(args: T): T => {\\r\\n  return args\\r\\n}\\r\\n```\\r\\n\\r\\nAs arguments I\'ll provide object containing Point properties. This function will only return Partial of `Point` based on provided paramaters in `args` argument;\\r\\n\\r\\n```typescript\\r\\nconst result = myFunc({\\r\\n  x: 1,\\r\\n  y: 1,\\r\\n})\\r\\n```\\r\\n\\r\\nAnd the intellisense for such function is\\r\\n![Typescript return correct args](tsreturnargs.png)\\r\\n\\r\\nAs you see there is no `z` property here. Typescript aleready knows we provided these 2 args and it should return only them!\\r\\n\\r\\nThis part is super short as I can provide infinite number of generic functions usages. Thank you for your support on `/r/typescript/ reddit ! It gives me power to write blog-post-a-day!\\r\\n\\r\\n","data":{"title":"Advanced typescript tutorial - return based on args","date":"2018-12-12T10:23:04.284Z","author":"Artur"},"path":"advanced-typescript-tutorial-return-based-on-args","images":{"tsreturnargs.optimized.png":{"width":600,"height":119,"webpPath":"tsreturnargs.optimized.webp","optimizedPath":"tsreturnargs.optimized.optimized.png"},"tsreturnargs.png":{"width":762,"height":151,"webpPath":"tsreturnargs.webp","optimizedPath":"tsreturnargs.optimized.png"}}},{"content":"\\r\\n## What is GraphQL?\\r\\n\\r\\nGraphQL is an open-source data query and manipulation language for APIs.\\r\\nIn general, GraphQL is a syntax that describes how to ask & fetch the data from the server to the client. The response format is described in the query and defined by the client rather than the server. There are two basic types of queries in GraphQL:\\r\\n\\r\\n- to fetch data from the server side (_get_)\\r\\n- to manipulate you data (_create_,_update_,_delete_)\\r\\n\\r\\n## The key concepts (principles)\\r\\n\\r\\nGraphQL is not language specific, it\'s just a specification between the client and the server. Any client should be able to communicate with any server as long as they both speak GraphQL.\\r\\n\\r\\n- **Hierarchical:** Most of today\'s product development work involves creating and manipulating view hierarchies. To achieve compatibility with the structure of the applications, the GraphQL query itself is a hierarchical set of fields. The query has a shape similar to the data it returns. It is a very natural way for product engineers to describe data requirements.\\r\\n\\r\\n- **Product\u2010centric:** GraphQL is a product-oriented, driven by the demands of the views and front-end developer who write them. We begin with their way of mind and their requirements, and then build the language and runtime necessary for this purpose.\\r\\n\\r\\n- **Strong\u2010typing:** GraphQL is strongly-typed. For a particular query, the tool can ensure that the query is both syntactically correct and correct in a GraphQL-type system before execution, i.e. at the time of query creation, and the server can have some guarantees as to the shape and nature of the response. This makes it easier to build high quality client applications.\\r\\n\\r\\n- **Client\u2010specified queries:** In GraphQL, the query specification is encoded in the client and not on the server. These queries are defined at the detail level at field level. In the vast majority of applications written without GraphQL, the server specifies the data returned at various script endpoints. A GraphQL query returns exactly what the client asks for and nothing else.\\r\\n\\r\\n- **Introspective:** GraphQL is introspective. Clients and other tools can query the type system using the GraphQL syntax as such. It is a powerful platform for building tools and client software, e.g. automatic processing of incoming data into strongly-typed interfaces.\\r\\n\\r\\n## GraphQL vs REST\\r\\n\\r\\nThe common opinion is that GraphQL is a replacement for REST. Nothing more incorrect. Although GraphQL is a newer concept, it\u2019s totally different from REST. GraphQL definitely isn\'t a nail in the REST coffin, nor is it better than it. GraphQL definitely can help you optimize your project.\\r\\n\\r\\nImagine having one GraphQL API acting as a gateway to your other REST APIs. How cool is that?\\r\\n\\r\\n## GraphQL Example\\r\\n\\r\\nIn GraphQL structure of the data is not hardcoded as in traditional REST API, which this makes retrieving data from the server more efficient and a lot easier for the client. In general, GraphQL is about asking for specific fields on objects:\\r\\n\\r\\n```\\r\\n{\\r\\n    product {\\r\\n        name\\r\\n        flav {\\r\\n            name\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nand the respone would like like this:\\r\\n\\r\\n```\\r\\n{\\r\\n    \\"data\\": {\\r\\n        \\"product\\": {\\r\\n        \\"name\\": \\"Cola\\",\\r\\n        \\"flav\\": [\\r\\n            {\\r\\n            \\"name\\": \\"Cinamon\\"\\r\\n            },\\r\\n            {\\r\\n            \\"name\\": \\"Cherry\\"\\r\\n            },\\r\\n            {\\r\\n            \\"name\\": \\"Vanilla\\"\\r\\n             }\\r\\n          ]\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n","data":{"title":"Getting Started with GraphQL","date":"2018-12-11T13:37:00.284Z","author":"Tomek"},"path":"getting-started-with-graphql","images":{}},{"content":"\\r\\nHello, This is the second article of the advanced typescript tutorial series. Today I\'ll cover the basic usage of\\r\\n\\r\\n```typescript\\r\\nextends\\r\\n```\\r\\n\\r\\nkeyword and conditional types. How does conditional type looks like?\\r\\n```typescript\\r\\ntype StringOrArray<T> = T extends string[] ? \'array\' : T extends string ? \'string\' : never\\r\\nconst a:string = \\"hello\\"\\r\\nconst b:string[] = [\\"hello\\",\\"world\\"]\\r\\nconst c:number = 1\\r\\n\\r\\nconst d:StringOrArray<typeof a> = \\"string\\"\\r\\nconst e:StringOrArray<typeof b> = \\"array\\"\\r\\nlet f:StringOrArray<typeof c> \\r\\n```\\r\\n\\r\\nSo let\'s analyze this code:\\r\\n\\r\\n1. We check if our generic Type is a string array\\r\\n2. If it is array make type as string constant \'array\'\\r\\n3. If it does not check the type. If it is string make type as string constant \'string\'\\r\\n4. Else the type is never\\r\\n   \\r\\nTo be the truth this code is useless but can give you some scope how `extends` keyword works. Next example will be a real-world example where we determine the type of the form field to give the user correct options.\\r\\n\\r\\n```typescript\\r\\ntype FieldType = \\"string\\" | \\"float\\" | \\"date\\"\\r\\n\\r\\ntype BaseField = {\\r\\n    name:string\\r\\n}\\r\\n\\r\\ntype Field<T extends FieldType> = BaseField & {\\r\\n    value: T extends \\"string\\" ? string : T extends \\"float\\" ? number : T extends \\"date\\" ? Date : never\\r\\n}\\r\\n\\r\\nconst stringField:Field<\\"string\\"> = {\\r\\n    name:\\"myfield\\",\\r\\n    value:\\"aaa\\"\\r\\n}\\r\\nconst floatField:Field<\\"float\\"> = {\\r\\n    name:\\"myfield\\",\\r\\n    value:1.0\\r\\n}\\r\\n\\r\\nconst dateField:Field<\\"date\\"> = {\\r\\n    name:\\"myfield\\",\\r\\n    value: new Date()\\r\\n}\\r\\n```\\r\\n\\r\\nThis is a little bit more advanced. What\'s going on with FieldType? It just checks the string converted to generic type to return correct type.\\r\\n\\r\\n```typescript\\r\\n\\r\\ntype FieldType = \\"string\\" | \\"float\\" | \\"date\\";\\r\\ntype BaseFieldExtended = {\\r\\n  name: string;\\r\\n  type: FieldType;\\r\\n};\\r\\nconst FieldExtended = <T extends BaseFieldExtended>(\\r\\n  baseField: T & {\\r\\n    value: T[\\"type\\"] extends \\"string\\"\\r\\n      ? string\\r\\n      : T[\\"type\\"] extends \\"date\\"\\r\\n      ? Date\\r\\n      : T[\\"type\\"] extends \\"float\\"\\r\\n      ? number\\r\\n      : never;\\r\\n  }\\r\\n) => baseField;\\r\\n\\r\\nFieldExtended({\\r\\n  name: \\"a\\",\\r\\n  type: \\"string\\",\\r\\n  value: \\"bbb\\"\\r\\n});\\r\\n\\r\\nFieldExtended({\\r\\n  name: \\"a\\",\\r\\n  type: \\"float\\",\\r\\n  value: 12\\r\\n});\\r\\n\\r\\nFieldExtended({\\r\\n  name: \\"a\\",\\r\\n  type: \\"date\\",\\r\\n  value: new Date()\\r\\n});\\r\\n\\r\\n```\\r\\n\\r\\nAnd this is what typescript is made for. To provide complicated autocompletion stuff :). Wait for the next series of advanced typescript tutorial.","data":{"title":"Advanced typescript tutorial - conditional types","date":"2018-12-11T09:23:04.284Z","author":"Artur"},"path":"advanced-typescript-tutorial-conditional-types","images":{}},{"content":"\\r\\nThe recent rise of GraphQL popularity created an ecosystem of different supplementary tools having one idea in common - making GraphQL easier to adopt for more and more developers by bridging the implementation gap which is still a big issue.\\r\\n\\r\\nIf you have heard about GraphQL but still haven\'t decided to undergone the REST API to GraphQL transformation this tools will make a decision a lot easier.\\r\\n\\r\\n\\r\\n### [GraphCMS](https://graphcms.com/)\\r\\n\\r\\nA tool which allows you to define your GraphQL API. Create structures, relations, powerful permissions and manage your content at ease. So, in general, you can build a hosted GraphQL backed for your web project along with tooling to manage its content.\\r\\n\\r\\n![graphcms.png](graphcms.png)\\r\\n\\r\\n\\r\\n### [Tipe](https://tipe.io/)\\r\\n\\r\\nTipe allows you to build your apps without managing the content. Just create a GraphQL schema file and Tipe will generate your API, content model and the editor UI. Thanks to Tipe you can prototype locally.\\r\\n\\r\\n![tipe.png](tipe.png)\\r\\n\\r\\n\\r\\n### [GraphQL Docs](https://github.com/2fd/graphdoc)\\r\\n\\r\\nGraphQL Docs will generate simple static documentation for your GraphQL schema in couple seconds giving you an option to keep your API documentation private or make it publicly available.\\r\\n\\r\\n![graphqldocs.png](graphqldocs.png)\\r\\n\\r\\n### [GraphiQL](https://github.com/graphql/graphiql)\\r\\n\\r\\nAn easy to implement  React-based IDE tool for testing and documenting GraphQL APIs. GraphiQL provides a graphic interface for your GraphQL API that takes performing queries and mutations to a new level.\\r\\n\\r\\n![graphiql.png](graphiql.png)\\r\\n\\r\\n### [Apollo Launchpad](https://launchpad.graphql.com/new)\\r\\n\\r\\nA tool take makes GraphQL code very accessible. Apollo Launchpad makes it possible to write a GraphQL schema example in JavaScript and create a serverless GraphQL endpoint.\\r\\n\\r\\n![launchpad.png](launchpad.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n","data":{"title":"The best tools and extensions for GraphQL APIs","date":"2018-12-10T13:37:00.284Z","author":"Tomek"},"path":"the-best-tools-and-extensions-for-graphql-api","images":{"graphcms.optimized.png":{"width":600,"height":320,"webpPath":"graphcms.optimized.webp","optimizedPath":"graphcms.optimized.optimized.png"},"graphcms.png":{"width":1500,"height":800,"webpPath":"graphcms.webp","optimizedPath":"graphcms.optimized.png"},"graphiql.optimized.png":{"width":600,"height":320,"webpPath":"graphiql.optimized.webp","optimizedPath":"graphiql.optimized.optimized.png"},"graphiql.png":{"width":1500,"height":800,"webpPath":"graphiql.webp","optimizedPath":"graphiql.optimized.png"},"graphqldocs.optimized.png":{"width":600,"height":320,"webpPath":"graphqldocs.optimized.webp","optimizedPath":"graphqldocs.optimized.optimized.png"},"graphqldocs.png":{"width":1500,"height":800,"webpPath":"graphqldocs.webp","optimizedPath":"graphqldocs.optimized.png"},"launchpad.optimized.png":{"width":600,"height":320,"webpPath":"launchpad.optimized.webp","optimizedPath":"launchpad.optimized.optimized.png"},"launchpad.png":{"width":1500,"height":800,"webpPath":"launchpad.webp","optimizedPath":"launchpad.optimized.png"},"tipe.optimized.png":{"width":600,"height":320,"webpPath":"tipe.optimized.webp","optimizedPath":"tipe.optimized.optimized.png"},"tipe.png":{"width":1500,"height":800,"webpPath":"tipe.webp","optimizedPath":"tipe.optimized.png"}}},{"content":"This is a part of a series documenting our startup story. Check more on \u201cMy-saas-story.\u201d\\r\\n\\r\\nLast month it was the first month we entirely used OKR method to focus our growth. I am pleased regarding our results and how we communicate between team members. We had finalized our roadmap and posted in on a website. Also, we added consulting tab (hopefully we\u2019ll start earning some money - fingers crossed). At the end of the month, I\u2019ve found about growth teams and theories from Sean Ellis. I\u2019ve introduced the team to work in agile experimenting mode, and they seem to like it!\\r\\n\\r\\nThe upcoming month we\u2019ll focus on testing new ideas for growth like viral sharing, launching first paid features (backend faker front end queries) and many other small updates ;]\\r\\n\\r\\n## Development:\\r\\n\\r\\nWe\'ve developed frontend queries to enable fronted users autocomplete query in typescript and receive typesafe response. On backend side we deployed project API and faker Service which soon will be available to all of you. Stay Tuned!\\r\\n\\r\\n## Blog posts of the month (views)\\r\\n\\r\\n[/GraphQL-newbie-tutorial-Schema-Definition-SDL/](https://blog.graphqleditor.com/GraphQL-newbie-tutorial-Schema-Definition-SDL/) 1,282\\r\\n[/levensthein-algorithm-for-better-faker-experience/](https://blog.graphqleditor.com/levensthein-algorithm-for-better-faker-experience/) 404\\r\\n[/Marketing-automation-From-800k-to-130m-impressions-in-3-months](https://blog.graphqleditor.com/Marketing-automation-From-800k-to-130m-impressions-in-3-months/)/ 307\\r\\n[](https://blog.graphqleditor.com/power-of-typeof-and-typestyle-in-react-apps/)[/power-of-typeof-and-typestyle-in-react-apps/](https://blog.graphqleditor.com/power-of-typeof-and-typestyle-in-react-apps/) 253\\r\\n[/graphsourcing-new-way-to-build-systems/](https://blog.graphqleditor.com/graphsourcing-new-way-to-build-systems/) 228\\r\\n\\r\\n## OKR\u2019s update\\r\\n\\r\\nOKR\u2019s seems to be a good foundation for the small team to maintain focus. This month we added a minor tweak to precise few positions and to measure many experiments.\\r\\n\\r\\n|                             | **oct** | **nov** |\\r\\n| --------------------------- | ------- | ------- |\\r\\n| github faker stars          | 19      | 24      |\\r\\n| github diagram stars        | 54      | 219     |\\r\\n| github graphql-editor stars | 2550    | 2675    |\\r\\n| blog views (users)          | 1500    | 4153    |\\r\\n| website views (users)       | 1000    | 2131    |\\r\\n| blog articles               | 8       | 16      |\\r\\n| mailchimp subscriptions     | 16      | 147     |\\r\\n| demo runs (users)           | 0       | 781     |\\r\\n| outreach to developers      | 700     | 2700    |\\r\\n| slack users                 | 10      | 14      |\\r\\n| quality calls/conversations | 10      | 15      |\\r\\n| experiments                 | -       | -       |\\r\\n\\r\\n## Join our slack [here](https://join.slack.com/t/graphqleditor/shared_invite/enQtNDkwOTgyOTM5OTc1LWI4YjU3N2U5NGVkNzQ2NzY5MGUxMTJiNjFlZDM1Zjc2OWRmNTI0NDM3OWUxYTk4Yjk3MzZlY2QwOWUzZmM2NDI)!\\r\\n\\r\\n","data":{"title":"My saas story nov18 growth team foundation","date":"2018-12-07T10:23:04.284Z","author":"Robert"},"path":"My-saas-story-nov18-growth-team-foundation","images":{}},{"content":"Hello, this is starting the article for advanced typescript tutorial series. Today I\'ll cover basic usage of:\\r\\n\\r\\n```typescript\\r\\ninfer\\r\\n```\\r\\n\\r\\n For me, it was hard to understand at the beginning what I can really do with `infer`. Let\'s start with a really basic example.\\r\\n\\r\\n```typescript\\r\\ntype FlattenIfArray<T> = T extends (infer R)[] ? R : T\\r\\n```\\r\\n\\r\\nSo let\'s analyze this code:\\r\\n\\r\\n1. We check if our generic Type is the array\\r\\n2. If it is array extract the real type from it\\r\\n3. If it does not leave it as is\\r\\n\\r\\nStill, it is not clear what infer is doing, so let\'s proceed with another example\\r\\n\\r\\n```typescript\\r\\ntype Unpromisify<T> = T extends Promise<infer R> ? R : T\\r\\n```\\r\\n\\r\\nThis one looks more clear as it doesn\'t have parenthesis:\\r\\n\\r\\n1. We check if type extends Promise\\r\\n2. If it does we extract the type from the promise\\r\\n3. If it does not leave it as is\\r\\n\\r\\nSee? If you use extends only just to check if the type is a promise you would use\\r\\n\\r\\n```typescript\\r\\ntype Unpromisify<T> = T extends Promise<any> ? T : never\\r\\n```\\r\\n\\r\\nAnd in infer instead of any keyword, you infer the value from type. Let\'s try with more advanced types then:\\r\\n\\r\\n```typescript\\r\\ntype FuncWithOneObjectArgument<P extends { [x: string]: any }, R> = (\\r\\n  props: P\\r\\n) => R;\\r\\n\\r\\ntype DestructuredArgsOfFunction<\\r\\n  F extends FuncWithOneObjectArgument<any, any>\\r\\n> = F extends FuncWithOneObjectArgument<infer P, any> ? P : never;\\r\\n\\r\\nconst myFunction = (props: { x: number; y: number }): string => {\\r\\n  return \\"OK\\";\\r\\n};\\r\\n\\r\\nconst props: DestructuredArgsOfFunction<typeof myFunction> = {\\r\\n  x: 1,\\r\\n  y: 2\\r\\n};\\r\\n```\\r\\n\\r\\nIntellisense for props works like this:\\r\\n![intellisense.png](intellisense.png)\\r\\n\\r\\nYou can make use of it inferring React Component props for example or another function that uses destructured params.","data":{"title":"Advanced typescript tutorial - infer","date":"2018-12-05T13:23:04.284Z","author":"Artur"},"path":"advanced-typescript-tutorial-infer","images":{"intellisense.optimized.png":{"width":600,"height":232,"webpPath":"intellisense.optimized.webp","optimizedPath":"intellisense.optimized.optimized.png"},"intellisense.png":{"width":739,"height":286,"webpPath":"intellisense.webp","optimizedPath":"intellisense.optimized.png"}}},{"content":"\\r\\nGraphQL Editor now generates API lib from graphQL schema!\\r\\n\\r\\nThis article will be about advanced TypeScript types. We used them in our graphql-editor to introduce safe typed queries which is most wanted feature in graphql editor. Usage of advanced types enabled us to provide generated typescript lib for your graphql schema.\\r\\n\\r\\n## How it works?\\r\\n\\r\\nGraphQL Editor generates api lib from graphql schema/url. To make it work:\\r\\n\\r\\n1. navigate to [GraphQL Editor Demo](https://demo.graphqleditor.com) and import your schema from file or URL or if you want to just complete tutorial use this one `https://countries.trevorblades.com/` found this one on internet.\\r\\n2. click typescript tab\\r\\n3. click Copy button located on the bottom of menu\\r\\n4. create .ts file in your TS project and copy the contents into it\\r\\n5. Your file should look like this one:\\r\\n\\r\\n```typescript\\r\\nexport type Upload = any\\r\\n\\r\\nexport enum CacheControlScope {\\r\\n  PUBLIC,\\r\\n  PRIVATE,\\r\\n}\\r\\n\\r\\nexport type Language = {\\r\\n  code?: string\\r\\n  name?: string\\r\\n  native?: string\\r\\n  rtl?: number\\r\\n}\\r\\n\\r\\nexport type Country = {\\r\\n  code?: string\\r\\n  name?: string\\r\\n  native?: string\\r\\n  phone?: string\\r\\n  continent?: Continent\\r\\n  currency?: string\\r\\n  languages?: Language[]\\r\\n  emoji?: string\\r\\n  emojiU?: string\\r\\n}\\r\\n\\r\\nexport type Continent = {\\r\\n  code?: string\\r\\n  name?: string\\r\\n}\\r\\n\\r\\nexport type Query = {\\r\\n  continents: (props: {}) => Continent[]\\r\\n  continent: (\\r\\n    props: {\\r\\n      code?: string\\r\\n    }\\r\\n  ) => Continent\\r\\n  countries: (props: {}) => Country[]\\r\\n  country: (\\r\\n    props: {\\r\\n      code?: string\\r\\n    }\\r\\n  ) => Country\\r\\n  languages: (props: {}) => Language[]\\r\\n  language: (\\r\\n    props: {\\r\\n      code?: string\\r\\n    }\\r\\n  ) => Language\\r\\n}\\r\\ntype Func<P extends any[], R> = (...args: P) => R\\r\\ntype ArgsType<F extends Func<any, any>> = F extends Func<infer P, any>\\r\\n  ? P\\r\\n  : never\\r\\n\\r\\ntype GraphQLResponse = {\\r\\n  data?: {\\r\\n    [x: string]: any\\r\\n  }\\r\\n  errors?: {\\r\\n    message: string\\r\\n  }[]\\r\\n}\\r\\n\\r\\nclass GraphQLError extends Error {\\r\\n  constructor(public response: GraphQLResponse) {\\r\\n    super(\'\')\\r\\n    console.error(response)\\r\\n  }\\r\\n  toString() {\\r\\n    return \'GraphQL Response Error\'\\r\\n  }\\r\\n}\\r\\ntype Dict = {\\r\\n  [x: string]: Dict | any | Dict[] | any[]\\r\\n}\\r\\n\\r\\ntype ResolveReturned<T> = {\\r\\n  [P in keyof T]?: T[P] extends (infer R)[]\\r\\n    ? ResolveReturned<R>[]\\r\\n    : T[P] extends {\\r\\n        [x: string]: infer R\\r\\n      }\\r\\n      ? ResolveReturned<T[P]>\\r\\n      : T[P] extends Func<any, any> ? ResolveReturned<ReturnType<T[P]>> : T[P]\\r\\n}\\r\\n\\r\\nexport type State<T> = ResolveReturned<T>\\r\\n\\r\\ntype GraphQLDictReturnType<T> = T extends Func<any, any>\\r\\n  ? ResolveReturned<ReturnType<T>>\\r\\n  : T\\r\\n\\r\\ntype ResolveArgs<T> = {\\r\\n  [P in keyof T]?: T[P] extends (infer R)[]\\r\\n    ? ResolveArgs<R>\\r\\n    : T[P] extends {\\r\\n        [x: string]: infer R\\r\\n      }\\r\\n      ? ResolveArgs<T[P]>\\r\\n      : T[P] extends Func<any, any>\\r\\n        ? [ArgsType<T[P]>[0], ResolveArgs<ReturnType<T[P]>>]\\r\\n        : true\\r\\n}\\r\\ntype GraphQLReturner<T> = ResolveArgs<T>\\r\\n\\r\\ntype FunctionToGraphQL<T extends Func<any, any>> = (\\r\\n  props?: ArgsType<T>[0]\\r\\n) => (o: GraphQLReturner<ReturnType<T>>) => Promise<GraphQLDictReturnType<T>>\\r\\ntype fetchOptions = ArgsType<typeof fetch>\\r\\n\\r\\nconst joinArgs = (q: Dict) =>\\r\\n  Array.isArray(q)\\r\\n    ? `[${q.map(joinArgs).join(\',\')}]`\\r\\n    : typeof q === \'object\'\\r\\n      ? `{${Object.keys(q)\\r\\n          .map(k => `${k}:${joinArgs(q[k])}`)\\r\\n          .join(\',\')}}`\\r\\n      : typeof q === \'string\'\\r\\n        ? `\\"${q}\\"`\\r\\n        : q\\r\\nconst resolveArgs = (q: Dict): string =>\\r\\n  Object.keys(q).length > 0\\r\\n    ? `(${Object.keys(q)\\r\\n        .map(k => `${k}:${joinArgs(q[k])}`)\\r\\n        .join(\',\')})`\\r\\n    : ``\\r\\n\\r\\nconst isArrayFunction = a => {\\r\\n  const [values, r] = a\\r\\n  const keyValues = Object.keys(values)\\r\\n  const argumentString =\\r\\n    keyValues.length > 0\\r\\n      ? `(${keyValues\\r\\n          .map(\\r\\n            v =>\\r\\n              `${v}:${\\r\\n                typeof values[v] === \'string\'\\r\\n                  ? `\\"${values[v]}\\"`\\r\\n                  : JSON.stringify(values[v])\\r\\n              }`\\r\\n          )\\r\\n          .join(\',\')})${traverseToSeekArrays(r)}`\\r\\n      : traverseToSeekArrays(r)\\r\\n  return argumentString\\r\\n}\\r\\n\\r\\nconst resolveKV = (\\r\\n  k: string,\\r\\n  v: boolean | string | { [x: string]: boolean | string }\\r\\n) =>\\r\\n  typeof v === \'boolean\'\\r\\n    ? k\\r\\n    : typeof v === \'object\'\\r\\n      ? `${k}{${objectToTree(v)}}`\\r\\n      : `${k}${v}`\\r\\nconst objectToTree = (o: { [x: string]: boolean | string }) =>\\r\\n  `{${Object.keys(o).map(k => `${resolveKV(k, o[k])}`)}}`\\r\\nconst traverseToSeekArrays = a => {\\r\\n  let b = {}\\r\\n  Object.keys(a).map(k => {\\r\\n    if (Array.isArray(a[k])) {\\r\\n      b[k] = isArrayFunction(a[k])\\r\\n    } else {\\r\\n      if (typeof a[k] === \'object\') {\\r\\n        b[k] = traverseToSeekArrays(a[k])\\r\\n      } else {\\r\\n        b[k] = a[k]\\r\\n      }\\r\\n    }\\r\\n  })\\r\\n  return objectToTree(b)\\r\\n}\\r\\n\\r\\nconst buildQuery = a =>\\r\\n  traverseToSeekArrays(a).replace(\\r\\n    /\\\\\\"([^{^,^\\\\n^\\\\\\"]*)\\\\\\":([^{^,^\\\\n^\\\\\\"]*)/g,\\r\\n    \'$1:$2\'\\r\\n  )\\r\\n\\r\\nconst construct = (\\r\\n  t: \'query\' | \'mutation\' | \'subscription\',\\r\\n  name: string,\\r\\n  args: Dict = {}\\r\\n) => (returnedQuery?: string) => `\\r\\n      ${t === \'query\' ? \'\' : t}{\\r\\n        ${name}${resolveArgs(args)}${returnedQuery}\\r\\n      }\\r\\n`\\r\\n\\r\\nconst apiFetch = (options: fetchOptions, query: string, name: string) =>\\r\\n  fetch(`${options[0]}?query=${encodeURIComponent(query)}`, options[1] || {})\\r\\n    .then(response => response.json() as Promise<GraphQLResponse>)\\r\\n    .then(response => {\\r\\n      if (response.errors) {\\r\\n        throw new GraphQLError(response)\\r\\n      }\\r\\n      return response.data[name]\\r\\n    })\\r\\n\\r\\nconst fullConstruct = (options: fetchOptions) => (\\r\\n  t: \'query\' | \'mutation\' | \'subscription\',\\r\\n  name: string\\r\\n) => props => o =>\\r\\n  apiFetch(options, construct(t, name, props)(buildQuery(o)), name)\\r\\n\\r\\nexport const Api = (...options: fetchOptions) => ({\\r\\n  Query: {\\r\\n    continents: (props => o =>\\r\\n      fullConstruct(options)(\'query\', \'continents\')(props)(o).then(\\r\\n        response => response as GraphQLDictReturnType<Query[\'continents\']>\\r\\n      )) as FunctionToGraphQL<Query[\'continents\']>,\\r\\n    continent: (props => o =>\\r\\n      fullConstruct(options)(\'query\', \'continent\')(props)(o).then(\\r\\n        response => response as GraphQLDictReturnType<Query[\'continent\']>\\r\\n      )) as FunctionToGraphQL<Query[\'continent\']>,\\r\\n    countries: (props => o =>\\r\\n      fullConstruct(options)(\'query\', \'countries\')(props)(o).then(\\r\\n        response => response as GraphQLDictReturnType<Query[\'countries\']>\\r\\n      )) as FunctionToGraphQL<Query[\'countries\']>,\\r\\n    country: (props => o =>\\r\\n      fullConstruct(options)(\'query\', \'country\')(props)(o).then(\\r\\n        response => response as GraphQLDictReturnType<Query[\'country\']>\\r\\n      )) as FunctionToGraphQL<Query[\'country\']>,\\r\\n    languages: (props => o =>\\r\\n      fullConstruct(options)(\'query\', \'languages\')(props)(o).then(\\r\\n        response => response as GraphQLDictReturnType<Query[\'languages\']>\\r\\n      )) as FunctionToGraphQL<Query[\'languages\']>,\\r\\n    language: (props => o =>\\r\\n      fullConstruct(options)(\'query\', \'language\')(props)(o).then(\\r\\n        response => response as GraphQLDictReturnType<Query[\'language\']>\\r\\n      )) as FunctionToGraphQL<Query[\'language\']>,\\r\\n  },\\r\\n  Mutation: {},\\r\\n  Subscription: {},\\r\\n})\\r\\n```\\r\\n\\r\\n6. Create api function in separate .ts file looking more or less like this:\\r\\n\\r\\n```typescript\\r\\nimport {Api} from\\r\\n\\r\\nconst api = Api(\\"https://countries.trevorblades.com/\\",{})\\r\\n\\r\\napi.Query.continents()({\\r\\n    name:true,\\r\\n    code:true\\r\\n}).then(response => response.map(c => console.log(`Continent: ${c.name}`)))\\r\\n```\\r\\n\\r\\n7. You should be able to autocomplete queries from GraphQL!\\r\\n\\r\\n![GraphQL Autocomplete in Action](graphql.gif)\\r\\n\\r\\n\\r\\n## How it happened?\\r\\n\\r\\n\\r\\n### Function to graphql type\\r\\n\\r\\n```typescript\\r\\ntype FunctionToGraphQL<T extends Func<any, any>> = (\\r\\n  props?: ArgsType<T>[0]\\r\\n) => (o: GraphQLReturner<ReturnType<T>>) => Promise<GraphQLDictReturnType<T>>;\\r\\n```\\r\\n### Arguments Type\\r\\n```ts\\r\\ntype Func<P extends any[], R> = (...args: P) => R;\\r\\ntype ArgsType<F extends Func<any, any>> = F extends Func<infer P, any>\\r\\n  ? P\\r\\n  : never;\\r\\n```\\r\\n\\r\\nI found this type in very useful [github repo](https://github.com/LeDDGroup/ts-types-utils) it infers args type. I assume there is one object argument so thats why I take 0\\r\\n\\r\\n### GraphQL returner type\\r\\n\\r\\n```typescript\\r\\ntype GraphQLReturner<T> = T extends (infer R)[]\\r\\n  ? ResolveArgs<R>\\r\\n  : ResolveArgs<T>;\\r\\n```\\r\\n\\r\\nWe check if it is array or not and resolve only returners of the base type and the journey continues\\r\\n\\r\\n### Resolve Args\\r\\n\\r\\n```ts\\r\\ntype ResolveArgs<T> = {\\r\\n  [P in keyof T]?: T[P] extends (infer R)[]\\r\\n    ? ResolveArgs<R>\\r\\n    : T[P] extends {\\r\\n        [x: string]: any;\\r\\n      }\\r\\n    ? ResolveArgs<T[P]>\\r\\n    : T[P] extends Func<any, any>\\r\\n    ? [ArgsType<T[P]>[0], ResolveArgs<ReturnType<T[P]>>]\\r\\n    : true\\r\\n}\\r\\n```\\r\\nThis one is more complicated so we will go through it step by step\\r\\n\\r\\n1. We assume receiving an object as we disqualificated arrays in GraphQL returner type\\r\\n2. We tak key as `[P in keyof T]?` and value as `T[P]`\\r\\n3. If it is array we remove it as we do not need arrays in graphql returners\\r\\n4. If value is an object we need to pass it through alo\\r\\n5. If it is a Function we split it to array with 2 elements args and returner\\r\\n6. Else its a true type so you write true if you want to have that part returned\\r\\n\\r\\n### GraphQLDictReturnType\\r\\n\\r\\n```typescript\\r\\ntype ResolveReturned<T> = {\\r\\n  [P in keyof T]?: T[P] extends (infer R)[]\\r\\n    ? ResolveReturned<R>[]\\r\\n    : T[P] extends {\\r\\n        [x: string]: infer R;\\r\\n      }\\r\\n    ? ResolveReturned<T[P]>\\r\\n    : T[P] extends Func<any, any>\\r\\n    ? ResolveReturned<ReturnType<T[P]>>\\r\\n    : T[P]\\r\\n};\\r\\n```\\r\\n\\r\\nQuite same with some exceptions as args. The only difference is we infer Array just to resolve inside types and then we write it as array again.\\r\\n\\r\\n\\r\\n## Enough?\\r\\n\\r\\nLook these generic types are so powerful.","data":{"title":"Frontend API generation from GraphQL schema part 2 - journey to very generic types - How to do it properly","date":"2018-11-30T15:23:04.284Z","author":"Artur","image":"graphql.gif"},"path":"frontend-api-generation-from-GraphQL-schema-part-2","images":{"graphql.gif":{"width":1180,"height":510,"webpPath":"graphql.webp","optimizedPath":"graphql.optimized.gif.png"},"graphql.optimized.gif.png":{"width":600,"height":259,"webpPath":"graphql.optimized.gif.webp","optimizedPath":"graphql.optimized.gif.optimized.png"}}},{"content":"\\r\\nThis article is part of newbie series. In other articles I\u2019ve covered basics of GraphQL, introduction and Schema Definition Language. It has been written by newbie for newbies. Feel free to comment, suggest changes. \\r\\n\\r\\n## The basics\\r\\n    Scalar types\\r\\n    Int > Integer\\r\\n    Float > Float\\r\\n    String > String\\r\\n    Boolean > Boolean\\r\\n    ID > ID\\r\\n    \\r\\n    Type definitions\\r\\n    scalar > Scalar type\\r\\n    type > Object type\\r\\n    interface > Interface type\\r\\n    union > Union type\\r\\n    enum > Enumerable type\\r\\n    input > Input object type\\r\\n    \\r\\n    Type modifiers\\r\\n    String > Nullable string\\r\\n    String! > Required string\\r\\n    [String] > List of strings\\r\\n    [String]! > Required list of strings\\r\\n    [String!]! > Required list of required strings\\r\\n\\r\\n**Example of a GraphQL schema**\\r\\n```graphql\\r\\ntype Author {\\r\\n  id: Int!\\r\\n  firstName: String\\r\\n  lastName: String\\r\\n  \\"\\"\\"\\r\\n  the list of Books by this author\\r\\n  \\"\\"\\"\\r\\n  books: [Book]\\r\\n}\\r\\n\\r\\ntype Book {\\r\\n  id: Int!\\r\\n  title: String\\r\\n  author: Author\\r\\n  pages: Int\\r\\n}\\r\\n\\r\\n# the schema allows the following query:\\r\\ntype Query {\\r\\n  book: [Book]\\r\\n  author(id: Int!): Author\\r\\n}\\r\\n```\\r\\n**Input Arguments**\\r\\n\\r\\n```graphql\\r\\n# Basic Input\\r\\ntype Root {\\r\\n  users(limit: Int): [User]!\\r\\n}\\r\\n\\r\\n# Input with default value\\r\\ntype Root {\\r\\n  users(limit: Int = 10): [User]!\\r\\n}\\r\\n\\r\\n# Input with multiple args\\r\\ntype Root {\\r\\n  users(limit: Int, sort: String): [User]!\\r\\n}\\r\\n# Input with multiple args and default values\\r\\ntype Root {\\r\\n  users(limit: Int = 10, sort: String): [User]!\\r\\n}\\r\\n# or\\r\\ntype Root {\\r\\n  users(limit: Int, sort: String = \\"asc\\" ): [User]!\\r\\n}\\r\\n# or\\r\\ntype Root {\\r\\n  users(limit: Int = 10, sort: String = \\"asc\\" ): [User]!\\r\\n}\\r\\n\\r\\n# Interfaces\\r\\n\\r\\n\\r\\ninterface Publication {\\r\\n  title: String!\\r\\n  releasedDate: String!\\r\\n}\\r\\n  \\r\\ntype Magazine implements Publication {\\r\\n  title: String!\\r\\n  releasedDate: String!\\r\\n  version: Int!\\r\\n}\\r\\n  \\r\\ntype Book implements Publication {\\r\\n  title: String!\\r\\n  releasedDate: String!\\r\\n  pages: Int!\\r\\n}\\r\\n\\r\\n# Unions\\r\\n\\r\\nunion SearchResult = Book | Author\\r\\n  \\r\\ntype Query {\\r\\n  search(text: String!): SearchResult\\r\\n}\\r\\n\\r\\nquery {\\r\\n  search(text: \\"Park\\") {\\r\\n    ... on Book {\\r\\n      title\\r\\n    }\\r\\n    ... on Author {\\r\\n      name\\r\\n    }\\r\\n  }\\r\\n}\\r\\n    \\r\\n\\r\\n# Enums\\r\\n\\r\\nenum RGB {\\r\\n  RED\\r\\n  GREEN\\r\\n  BLUE\\r\\n}\\r\\ntype Root {\\r\\n  color: RGB\\r\\n}\\r\\n\\r\\n# Input Object Types\\r\\n\\r\\ninput ListUsersInput {\\r\\n  limit: Int \\r\\n  since_id: ID\\r\\n}\\r\\ntype Root {\\r\\n  users(params: ListUsersInput): [Users]!\\r\\n}\\r\\n\\r\\n```","data":{"title":"GraphQL newbie tutorial - cheatsheet","date":"2018-11-30T10:23:04.284Z","author":"Robert"},"path":"GraphQL-newbie-tutorial-cheatsheet","images":{}},{"content":"\\r\\nGraphQL is a new API query language is BIG. Since its introduction in 2015, it\'s userbase is continuously growing, but it gained real momentum when big players (Github, ProductHunt, Yelp, PayPal, Twitter) hopped on a GraphQL train. Right now there\u2019re nearly 2 000 companies using GraphQL and this metric continue to grow.\\r\\n\\r\\nTransferring from REST to GRapqHL might seem a little bit overwhelming at the begging, but it\'s totally worth it. \\r\\n\\r\\nTo help you with that we prepared a list of TOP5 places with best tutorials and articles to help you start with GraphQL.\\r\\n\\r\\n\\r\\n## 1. GraphQL Official Documentation  - https://graphql.org/learn/\\r\\n\\r\\nThe best place to start your GraphQL adventure.\\r\\n\\r\\n![gql1.png](gql1.png)\\r\\n\\r\\n## 2. Official Facebook Draft RFC Specification - https://facebook.github.io/graphql/draft/\\r\\n\\r\\nRaw knowledge about the GraphQL project by Facebook.\\r\\n![gql2.png](gql2.png)\\r\\n\\r\\n## 3. GraphQL Weekly - https://graphqlweekly.com/\\r\\n\\r\\nA weekly newsletter of the best news, articles, and \\r\\nprojects about GraphQL, Apollo and more.\\r\\n![gql3.png](gql3.png)\\r\\n\\r\\n## 4. How to GraphQL - https://www.howtographql.com/\\r\\n\\r\\nThe Fullstack Tutorial for GraphQL which will take you into a fascinating journey from zero to releasing your first  GraphQL project.\\r\\n![gql4.png](gql4.png)\\r\\n\\r\\n## 5. GraphQL Editor Blog - https://blog.graphqleditor.com/\\r\\n\\r\\nOur blog about our GraphQL Editor, a tool which makes understanding a GraphQL schema a lot easier and GraphQL in general.\\r\\n![gql5.png](gql5.png)\\r\\n\\r\\n","data":{"title":"The best resources to start learning GraphQL","date":"2018-11-29T13:37:00.284Z","author":"Tomek"},"path":"top-5-graphql-pages-to-start","images":{"gql1.optimized.png":{"width":600,"height":273,"webpPath":"gql1.optimized.webp","optimizedPath":"gql1.optimized.optimized.png"},"gql1.png":{"width":1171,"height":533,"webpPath":"gql1.webp","optimizedPath":"gql1.optimized.png"},"gql2.optimized.png":{"width":600,"height":244,"webpPath":"gql2.optimized.webp","optimizedPath":"gql2.optimized.optimized.png"},"gql2.png":{"width":1171,"height":477,"webpPath":"gql2.webp","optimizedPath":"gql2.optimized.png"},"gql3.optimized.png":{"width":600,"height":289,"webpPath":"gql3.optimized.webp","optimizedPath":"gql3.optimized.optimized.png"},"gql3.png":{"width":1171,"height":565,"webpPath":"gql3.webp","optimizedPath":"gql3.optimized.png"},"gql4.optimized.png":{"width":600,"height":254,"webpPath":"gql4.optimized.webp","optimizedPath":"gql4.optimized.optimized.png"},"gql4.png":{"width":1171,"height":495,"webpPath":"gql4.webp","optimizedPath":"gql4.optimized.png"},"gql5.optimized.png":{"width":600,"height":263,"webpPath":"gql5.optimized.webp","optimizedPath":"gql5.optimized.optimized.png"},"gql5.png":{"width":1171,"height":514,"webpPath":"gql5.webp","optimizedPath":"gql5.optimized.png"}}},{"content":"\\r\\nYes, we have increased our marketing reach by 16250%. How we made it? \\r\\nAutomation!\\r\\n\\r\\n## Hello!\\r\\n\\r\\nI\u2019m Tomek and I\u2019m responsible for marketing/sales in Aexol. Let me introduce you our company profile so you could understand better our business model and have a better understanding of below case study.\\r\\n\\r\\n## We make mobile apps\\r\\n\\r\\nWe make mobile apps, what\'s more important, we make mobile apps that last. Creating mobile apps is easy.  You can build a mobile app and have it published in one of the app stores in relatively a short time, then you just sit back and watch like money magically appears on your account. If you have ever tried marketing an app you know that the last part is far from reality, it takes a lot more for an app to become successful and the real challenges appear when you think that you have already broken the code and you dream about scaling up your project.\\r\\n\\r\\n![top.png](top.png)\\r\\n\\r\\n\\r\\n## Scaling up\\r\\nLet\u2019s skip couple steps and move to a point where we already have:\\r\\n- A decent mobile app\\r\\n- Marketing research is done\\r\\n- A monetization model that suits our product \\r\\n- Our marketing campaigns are up and running\\r\\n\\r\\nThe next natural step is intensifying your activities in order to achieve better results. This usually means hiring additional people, preparing more working stations, buying additional software license or hiring an agency which will do it for us, anyhow scaling is strictly related with an increase of cost in general. You can also try to automate the process and that\'s what we did.\\r\\n\\r\\n## The automation in our business model\\r\\n\\r\\nScaling up our mobile ads was a big challenge for us. We didn\u2019t want to expand our marketing team, but also we were aspiring to be present in top charts across the App Store (we mostly sell paid apps). Creating multiple ad campaigns targeting different users basing on their languages, locations, interest or age is a very time-consuming task. After spending some time on thinking how could we solve this problem we came across the idea of building a very simple web app.\\r\\n\\r\\n## Tool made with GraphQL Editor\\r\\n\\r\\nWe have created an in-house tool which we called Visual Ad Composer. The logic for this app was made with a beta version of GraphQL Editor and it was made in 8 hours by one developer, no design, simple graphics, pure technology. How does it work? It\u2019s very simple. We define different targeting aspects (let\u2019s use Facebook targeting as an example) we want to use in our ads, basic things like how much we want to spend and \u2026 that\u2019s it!\\r\\n\\r\\nLet\u2019s say we want to try out combinations of:\\r\\n- Gender (two values),\\r\\n- Country (let\u2019s say we want to create ads for 10 countries),\\r\\n- Age (let\u2019s take all age groups available on Facebook so 7).\\r\\n\\r\\n\\r\\n![submit_button.gif](submit_button.gif)\\r\\n\\r\\nOur tool will create 140 campaigns covering every combination of the target groups we have picked above \u2026 with a single click!  The simple automation of ad creating process saved use thousands of hours which will need to spend to create these multiple ads manually. This helped us increase our ads reach by 16250% and cost us only 10 times more than before which give us a nice quite a nice leverage level and help us made some money from our apps.\\r\\n\\r\\n## Before\\r\\n![April.png](April.png)\\r\\n\\r\\n## After\\r\\n![August.png](August.png)\\r\\n\\r\\n## Final thoughts\\r\\nNo matter if you are a graphics designer, marketing manager, a developer or doing any other job, you should think about how simple programmes could help you save time you spend daily on performing mechanical tasks.\\r\\n","data":{"title":"How we went from 0.8M to 130M impressions in 3 months","date":"2018-11-27T13:37:00.284Z","author":"Tomek"},"path":"Marketing-automation-From-800k-to-130m-impressions-in-3-months","images":{"April.optimized.png":{"width":600,"height":130,"webpPath":"April.optimized.webp","optimizedPath":"April.optimized.optimized.png"},"April.png":{"width":981,"height":213,"webpPath":"April.webp","optimizedPath":"April.optimized.png"},"August.optimized.png":{"width":600,"height":133,"webpPath":"August.optimized.webp","optimizedPath":"August.optimized.optimized.png"},"August.png":{"width":986,"height":218,"webpPath":"August.webp","optimizedPath":"August.optimized.png"},"submit_button.gif":{"width":1400,"height":1050,"webpPath":"submit_button.webp","optimizedPath":"submit_button.optimized.gif.png"},"submit_button.optimized.gif.png":{"width":600,"height":450,"webpPath":"submit_button.optimized.gif.webp","optimizedPath":"submit_button.optimized.gif.optimized.png"},"top.optimized.png":{"width":600,"height":303,"webpPath":"top.optimized.webp","optimizedPath":"top.optimized.optimized.png"},"top.png":{"width":1004,"height":507,"webpPath":"top.webp","optimizedPath":"top.optimized.png"}}},{"content":"\\r\\nHave you ever heard of [typestyle](https://github.com/typestyle/typestyle)? No? It is a great no-webpack styling solutions. In my life I tried almost everything possible:\\r\\n\\r\\n- pure CSS\\r\\n- SCSS\\r\\n- SASS\\r\\n- CSS modules\\r\\n- CSS Next\\r\\n- inline react styles\\r\\n- typestyle\\r\\n\\r\\nMost of solutions are bundled with webpack which means if you want to write library which have extendable replacable styles included you mustn\'t use webpack! So automatically you need to disqualificate these solutions:\\r\\n\\r\\n- CSS Next\\r\\n- CSS modules\\r\\n- SCSS\\r\\n- SASS\\r\\n- pure CSS\\r\\n\\r\\nSo lets take a closer look on these:\\r\\n\\r\\n- inline react styles\\r\\n- typestyle\\r\\n\\r\\nInline react styles are nice but producing spaghetti code\\r\\n\\r\\n```tsx\\r\\nimport * as React from \'react\'\\r\\nexport const MyInlineComponent = ({ children, style }) => (\\r\\n  <div\\r\\n    style={{\\r\\n      fontSize: 15,\\r\\n      ...style,\\r\\n    }}\\r\\n  >\\r\\n    {children}\\r\\n  </div>\\r\\n)\\r\\n```\\r\\n\\r\\nMoreover you cannot include media and hover directives. Using onmouseover is ugly though and you need state to control that.\\r\\n\\r\\nLets try with typestyle then\\r\\n\\r\\n```tsx\\r\\nimport * as React from \'react\'\\r\\nimport { style, classes, media } from \'typestyle\'\\r\\n\\r\\nexport const MyComponentStyle = style(\\r\\n  {\\r\\n    fontSize: 15,\\r\\n    $nest: {\\r\\n      \'&:hover\': {\\r\\n        fontSize: 18,\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  media({ maxWidth: 480 }, { fontSize: 10 })\\r\\n)\\r\\n\\r\\n// Extending the style\\r\\n\\r\\nconst MyNewStyle = classes(\\r\\n  MyComponentStyle,\\r\\n  style({\\r\\n    color: \'#0ae\',\\r\\n  })\\r\\n)\\r\\n\\r\\nexport const MyStyledComponent = ({ children, style = \'\' }) => (\\r\\n  <div className={classes(MyNewStyle, style)}>{children}</div>\\r\\n)\\r\\n```\\r\\n\\r\\nLooks great yeah? It is high time for advanced programmers style solution. Imagine a component which have more styles. I will write styles in separate file for this solution\\r\\n\\r\\nstyles.tsx\\r\\n\\r\\n```tsx\\r\\nimport { style } from \'typestyle\'\\r\\n\\r\\nexport const Title = style({\\r\\n  fontSize: 18,\\r\\n})\\r\\nexport const SubTitle = style({\\r\\n  fontSize: 18,\\r\\n})\\r\\nexport const ImageSize = style({\\r\\n  width: 20,\\r\\n  height: 20,\\r\\n})\\r\\n```\\r\\n\\r\\ncomponent.tsx\\r\\n\\r\\n```tsx\\r\\nimport * as React from \'react\'\\r\\nimport * as styles from \'./styles\'\\r\\n\\r\\nexport const MyStyledComponent = ({\\r\\n  overrideStyles = {},\\r\\n}: {\\r\\n  overrideStyles: typeof styles\\r\\n}) => {\\r\\n  const componentStyles = {\\r\\n    ...styles,\\r\\n    ...overrideStyles,\\r\\n  }\\r\\n  return (\\r\\n    <div>\\r\\n      <div className={componentStyles.Title}>Hello</div>\\r\\n      <div className={componentStyles.SubTitle}>World</div>\\r\\n      <img\\r\\n        className={componentStyles.ImageSize}\\r\\n        src=\\"https://source.unsplash.com/random\\"\\r\\n      />\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n```\\r\\n\\r\\nusingComponent.tsx\\r\\n```tsx\\r\\nimport * as React from \\"react\\";\\r\\nimport { style } from \\"typestyle\\";\\r\\nimport { MyStyledComponent } from \\"./component\\";\\r\\n\\r\\nconst Page = () => (\\r\\n  <div>\\r\\n    <MyStyledComponent\\r\\n      overrideStyles={{\\r\\n        Title: style({\\r\\n          color: \\"#00F\\"\\r\\n        })\\r\\n      }}\\r\\n    />\\r\\n  </div>\\r\\n);\\r\\n\\r\\n```\\r\\n\\r\\nVoila you can use the component and override its styles with full intelisense!! Just by using typeof on the module.","data":{"title":"Power of typeof & typestyle in react apps","date":"2018-11-23T15:23:04.284Z","author":"Artur"},"path":"power-of-typeof-and-typestyle-in-react-apps","images":{}},{"content":"\\r\\n## Summary\\r\\n\\r\\nHi, I\u2019m Robert - entrepreneur based in Poland. Last seven years I\u2019ve spent working in software development business. Last year I made a transition from the service business to saas. In this article I\u2019ll cover short story, mostly focusing on last year and how we got our first traction. Check more articles and updates on \u201cMy saas story.\u201d\\r\\n\\r\\n## First business.\\r\\n\\r\\nJust after graduating University in 2011 I\u2019ve started marketing agency with my best friend (lemontea.pl). I wasn\u2019t doing very good since we didn\u2019t have any business experience and decent idea what we want to do. After two years the company made almost no profit, a friend decided to leave the company just for me, and I was there with three developers on the payroll with no proper plan. I\u2019ve decided to focus and brand the team as javascript consulting experts. It took a year to do so but it worked, we were quickly able to win new customers and won prestigious awards for advanced &  animated front end of one project. We were overselling and since I had no experience in it business and project management I\u2019ve decided to sell the company.\\r\\n\\r\\n## Selling the child.\\r\\n\\r\\nI did it after 3,5 years from starting my company. It was straightforward because we had a good brand and few enterprise customers waiting to deliver orders. It gave me a massive advantage in negotiations with potential buyers showing them what type of customers I\u2019m able to win. I\u2019ve decided to go with www.tenderhut.com. New owner offered me a decent proposition and a VP of sales position, so I\u2019ve joined the team. It was a newly formed company (30 people), but the founders had many years of experience in the one prominent software development company in Central Europe. Their previous company (SMT Software) has sold for $40M USD.  I\u2019ve spent nearly two years there developing sales & marketing department from scratch to more than ten people on board. The company itself tripled the size concerning headcount and revenue. My new founders wanted to replicate the success of their past employer. \\r\\n\\r\\n## Need to change.\\r\\n\\r\\nBut I wanted to change. I didn\u2019t want to do just outsourcing. I felt I\u2019d like to do some more than only selling skilled developers by days. I wanted to focus more on marketing because it was also something I was passionate about over the years. I\u2019ve decided to change and leave the company and search for exciting ideas.  I\u2019ve started working as a freelancer for tech companies helping them develop sales departments. Also, I\u2019ve started talking with my colleague - Artur from Aexol. I thought it could be good to do something together, cause he had considerable experience developing his products - mostly simple mobile apps. I knew that to grow a great product I need a product experienced co-founder.\\r\\n\\r\\n## Saas ideas.\\r\\n\\r\\nBefore focusing on our final project, we started working on three other ideas. Those projects were cute, but their vision and market were local. We wanted a big hairy audacious goal! The third project was the thing - Artur showed me the idea of visual node designer called www.slothking.online. I thought - funny name and a crazy idea, let\u2019s do it! That time he had a beta version of the app and his developers were using it to speed up the development process. It was a proper MVP with internal users. It was a great idea to start. It was a side project, and I was sharing it with my part-time freelance consulting . That time we didn\u2019t discuss shares or positions. We wanted to deliver excellent value, focus on pure work and stay lean on the money. That time I\u2019ve watched a few YC videos on product market fit, and we started looking for traction\\r\\n\\r\\n## Searching for market fit.\\r\\n\\r\\nWorking on my new startup gave me huge motivation and a lot of fun. In a few hours, we made the ugliest landing page that we could and started talking with customers. We got a little bit of response, but it wasn\u2019t a thing described in YC videos. We didn\u2019t get that feeling. So we made a better quality version of our landing page. It also didn\u2019t work so well. That time I thought - we need great advisors. It\u2019s my fourth business, and I don\u2019t want to do it myself. I\u2019ve checked my LinkedIn and tried to find someone who I know and might be a great fit. I was looking for someone who has success experience in dev products, saas or high growth companies. I got in touch with Tomasz Karwatka from Divante.co - a global e-commerce software company. He and his brother had launched open source vue store front which had nearly 3k stars on GitHub. That was the team that I was looking for. They agreed to help for small % of shares after hearing about our idea. \\r\\n\\r\\n## Finding product market fit?\\r\\n\\r\\nWe decided to meet with guys from Divante online a few times and then set up a meeting in Wroclaw. It was hard to catch up with guys cause they are full time in travel. After our 3 hour meeting, we decided to make a pivot. Our original idea slothking.online was to create an entirely new core system and then prepare it for all programming languages. It was a downside of this idea where we had to customise our tool for every different language. At the meeting, we found that there\u2019s new technology - a GraphQL query language that\u2019s gaining popularity in opposite to REST API. We thought if we could make and GraphQL Visual Editor than add to that fake backend, database and cloud deployment we would achieve our initial idea of Visual Node / Backend Designer. The new plan was born. Next week we had a demo since we were able to re-use our javascript diagram tool. We made nicely looking GitHub repo and posted it on hacker news. That was the thing. We posted it on Saturday 22nd Sept and in one week we had 20k views (12k unique), and 2300 GitHub starts. Till that day we didn\u2019t spend any money. ","data":{"title":"My saas story - from IT outsourcing to saas","date":"2018-11-22T10:23:04.284Z","author":"Robert"},"path":"My-saas-story-from-IT-outsourcing-to-saas","images":{}},{"content":"\\r\\nWith the theoretical introduction from the previous post on GraphQL, we can go on to describe an essential part of this standard, namely the type system, which allows you to define the API scheme - GraphQL Schema Definition Language (SDL). It is a special syntax that has been very well documented and created in such a way that you can work with it regardless of the language or framework.\\r\\n\\r\\n## Type System\\r\\n\\r\\nGraphQL is strongly typed, which means that each definition must have a particular type. The Type System comes with the help, which provides several possibilities for defining elements of our API. Let\u2019s think about library application (books and authors) declare the first types of our API.\\r\\n```graphql\\r\\ntype Book {\\r\\n  id: ID!\\r\\n  title: String!\\r\\n  shortDescription: String!\\r\\n  description: String\\r\\n  pages: Int!\\r\\n  isbn: String!\\r\\n  releaseDate: String!\\r\\n  isBookOftheYear: Boolean!\\r\\n  author: Author!\\r\\n}\\r\\n  \\r\\ntype Author {\\r\\n  id: ID!\\r\\n  name: String!\\r\\n  bio: String\\r\\n  sex: String!\\r\\n  books: [Book!]!\\r\\n}\\r\\n```\\r\\n\\r\\n   \\r\\nThe most important and most often used element of the whole puzzle is `Object Type`, which in the simplest terms is a collection of fields. Above examples: two objects were declared using the `type Book {}` and `type Author {}` definitions, while inside these declarations you can see fields that are of certain types, e.g. `name: String!`, or  `isBookOftheYear: Boolean!`.\\r\\n\\r\\n## Scalar types\\r\\n\\r\\nIn GraphQL there are several built-in scalar types for field declarations:\\r\\n\\r\\n- `String` - set of characters in UTF-8 format,\\r\\n- `Int` - 32-bit integer,\\r\\n- `Float` - floating point number,\\r\\n- `Boolean` - value `true` or `false`\\r\\n- `ID` - a type representing the unique identifier for the object, most often used for re-downloading (used by the cache). It\'s serialised in the same way as the `String` type.\\r\\n## Interface\\r\\n\\r\\nGraphQL\'s type system features Interfaces. An interface exposes a specific set of fields that a type must include implementing the interface.  For example, we could represent a Publication interface served as a book or magazine. These types share common characteristics, including a title and release date.\\r\\n\\r\\n```graphql\\r\\ninterface Publication {\\r\\n  title: String!\\r\\n  releasedDate: String!\\r\\n}\\r\\n  \\r\\ntype Magazine implements Publication {\\r\\n  title: String!\\r\\n  releasedDate: String!\\r\\n  version: Int!\\r\\n}\\r\\n  \\r\\ntype Book implements Publication {\\r\\n  title: String!\\r\\n  releasedDate: String!\\r\\n  pages: Int!\\r\\n}\\r\\n```\\r\\nIt is very likely that the author could publish both books and magazines, thanks to the interface you do not need to become dependent on a particular type of publication, in this case, we can use a more massive abstraction which is Publication.\\r\\n\\r\\n## Union\\r\\n\\r\\nAn interesting mechanism is the Union type, which allows you to represent a group of objects that do not have the same fields. An excellent example is a query to a search engine that can search both the title of the book and the author\'s name.\\r\\nWith this declaration, you can query something like this:\\r\\n```graphql\\r\\nunion SearchResult = Book | Author\\r\\n  \\r\\ntype Query {\\r\\n  search(text: String!): SearchResult\\r\\n}\\r\\n\\r\\nquery {\\r\\n  search(text: \\"Park\\") {\\r\\n    ... on Book {\\r\\n      title\\r\\n    }\\r\\n    ... on Author {\\r\\n      name\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\nAnd as a result we will see the answer:\\r\\n```js\\r\\n    {\\r\\n      \\"data\\": {\\r\\n        \\"search\\": [\\r\\n          {\\r\\n            \\"name\\": \\"Jurassic Park\\",\\r\\n          },\\r\\n          {\\r\\n            \\"name\\": \\"Jessica Park\\",\\r\\n          }\\r\\n        ]\\r\\n      }\\r\\n    }\\r\\n```\\r\\n## Declaration scheme\\r\\n\\r\\nWhen defining the API scheme, there are two top-level elements available - `query` and `mutation`, which are ordinary objects created in the same way all others. Within them, we declare the possibilities of our API. The definition of the scheme itself is trivial:\\r\\n```graphql\\r\\nschema {\\r\\n  query: Query\\r\\n  mutation: Mutation\\r\\n}\\r\\n  \\r\\ntype Query {\\r\\n}\\r\\n  \\r\\ntype Mutation {\\r\\n}\\r\\n```\\r\\n## Query\\r\\n\\r\\nA query is a mandatory element in the schema and is responsible for reading the API. All defined fields inside this object can be compared to various API endpoints. The accepted principle is that elements issued via query are nouns that explicitly specify the entity to be downloaded - in the above example they are book and author. To better illustrate the whole, you can move the previous definitions of objects to query.\\r\\n```graphql\\r\\nschema {\\r\\n  query: Query\\r\\n}\\r\\n  \\r\\ntype Query {\\r\\n  book(id: ID!): Book\\r\\n  author(id: ID!): Author\\r\\n}\\r\\n\\r\\ntype Book {\\r\\n  id: ID!\\r\\n  title: String!\\r\\n  shortDescription: String!\\r\\n  description: String\\r\\n  pages: Int!\\r\\n  isbn: String!\\r\\n  releaseDate: String!\\r\\n  isBookOftheYear: Boolean!\\r\\n  author: Author!\\r\\n}\\r\\n  \\r\\ntype Author {\\r\\n  id: ID!\\r\\n  name: String!\\r\\n  bio: String\\r\\n  sex: String!\\r\\n  books: [Book!]!\\r\\n}\\r\\n```\\r\\n## Arguments\\r\\n\\r\\nIn some lines you can see the declaration of fields slightly different than in previous cases (e.g. `book (id: String!)`), Where in addition to the field name you can see parentheses with another declaration - it\'s nothing more than entering an argument to the query - on its basis, you can pass some parameters according to which you want to download data. In the above example, the user\'s id is expected and the query performed would look something like this:\\r\\n```graphql\\r\\nquery {\\r\\n  book(id: \\"1234\\") {\\r\\n    title\\r\\n    isbn\\r\\n  }\\r\\n}\\r\\n```\\r\\n## Mutation\\r\\n\\r\\n`Mutation` is an optional part that allows you to add, edit or delete items in our application via the API. Its definition is identical to the type `query`. The only difference is the principle of defining fields - in contrast to `query` in `mutation`, fields are most often called verbs that are clearly defining a performed action. Complementing the above example, it is worth adding the possibility of creating new books.\\r\\n\\r\\n## Input Type\\r\\n\\r\\nBefore we go to the example declaration of `mutation`, it\'s worth to present one more type dropped when discussing all the basic types in the section that pertained to the Type System.\\r\\nTo modify or create new elements in the application via GraphQL, a particular type `input` was created, which behaves very much like a regular object, with the difference that during the declaration `input` is used instead of the keyword `type`.\\r\\n\\r\\n```graphql\\r\\nschema {\\r\\n  query: Query\\r\\n  mutation: Mutation\\r\\n}\\r\\n  \\r\\ntype Mutation {\\r\\n  createAuthor(input: AuthorInput): Author\\r\\n  updateAuthor(id: ID!, input: AuthorInput): Author\\r\\n}\\r\\n  \\r\\ninput AuthorInput {\\r\\n  name: String!\\r\\n  bio: String\\r\\n  sex: String!\\r\\n}\\r\\n```\\r\\nIn the above example, you can observe that the createAuthor and updateAuthor actions expect the AuthorInput object as an argument and return the Author object. For the declared scheme, creating a new book requires a similar action:\\r\\n\\r\\n```graphql\\r\\nmutation {\\r\\n  createAuthor(input: {\\r\\n    name: String!\\r\\n    bio: String\\r\\n    sex: String!\\r\\n  }) {\\r\\n    id\\r\\n    title\\r\\n  }\\r\\n}\\r\\n```\\r\\n","data":{"title":"GraphQL newbie tutorial - Schema definition","date":"2018-11-18T10:23:04.284Z","author":"Robert"},"path":"GraphQL-newbie-tutorial-Schema-Definition-SDL","images":{}},{"content":"\\r\\nI\u2019m Robert - co-founder of grapqhleditor.com. We\'re creating a visual tool for developers that will automate their backend development. I\'m sharing our journey as part of my-saas-story. All of our team have long years of experience in the tech industry but none on saas.\\r\\n\\r\\nIt\'s the first week of November, and we are working the 6th month on our idea. Since then we made a pivot (half sept), and many other things happened. I\'ll write another post on that. Here wanted to focus on our current state and goals for this quarter. October was an excellent month for us. Check below:\\r\\n\\r\\n## New blog!\\r\\n\\r\\nWe started a blog.graphqleditor.com. We wrote eight blog posts, published them on few places and that gave us more than 1,5k page views! Below you can see which posts are most popular:\\r\\n- [Levensthein algorithm for better faker experience](blog.graphqleditor.com/levensthein-algorithm-for-better-faker-experience/) 555  views\\r\\n- [Canvas node graph in typescript](blog.graphqleditor.com/canvas-node-graph-in-typescript/) 423 views\\r\\n- [Twitter clone with React XP and faker](blog.graphqleditor.com/twitter-clone-with-reactxp-and-faker/) 415 views\\r\\n- [Graphsourcing new way to build systems](blog.graphqleditor.com/graphsourcing-new-way-to-build-systems/) 191 views\\r\\n- [GraphQL newbie tutorial - introduction](blog.graphqleditor.com/GraphQL-newbie-tutorial-introduction/) 144 views\\r\\n- [Typescript backend with slothking](blog.graphqleditor.com/typescript-backend-with-slothking/) 116 views\\r\\n\\r\\n## Outreach & Feedback calls\\r\\n\\r\\nWe organized an outreach campaign to front-end developers asking about feedback. We organized ten calls after sending around invites to 1000 people. Those calls were very good. We received a lot of feedback and added those ideas as issues to our GitHub. We had a pleasure to speak with developers from Paypal and Microsoft! It was super exciting!\\r\\n\\r\\nSome compelling features were around offline version for the enterprise, adding icons to nodes (making them more consumable for non-tech people), generating Interface for frontend or creating fake backend out of the graph. All of them are on our GitHub.\\r\\n\\r\\n## First OKR\u2019s & Metrics\\r\\n\\r\\nTogether with our advisors, we created a short roadmap for this quarter. It\'s not 100 ready, but the first version includes our vision, mission and metrics which we want to measure to grow. Below you can find our OKR\' results from October. I\'ll update it every month!\\r\\n\\r\\n| METRIC                      | COUNT   |\\r\\n| --------------------------- | ---- |\\r\\n| github faker stars          | 19   |\\r\\n| github diagram stars        | 54   |\\r\\n| github graphql-editor stars | 2550 |\\r\\n| blog views                  | 1500 |\\r\\n| website views               | -    |\\r\\n| blog articles               | 8    |\\r\\n| mailchimp subscriptions     | 16   |\\r\\n| demo runs                   | 200  |\\r\\n| outreach to developers      | 1000 |\\r\\n| slack users                 | 10   |\\r\\n| quality calls               | 10   |\\r\\n| close issues                | 20   |\\r\\n\\r\\n## Development:\\r\\n\\r\\nGraphql Editor: Total open issues: 16. Last month we closed ten issuse in our main repo (21 from pivot).\\r\\n\\r\\nJavascript Diagram: Total open issues: 14. We have rewritten our tool to canvas to handle large schemas. It was an idea by users. Try GitHub schema! IT Rocks!\\r\\n\\r\\nTeam: Artur is working on the front end with few hours of help from Hubert and Kamil is working on backend features.\\r\\n\\r\\n## Other:\\r\\n- Launched a slack group (pm me to join). \\r\\n- Three guys agreed to contribute\\r\\n- Created landing page for diagram.graphqleditor.com\\r\\n\\r\\n","data":{"title":"My saas story - oct\'18 first OKRs and :s","date":"2018-11-08T15:23:04.284Z","author":"Robert"},"path":"my-saas-story-oct18-first-OKRs-and-metrics","images":{}},{"content":"\\r\\n## Introduction\\r\\n\\r\\nHave you ever heard about graphsourcing? Sure you have. UML system is a system where you make graph that define your system. Then you write code which must meet the requirements of your UML diagram. Then frontend developer also have to write frontend which is compliant with UML diagram and backend. Also graphic designer is the one that should know something about UML technology.\\r\\n\\r\\nThis is too much for me.\\r\\n\\r\\n## Graphsourcing good way\\r\\n\\r\\nFew months ago we created our own graphsourcing tool named [Slothking](https://slothking.online). Learning to use it may not be an easy thing, but benefits we have from graphsourcing are huge. First of all you need to create graph which defines your system. Then you generate frontend, backend, app and so on type definitions. So everybody knows whats going on\\r\\n\\r\\n## One state to rule them all\\r\\n\\r\\nWith all the benefits of graphsourcing, the one I like most is one state. It is possible to make one state with same types on backend and frontend. With fabulous typescript autocomplete you get a superfast workflow where frontend and backend devs dont have to talk to each other.\\r\\n\\r\\n## Proof of concept\\r\\n\\r\\n![](graphsourced.png)\\r\\n\\r\\nAs a proof of concept we rewrote our food delivery service system [Foodeli](https://foodeli.pl) in [Aexol](https://aexol.com). First phase of rewriting backend we finished ( 3 people team) in 8 hours + we had everything in one place.\\r\\n\\r\\nIt\'s a perfect example because Foodeli ecosystem consist of:\\r\\n\\r\\n- Administrator panel, Web\\r\\n- Restaurant individual panels, Web\\r\\n- Driver app, iOS, Android\\r\\n- Client app, Web\\r\\n\\r\\nAnd all of them have to use the same backend system.\\r\\n\\r\\n## Code\\r\\n\\r\\nSo how graphsourcing looks in practice?\\r\\n\\r\\n### Backend\\r\\n\\r\\nGeneration command:\\r\\n\\r\\n```bash\\r\\nsloth sync nodets foodeli api.ts\\r\\n```\\r\\n\\r\\nSmall Part of the generated code\\r\\n\\r\\n```typescript\\r\\nexport type DriverType = {\\r\\n  _id?: ObjectId\\r\\n  name: string\\r\\n  phone?: string\\r\\n  Address?: ObjectId | AddressType\\r\\n  pushToken?: string\\r\\n  snsEndpoint?: string\\r\\n  snsSubscriptiom?: string\\r\\n  foodeliDriver?: boolean\\r\\n  User: ObjectId | UserType\\r\\n  PESEL?: string\\r\\n  deliveryRate?: number\\r\\n}\\r\\nexport type GPSType = {\\r\\n  _id?: ObjectId\\r\\n  geoLocation?: ObjectId | geoLocationType\\r\\n  Driver?: ObjectId | DriverType\\r\\n  created?: Date\\r\\n}\\r\\n```\\r\\n\\r\\nTypes for endpoint and middlewares are also provided\\r\\n\\r\\n### Frontend\\r\\n\\r\\nGenerate api and state\\r\\n\\r\\n```bash\\r\\nsloth sync fetch-api foodeli api.ts\\r\\n```\\r\\n\\r\\nPart of frontend state\\r\\n\\r\\n```typescript\\r\\nconst endpoints: {\\r\\n    name: string;\\r\\n    endpoints: {\\r\\n      addOrder: (params:{props:         {\\r\\n          comments?: string;\\r\\n          paymentForm: string;\\r\\n          totalPrice: number;\\r\\n          readyin: number;\\r\\n          phone: string;\\r\\n          Address: Partial<AddressType> | string;\\r\\n          token: string;\\r\\n        },method?: \'GET\'|\'POST\'|\'PATCH\'|\'DELETE\'|\'PUT\'}) => Promise<        {\\r\\n          Order: OrderType;\\r\\n        }>;\\r\\n      myOrders: (params:{props:         {\\r\\n          period?: string;\\r\\n          token: string;\\r\\n        },method?: \'GET\'|\'POST\'|\'PATCH\'|\'DELETE\'|\'PUT\'}) => Promise<        {\\r\\n          Orders: OrderType[];\\r\\n        }>;\\r\\n      restaurantOrderDetails: (params:{props:         {\\r\\n          orderId?: string;\\r\\n          token: string;\\r\\n        },method?: \'GET\'|\'POST\'|\'PATCH\'|\'DELETE\'|\'PUT\'}) => Promise<        {\\r\\n          Order: OrderType;\\r\\n          orderSteps: orderStepType[];\\r\\n        }>;\\r\\n      updateOrderStatus: (params:{props:         {\\r\\n          status?: OrderStatus;\\r\\n          orderId?: string;\\r\\n          token: string;\\r\\n        },method?: \'GET\'|\'POST\'|\'PATCH\'|\'DELETE\'|\'PUT\'}) => Promise<        {\\r\\n          Order: OrderType;\\r\\n        }>;\\r\\n    }\\r\\n} = foodeli: {\\r\\n    name: \'foodeli\',\\r\\n    endpoints: {\\r\\n      addOrder: ({ props, method = \'POST\' }) =>\\r\\n        fn(`${host}foodeli/addOrder`, {\\r\\n          props,\\r\\n          method,\\r\\n        }).then(res => res.json()),\\r\\n      myOrders: ({ props, method = \'POST\' }) =>\\r\\n        fn(`${host}foodeli/myOrders`, {\\r\\n          props,\\r\\n          method,\\r\\n        }).then(res => res.json()),\\r\\n      restaurantOrderDetails: ({ props, method = \'POST\' }) =>\\r\\n        fn(`${host}foodeli/restaurantOrderDetails`, {\\r\\n          props,\\r\\n          method,\\r\\n        }).then(res => res.json()),\\r\\n      updateOrderStatus: ({ props, method = \'POST\' }) =>\\r\\n        fn(`${host}foodeli/updateOrderStatus`, {\\r\\n          props,\\r\\n          method,\\r\\n        }),\\r\\n    },\\r\\n  },\\r\\n}\\r\\n//Small part of the state\\r\\nexport type foodeliExtensionState = {\\r\\n  Order: OrderType;\\r\\n  Orders: OrderType[];\\r\\n  orderSteps: orderStepType[];\\r\\n  Restaurant: RestaurantType;\\r\\n  restaurantDeliveryZone: restaurantDeliveryZoneType[];\\r\\n  geoParams: geoParams;\\r\\n  deliveryCost: deliveryCost;\\r\\n  dishCategoryList: dishCategoryType[];\\r\\n  DishList: DishType[];\\r\\n  dishVariantList: dishVariantType[];\\r\\n  dishAdditionList: dishAdditionType[];\\r\\n  Drivers: DriverType[];\\r\\n  Address: AddressType;\\r\\n  deliveryZones: deliveryZoneType[];\\r\\n  Settlements: OrderType[];\\r\\n};\\r\\n```\\r\\n\\r\\nSo you just call generated endpoint with certain params on front end and you have typed response automatically injected to state using [state](). If everybody were using it , it would be a huge boost to Backend Driven development\\r\\n\\r\\n### Corona SDK Apps\\r\\n\\r\\nYes we are writing apps in corona so we decided we should have Api generator for Corona SDK too. Here is a small part of it.\\r\\n\\r\\n```lua\\r\\nlocal json = require \'json\'\\r\\nlocal library = {}\\r\\n\\r\\nfunction library:init(host,errHandler)\\r\\n    self.errorHandler = errHandler\\r\\n    self.host = host\\r\\n    self.requestTab = {}\\r\\nend\\r\\n\\r\\nfunction library:removeRequest(id)\\r\\n  for i=1,#self.requestTab do\\r\\n    if self.requestTab[i] == id then\\r\\n      table.remove(self.requestTab,i)\\r\\n    end\\r\\n  end\\r\\nend\\r\\n\\r\\nfunction library:addRequest(id)\\r\\n  table.insert(self.requestTab,id)\\r\\nend\\r\\n\\r\\nfunction library:cancelRequest(id)\\r\\n  for i=1,#self.requestTab do\\r\\n    if self.requestTab[i] == id then\\r\\n      network.cancel( self.requestTab[i] )\\r\\n      table.remove(self.requestTab,i)\\r\\n    end\\r\\n  end\\r\\nend\\r\\n\\r\\nfunction library:cancelAllRequests()\\r\\n  for i=1,#self.requestTab do\\r\\n    network.cancel( self.requestTab[i] )\\r\\n  end\\r\\n  self.requestTab = {}\\r\\nend\\r\\nfunction library:aws_sns_registerDevice(callback,token,platform,applicationArn, method)\\r\\n  local requestId\\r\\n  if method == nil then\\r\\n    method = \\"POST\\"\\r\\n  end\\r\\n  local function networkListener( event )\\r\\n    self:removeRequest(requestId)\\r\\n      if event.isError then\\r\\n            if self.errorHandler then\\r\\n                self.errorHandler(event)\\r\\n            else\\r\\n                callback(event)\\r\\n            end\\r\\n      else\\r\\n      if callback then\\r\\n        callback(event)\\r\\n      end\\r\\n    end\\r\\n  end\\r\\n  local headers = {}\\r\\n  headers[\\"Content-Type\\"]=\\"application/json\\"\\r\\n  local params = {}\\r\\n  params.headers = headers\\r\\n  local bodyParams = {\\r\\n    token=token;\\r\\n    platform=platform;\\r\\n    applicationArn=applicationArn;\\r\\n  }\\r\\n  params.body = json.encode(bodyParams)\\r\\n  requestId = network.request(self.host..\\"/\\"..\\"aws_sns\\"..\\"/\\"..\\"registerDevice\\", method, networkListener, params )\\r\\n  self:addRequest(requestId)\\r\\nend\\r\\n```\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nGraphsourcing is so powerful man, all this code has been generated from visual graph!\\r\\n\\r\\nI presented only micro parts of it as it is a huge one!\\r\\n\\r\\n## Alpha user?\\r\\n\\r\\nIf you want to become an alpha user, mail me for instructions or you can start your self for free, just by using few repos( as this is oopen source technology )\\r\\n\\r\\n[Slothking app](https://app.slothking.online)\\r\\n[CLI](https://github.com/slothking-online/sloth)\\r\\n[Boilerplate to start with backend](https://github.com/slothking-online/backend-nodets-boilerplate)\\r\\n[State manager based on unstated](https://github.com/slothking-online/state)\\r\\n","data":{"title":"Graphsourcing new way to build systems","date":"2018-10-31T11:23:04.284Z","author":"Artur"},"path":"graphsourcing-new-way-to-build-systems","images":{"graphsourced.optimized.png":{"width":600,"height":376,"webpPath":"graphsourced.optimized.webp","optimizedPath":"graphsourced.optimized.optimized.png"},"graphsourced.png":{"width":1507,"height":945,"webpPath":"graphsourced.webp","optimizedPath":"graphsourced.optimized.png"}}},{"content":"\\r\\nI\u2019m Robert - Head of Growth at grapqhleditor.com. I\u2019m responsible for every non-tech part of the project -  talking with users, building feature roadmap, building traffic and promoting it in tech community. To grow my tech skills I\u2019ve also decided to learn GraphQL. Since I\u2019m a newbie, this tutorial is also for newbies.\\r\\n\\r\\n## Where GraphQL came from?\\r\\n\\r\\nGraphQL was introduced in 2015 by Facebook as an alternative to REST. Back then It wasn\u2019t just an experiment - it was already in production inside facebook mobile apps since 2012.  Just after public release, It became extremely popular, and around that time many companies were working on similar solutions. This technology started to gain attention since it can be used with many other languages and there\u2019re many ready to go libraries to most popular styles. Right now according to Stackshare there\u2019re nearly 2k companies using it. Early adopters included Coursera, Github, ProductHunt, Yelp or Twitter.\\r\\n\\r\\n## What is GraphQL?\\r\\n\\r\\nTo introduce GraphQL we I\u2019ll use an example of data and compare functionality with REST. This example will show you why new technology is more efficient, simpler to use and what was motivation to create it. \\r\\n\\r\\nLet\u2019s assume that we are creating a backend for application with two versions (web and mobile). The core of the system will contain information about football players, teams they played and some other details. Mobile version of the application should show less information.\\r\\n\\r\\n| Web                       | Mobile     | \\r\\n| -------------| -------------| \\r\\n| Name| Name| \\r\\n| Bio| Team (Years)|   \\r\\n| Team (Description, Years) | Team (Years)|   \\r\\n| Team (Description, Years) ||   \\r\\n\\r\\nIf we would create API based on REST, therefore, we would need to write two requests:\\r\\n\\r\\n\\r\\n    GET /player/{id}\\r\\n    {\\r\\n      \\"id\\": \u201e101\u201d\\r\\n      \\"name\\": \u201eDavid Beckham\u201d\\r\\n      \\"bio\\": \u201e\u2026\u201d\\r\\n      \u201eage\u201d: \u201e43\u201d\\r\\n    }\\r\\n\\r\\n\\r\\n    GET /player/{id}/teams\\r\\n    {\\r\\n      \u201eTeams\u201d: [{\\r\\n        \u201eid\\": \u201e201\u201d,\\r\\n        \u201ename\u201d: \u201eReal Madrid\u201d,\\r\\n        \u201edescription\\": \u201e\u2026\u201d,\\r\\n        \u201egoals\u201d: \u201e\u2026\u201d,\\r\\n        \u201ematches\u201d: \u201e\u2026\u201d,\\r\\n        \u201eyears\u201d: \u201e2003-2007\u201d\\r\\n      },\\r\\n      ...\\r\\n      ]\\r\\n    }\\r\\n\\r\\nBy looking at the response, you can see that we get more data than we need in both cases. It is essential in mobile apps because of mobile data and the speed of loading.  Of course, we could overcome that by writing different endpoints which will get us only what we want. Another way is to implement API in a way that we could choose what we want I.e. GET /player/{id}/teams?only=name. But that\u2019s hard the solution to maintain in agile software development where requirements are changing every week.\\r\\n\\r\\n\\r\\n## Opposite to that, we can introduce GraphQL.\\r\\n\\r\\nBackend with GraphQL is more flexible because it has only one endpoint. Customers write a query and specify what do you want exactly and gets data in JSON. In our football example, we can create queries for each platform (web and mobile).\\r\\n\\r\\n**Web application:**\\r\\n\\r\\n    query {\\r\\n      player(id: \\"101\\") {\\r\\n        name\\r\\n        bio\\r\\n        teams {\\r\\n          title\\r\\n          description\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n**Resposne:**\\r\\n\\r\\n    {\\r\\n      \\"data\\": {\\r\\n        \\"player\\": {\\r\\n          \\"name\\": \\"David Beckham\\",\\r\\n          \\"bio\\": \\"...\\",\\r\\n          \\"teams\\": [{\\r\\n            \\"title\\": \\"Real Madrid\\",\\r\\n            \\"description\\": \\"...\\"\\r\\n          }, ...]\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n**Mobile app**\\r\\n\\r\\n    query {\\r\\n      player(id: \\"101\\") {\\r\\n        name\\r\\n        teams {\\r\\n          title\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n**Resposne:**\\r\\n\\r\\n    {\\r\\n      \\"data\\": {\\r\\n        \\"player\\": {\\r\\n          \\"name\\": \\"David Beckham\\",\\r\\n          \\"teams\\": [{\\r\\n            \\"title\\": \\"Real Madrid\\"\\r\\n          }, ...]\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\nAs you can see with each query, we are getting only what we want. That\u2019s the power of GraphQL - flexibility. You don\u2019t need to create endpoints for different screens. Various clients can use a once defined schema in a way that they need to.\\r\\n\\r\\n\\r\\n## Fewer requests.\\r\\n\\r\\nIn traditional REST approach usually, there are many GET requests to show data on one screen. It\u2019s not super efficient when it comes to mobile apps - it slows them down and needs more internet data transfer. GraphQL allows a user to create only one endpoint. Thanks to technology introduced by Facebook engineers communication between client and a server is better optimised.\\r\\n\\r\\n\\r\\n## Query language\\r\\n\\r\\nThe most important feature of GraphQL is that it\u2019s language agnostic. It\u2019s not created to work with specific technology. It\u2019s a query language with its own rules which for most popular programming languages. There\u2019re many supportive libraries on the internet for: C#/.NET, PHP. Javascript, Java, Python, Ruby and many more.\\r\\n\\r\\n\\r\\n## Summary\\r\\n\\r\\nGraphQL is a query language and runtime that we can use to build and expose APIs as a strongly-typed schema instead of hundreds of REST endpoints. Your clients see the schema. They write a query for what they want. They send it over and get back exactly the data they asked for and nothing more. GrapqhQL advantages:\\r\\n\\r\\n- fewer data and requests for mobile apps,\\r\\n- simplicity and visible API structure\\r\\n- can be used with many technologies\\r\\n- is used by Twitter, Facebook, Github and many more","data":{"title":"GraphQL newbie tutorial - introduction","date":"2018-10-31T10:23:04.284Z","author":"Robert"},"path":"GraphQL-newbie-tutorial-introduction","images":{}},{"content":"\\r\\n## Introduction\\r\\n\\r\\nHello, today I will write a little bit about tooling. 2 weeks ago I thought about starting this blog. I asked my friend who blogs what blog engine should I use. His answer was rather suprising as he told me I should have used static website and commit blog posts as pull requests to it :O.\\r\\n\\r\\n## Searching for the perfect solution\\r\\n\\r\\nSo, I started exploring the internet to find the best blog layout ( reactjs ) tool to write my static blog. I was able to dig out `gatsby starter blog` from hundreds of chinese repos which github is flooded with right now. At the moment I created this blog I had no experience with Gatsby ecosystem but it looked promising for me.\\r\\n\\r\\n## Running\\r\\n\\r\\nRunning this kind of gatsby package required me only to install `gatsby-cli` and run command `gatsby develop`. Pretty easy? Huh?\\r\\n\\r\\n## Modifications\\r\\n\\r\\nI decided to add some tweaks to this simple blog package as it was really pure blog with one author. So to add other authors( who I don\'t have yet :( ) I added authors folder, so to add you as an author you need to create folder with your name and create `index.js` file with this kind of content inside it:\\r\\n\\r\\n```js\\r\\nexport const Artur = {\\r\\n  photo: require(\'./Artur.jpeg\'),\\r\\n  desc:\\r\\n    \'GraphQL passionate. Code generation guru. Short code lover. Father. CTO. CEO.\',\\r\\n  name: \'Artur Czemiel\',\\r\\n  email: \'aexol@aexol.com\',\\r\\n}\\r\\n```\\r\\n\\r\\nand add of course this line to `authors/index.js` :\\r\\n\\r\\n```js\\r\\nimport { Artur } from \'./Artur\'\\r\\nexport const Authors = {\\r\\n  Artur,\\r\\n}\\r\\n```\\r\\n\\r\\nLater on you can use it inside your blogpost.\\r\\n\\r\\n## How to add your blog post\\r\\n\\r\\nAdding your blog post is pretty easy though. Again you have to create a folder inside pages folder with blog post slug like `my-very-interesting-article`. Add an `index.md` file to it with this kind of header which is formatted by `graymatter` package then:\\r\\n```yaml\\r\\n---\\r\\ntitle: My very interesting article\\r\\ndate: \'2018-10-27T13:23:04.284Z\'\\r\\nauthor: Artur\\r\\n---\\r\\n```\\r\\n\u0142\\r\\nThat\'s it. After writing article you just submit pull request to your fork. I merge the pull request and publish your article to website.\\r\\n\\r\\n## Publish tools\\r\\n\\r\\nSometimes I am kinda lazy person. I added small publish CLI to this project, which automatically using `opn` opens browser with prefilled url and title fields for: `reddit` `LinkedIn` `twitter` `hackernews`. So it is much easier to share your blog posts from this blog. It lives in `bin/index.js` folder of this blog and uses `yargs` and `inquirer` and `graymatter` which I mentioned before.\\r\\n\\r\\n![publishTools.gif](publishTools.gif)\\r\\n\\r\\nAfter that it opens a window so I can post on reddit. Simple and beautiful!\\r\\n\\r\\n![redditpost.png](redditpost.png)\\r\\n\\r\\n## Your support\\r\\n\\r\\nIf you want to support me just star GraphqlBlog repo. The link is in the navigation bar. Of course you can write your own article here and submit a pull request. I promise I will improve the bloggin system to be the best open source blog in the world ; ).","data":{"title":"Blog publish tools inside gatsby blog","date":"2018-10-27T12:23:04.284Z","author":"Artur"},"path":"blog-publish-tools-inside-gatsby-blog","images":{"publishTools.gif":{"width":1308,"height":638,"webpPath":"publishTools.webp","optimizedPath":"publishTools.optimized.gif.png"},"publishTools.optimized.gif.png":{"width":600,"height":293,"webpPath":"publishTools.optimized.gif.webp","optimizedPath":"publishTools.optimized.gif.optimized.png"},"redditpost.optimized.png":{"width":600,"height":280,"webpPath":"redditpost.optimized.webp","optimizedPath":"redditpost.optimized.optimized.png"},"redditpost.png":{"width":1798,"height":838,"webpPath":"redditpost.webp","optimizedPath":"redditpost.optimized.png"}}},{"content":"\\r\\nA story about one [Diagram](https://github.com/slothking-online/diagram)\\r\\n\\r\\nwith a [Live Demo](https://demo.graphqleditor.com/)\\r\\n\\r\\n## How it looks\\r\\n\\r\\n![GraphQL editor example diagram](newdiagram.png)\\r\\n\\r\\n## Introduction\\r\\n\\r\\nHello again. Today I am going to present my journey with node diagrams. I used to love them when I was working as a VFX scripter 8 years ago especially Maya dependency graph. For years as a Frontend developer I had been looking for totally abstracted way of creating visual diagram. After that I have not found satysfying solution, this year I decided to write my own library for that\\r\\n\\r\\n## First Version\\r\\n\\r\\nFirst version was based on react DOM Nodes!\\r\\n\\r\\n![](https://media.giphy.com/media/kKdgdeuO2M08M/giphy.gif)\\r\\n\\r\\nYeah it was a crazy idea. However, ux handled by dom was cool and the overall experience satysfying.... with 30 nodes. With bigger number of nodes things started getting slower and slower.\\r\\n\\r\\n## Going canvas\\r\\n\\r\\nAfter trying many possible optimizations I decided again to rewrite everything( almost! as space bar menu looks cool in react(for now)). Also leaving some components in react gives me an opportunity to find contributors for this project. Now the performance of it is stunning. I don\'t know why it was so slow on DOM engine?\\r\\n\\r\\n## Abstracting the renderer\\r\\n\\r\\nRight now I am keeping the diagram data inside state and renderer separatly. That means you can write another renderer for example Augmented Reality renderer and it should just work with drawing functions only. How? Because all the picking is done inside ts functions and its not connected to for example canvas pixel color.\\r\\n\\r\\n## How it works\\r\\n\\r\\n```tsx\\r\\nimport { Graph } from \'@slothking-online/diagram\'\\r\\nimport * as React from \'react\'\\r\\nlet allCategories = [\\r\\n  {\\r\\n    name: \'middlewares\',\\r\\n    items: [\\r\\n      {\\r\\n        name: \'middleware\',\\r\\n        type: \'middleware\',\\r\\n        inputs: [\\r\\n          {\\r\\n            name: \'\',\\r\\n          },\\r\\n        ],\\r\\n        outputs: [\\r\\n          {\\r\\n            name: \'\',\\r\\n          },\\r\\n        ],\\r\\n      },\\r\\n    ],\\r\\n  },\\r\\n]\\r\\n\\r\\nexport const MyGraphComponent = () => (\\r\\n  <Graph\\r\\n    serialize={(nodes, links, tabs) => {\\r\\n      // Do whatever you want with node data from diagram\\r\\n    }}\\r\\n    categories={allCategories}\\r\\n  />\\r\\n)\\r\\n```\\r\\n\\r\\nSo you can use it inside any React JS/TS application\\r\\n\\r\\n## Support Me!\\r\\n\\r\\nIf you like my Idea and want to support me, please give me a star or even contribute to my projects!\\r\\n\\r\\n[Diagram](https://github.com/slothking-online/diagram)\\r\\n\\r\\n[Editor](https://github.com/slothking-online/graphql-editor)","data":{"title":"Canvas node graph in typescript","date":"2018-10-26T13:23:04.284Z","author":"Artur"},"path":"canvas-node-graph-in-typescript","images":{"newdiagram.optimized.png":{"width":600,"height":363,"webpPath":"newdiagram.optimized.webp","optimizedPath":"newdiagram.optimized.optimized.png"},"newdiagram.png":{"width":1631,"height":988,"webpPath":"newdiagram.webp","optimizedPath":"newdiagram.optimized.png"}}},{"content":"\\r\\nToday I am writing about faking data again using [ts-api-faker](https://github.com/slothking-online/ts-api-faker) . Usually we pass this kind of data to faker\\r\\n\\r\\n```json\\r\\n[\\r\\n  {\\r\\n    \\"name\\": \\"name.firstName\\",\\r\\n    \\"surname\\": \\"name.lastName\\",\\r\\n    \\"mail\\": \\"internet.email\\",\\r\\n    \\"profilePhoto\\": \\"internet.avatar\\",\\r\\n    \\"animalPhoto\\": \\"image.cat\\"\\r\\n  },\\r\\n  {\\r\\n    \\"name\\": \\"name.firstName\\",\\r\\n    \\"surname\\": \\"name.lastName\\",\\r\\n    \\"mail\\": \\"internet.email\\",\\r\\n    \\"profilePhoto\\": \\"internet.avatar\\",\\r\\n    \\"animalPhoto\\": \\"image.dog\\"\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\nand then we receive faked data\\r\\n\\r\\n```json\\r\\n[\\r\\n  {\\r\\n    \\"name\\": \\"Van\\",\\r\\n    \\"surname\\": \\"Veum\\",\\r\\n    \\"mail\\": \\"Corbin.Fritsch49@gmail.com\\",\\r\\n    \\"profilePhoto\\": \\"https://s3.amazonaws.com/uifaces/faces/twitter/pixage/128.jpg\\",\\r\\n    \\"animalPhoto\\": \\"https://source.unsplash.com/200x200/?cat\\"\\r\\n  },\\r\\n  {\\r\\n    \\"name\\": \\"Serena\\",\\r\\n    \\"surname\\": \\"Wilderman\\",\\r\\n    \\"mail\\": \\"Mariam_Thiel@hotmail.com\\",\\r\\n    \\"profilePhoto\\": \\"https://s3.amazonaws.com/uifaces/faces/twitter/imcoding/128.jpg\\",\\r\\n    \\"animalPhoto\\": \\"https://source.unsplash.com/200x200/?dog\\"\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\nIt works perfect but... Usually a schema looks like this.\\r\\n\\r\\n```json\\r\\n[\\r\\n  {\\r\\n    \\"name\\": \\"String\\",\\r\\n    \\"surname\\": \\"String\\",\\r\\n    \\"mail\\": \\"String\\",\\r\\n    \\"profilePhoto\\": \\"String\\",\\r\\n    \\"animalPhoto\\": \\"String\\"\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\nThe answer from faker is inappropriate then\\r\\n\\r\\n```json\\r\\n[\\r\\n  {\\r\\n    \\"name\\": \\"atque\\",\\r\\n    \\"surname\\": \\"eos\\",\\r\\n    \\"mail\\": \\"voluptas\\",\\r\\n    \\"profilePhoto\\": \\"similique\\",\\r\\n    \\"animalPhoto\\": \\"earum\\"\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\nWhat if you use levensthein algorithm on keys of values and transform values to the closest to key name option?\\r\\n\\r\\nAgain we pass\\r\\n\\r\\n```json\\r\\n[\\r\\n  {\\r\\n    \\"name\\": \\"String\\",\\r\\n    \\"surname\\": \\"String\\",\\r\\n    \\"mail\\": \\"String\\",\\r\\n    \\"profilePhoto\\": \\"String\\",\\r\\n    \\"animalPhoto\\": \\"String\\"\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\n\\r\\nVoila, we get the correct faker structure.\\r\\n\\r\\n```json\\r\\n[\\r\\n  {\\r\\n    \\"name\\": \\"Edgar\\",\\r\\n    \\"surname\\": \\"Alyce64\\",\\r\\n    \\"mail\\": \\"Eusebio.Gottlieb@yahoo.com\\",\\r\\n    \\"profilePhoto\\": \\"https://source.unsplash.com/200x200/?profile\\",\\r\\n    \\"animalPhoto\\": \\"https://source.unsplash.com/200x200/?animal\\"\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\n![Great Success](https://media.giphy.com/media/a0h7sAqON67nO/giphy.gif)\\r\\n\\r\\nI\'ve just added this feature to my repo [ts-api-faker](https://github.com/slothking-online/ts-api-faker)\\r\\n\\r\\nFeel free to contribute and extend this library functionality. If you support me and this idea please star this repo to help me get more contributors and extend ts-api-faker library.\\r\\n\\r\\nIn future we can add machine learning to this and get ultimate intelligent faker for our apis and databases :)","data":{"title":"Levensthein algorithm for better faker experience","date":"2018-10-21T11:23:04.284Z","author":"Artur"},"path":"levensthein-algorithm-for-better-faker-experience","images":{}},{"content":"\\r\\nMaking backend with nodejs and typescript is trendy nowadays. In this article I will show you the way how to make it type safe and totaly connected with frontend within a short period of time.\\r\\n\\r\\nTo make this kind of backend I have to use my open source experimental tool [slothking](https://slothking.online). First of all we will create a diagram for our backend. We will not use any extensions to make everything from scratch.\\r\\n\\r\\n1. Go to [Slothking App](https://slothking.online)\\r\\n2. Register.\\r\\n3. Click out this diagram\\r\\n\\r\\n![](imp.png)\\r\\n\\r\\nNow if you have it. Save this with some fancy name. then go to slothking cli repo. [Slothking CLI](https://github.com/slothking-online/sloth)\\r\\nDownload it and login.\\r\\n\\r\\n```bash\\r\\n$ sloth login username password\\r\\n```\\r\\n\\r\\nCreate mongodb with docker\\r\\n\\r\\n```bash\\r\\n$ docker run --rm -it -p 27017:27017 mongo:3\\r\\n```\\r\\n\\r\\nNext you have to clone backend starter or import it to your backend project it is up to you. If you want to procced with backend starter. Go ahead and download it\\r\\n\\r\\n```bash\\r\\n$ git clone https://github.com/slothking-online/backend-nodets-boilerplate\\r\\n$ cd backend-nodets-boilerplate\\r\\n$ npm install\\r\\n$ npm run dev\\r\\n```\\r\\n\\r\\nOpen another tab in terminal.\\r\\n\\r\\n```bash\\r\\n$ sloth nodets your-project-name src/generated.ts\\r\\n```\\r\\n\\r\\nIt will generate file with typeguard for your script hosting platform\\r\\n\\r\\n```tsx\\r\\nimport * as sloth from \'@slothking-online/node\'\\r\\nimport * as tg from \'typegoose\'\\r\\nimport { ObjectId } from \'bson\'\\r\\n\\r\\nexport type ImpType = {\\r\\n  _id?: ObjectId\\r\\n  code: string\\r\\n  hash?: string\\r\\n  name?: string\\r\\n}\\r\\nexport class Imp extends tg.Typegoose {\\r\\n  @tg.prop()\\r\\n  code: string\\r\\n  @tg.prop()\\r\\n  hash: string\\r\\n  @tg.prop()\\r\\n  name: string\\r\\n}\\r\\nexport const Models = () => ({\\r\\n  ImpModel: new Imp().getModelForClass(Imp),\\r\\n})\\r\\n\\r\\nconst slothking: {\\r\\n  simpleImpServer: {\\r\\n    name: string\\r\\n    middlewares: {}\\r\\n    endpoints: {\\r\\n      get: sloth.SlothkingEndpoint<\\r\\n        {\\r\\n          name?: string\\r\\n        },\\r\\n        {},\\r\\n        {\\r\\n          Imp: tg.InstanceType<Imp>\\r\\n        }\\r\\n      >\\r\\n      createOrUpdate: sloth.SlothkingEndpoint<\\r\\n        {\\r\\n          Imp?: ImpType\\r\\n        },\\r\\n        {},\\r\\n        {\\r\\n          Imp: tg.InstanceType<Imp>\\r\\n        }\\r\\n      >\\r\\n    }\\r\\n  }\\r\\n} = {\\r\\n  simpleImpServer: {\\r\\n    name: \'simpleImpServer\',\\r\\n    middlewares: {},\\r\\n    endpoints: {\\r\\n      get: {\\r\\n        path: \'get\',\\r\\n        middlewares: [],\\r\\n      },\\r\\n      createOrUpdate: {\\r\\n        path: \'createOrUpdate\',\\r\\n        middlewares: [],\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n}\\r\\nexport default slothking\\r\\n```\\r\\n\\r\\nSo you have type definitions and mongo generated. Lets start implementing our endpoints.\\r\\n\\r\\n1. Create a file src/implement.ts\\r\\n\\r\\n```ts\\r\\nimport generated, { Models, Imp } from \'./generated\'\\r\\nimport * as crypto from \'crypto\'\\r\\nimport { InstanceType } from \'typegoose\'\\r\\n\\r\\nconst models = Models()\\r\\n\\r\\nconst {\\r\\n  simpleImpServer: {\\r\\n    endpoints: { createOrUpdate, get },\\r\\n  },\\r\\n} = generated\\r\\n\\r\\ncreateOrUpdate.run = async props => {\\r\\n  const {\\r\\n    Imp: { code, hash, name },\\r\\n  } = props.context.arguments\\r\\n  let ImpInstance: InstanceType<Imp>\\r\\n  if (hash && name) {\\r\\n    ImpInstance = await models.ImpModel.findOneAndUpdate(\\r\\n      {\\r\\n        hash,\\r\\n      },\\r\\n      {\\r\\n        code,\\r\\n      },\\r\\n      {\\r\\n        new: true,\\r\\n      }\\r\\n    )\\r\\n  } else {\\r\\n    ImpInstance = await models.ImpModel.create({\\r\\n      name,\\r\\n      code,\\r\\n      hash: crypto.randomBytes(8).toString(\'hex\'),\\r\\n    })\\r\\n  }\\r\\n  return {\\r\\n    Imp: ImpInstance,\\r\\n  }\\r\\n}\\r\\nget.run = async props => {\\r\\n  const { name } = props.context.arguments\\r\\n  return {\\r\\n    Imp: await models.ImpModel.findOne({\\r\\n      name,\\r\\n    }),\\r\\n  }\\r\\n}\\r\\nexport { generated }\\r\\n```\\r\\n\\r\\nNow edit the src/index.ts file\\r\\n\\r\\n```ts\\r\\nimport run from \'@slothking-online/node\'\\r\\nimport { generated } from \'./implement\'\\r\\nexport default run([generated.simpleImpServer], process.env.MONGO)\\r\\n```\\r\\n\\r\\nNow you have fully working gist-like server, in next tutorial I will show you how to create CLI for this kind of gist server.\\r\\n","data":{"title":"Typescript backend with slothking - Imp Gist - The easiest implementation server","date":"2018-10-16T08:23:04.284Z","author":"Artur"},"path":"typescript-backend-with-slothking","images":{"imp.optimized.png":{"width":600,"height":283,"webpPath":"imp.optimized.webp","optimizedPath":"imp.optimized.optimized.png"},"imp.png":{"width":1227,"height":578,"webpPath":"imp.webp","optimizedPath":"imp.optimized.png"}}},{"content":"\\r\\nGetting started with React XP and faker is very easy. The final effect should look like this:\\r\\n\\r\\n![twitterfake.png](twitterfake.png)\\r\\n\\r\\nWhats nice about this app is the fact it is written in React XP. In this framework you get iOS, Android and tadadadam: Web. So you can just salut.\\r\\n![https://media.giphy.com/media/D2bHIKXoHzw8U/giphy.gif](https://media.giphy.com/media/D2bHIKXoHzw8U/giphy.gif)\\r\\n\\r\\nYou will need to install packages in this tutorial:\\r\\n\\r\\n[Create RX app](https://github.com/a-tarasyuk/create-rx-app). Worked for me in the first use!\\r\\n\\r\\n```bash\\r\\n$ npm install create-rx-app -g\\r\\n```\\r\\n\\r\\n[TS api faker](https://github.com/slothking-online/ts-api-faker). A small tool for receiving fake data from faker and unsplash.\\r\\n\\r\\n```bash\\r\\n$ git clone https://github.com/slothking-online/ts-api-faker\\r\\n$ cd ts-api faker\\r\\n$ npm install\\r\\n$ npm run build\\r\\n$ npm run start\\r\\n```\\r\\n\\r\\nSo faker is running now its high time to create your react XP very app!\\r\\n\\r\\n```tsx\\r\\nimport * as RX from \\"reactxp\\";\\r\\n\\r\\nconst _styles = {\\r\\n  twitts: RX.Styles.createViewStyle({\\r\\n    flexDirection: \\"column\\",\\r\\n    overflow:\'visible\',\\r\\n    alignSelf:\\"stretch\\",\\r\\n    flex:1,\\r\\n  }),\\r\\n  twitt: RX.Styles.createViewStyle({\\r\\n    padding: 10,\\r\\n    flexDirection: \\"row\\",\\r\\n    alignSelf:\\"stretch\\",\\r\\n  }),\\r\\n  text: RX.Styles.createViewStyle({\\r\\n    flexDirection: \\"column\\",\\r\\n    flex: 1,\\r\\n    alignSelf:\\"stretch\\",\\r\\n    marginLeft: 10,\\r\\n  }),\\r\\n  topline: RX.Styles.createViewStyle({\\r\\n    flexDirection: \\"row\\",\\r\\n    flexWrap:\\"wrap\\",\\r\\n    alignSelf:\\"stretch\\"\\r\\n  }),\\r\\n  username: RX.Styles.createTextStyle({\\r\\n    fontWeight: \\"bold\\",\\r\\n    fontSize:14\\r\\n  }),\\r\\n  acc: RX.Styles.createTextStyle({\\r\\n    color: \\"#aaa\\",\\r\\n    fontSize:14\\r\\n  }),\\r\\n  avatar: RX.Styles.createImageStyle({\\r\\n    width: 50,\\r\\n    height: 50,\\r\\n    borderRadius: 50\\r\\n  }),\\r\\n  sentence: RX.Styles.createTextStyle({\\r\\n    alignSelf: \\"stretch\\",\\r\\n    fontWeight: \\"normal\\",\\r\\n    fontSize:14\\r\\n  })\\r\\n};\\r\\ntype Twitt = {\\r\\n  name: string;\\r\\n  acc: string;\\r\\n  avatar: string;\\r\\n  twitt: string;\\r\\n  retwitts: string;\\r\\n  likes: string;\\r\\n  comments: string;\\r\\n};\\r\\nconst fakerPayload = () =>\\r\\n  ({\\r\\n    name: \\"internet.userName\\",\\r\\n    acc: \\"internet.userName\\",\\r\\n    avatar: \\"internet.avatar\\",\\r\\n    twitt: \\"lorem.sentence\\",\\r\\n    retwitts: \\"random.number\\",\\r\\n    likes: \\"random.number\\",\\r\\n    comments: \\"random.number\\"\\r\\n  } as Twitt);\\r\\nconst fakerQuery: Twitt[] = new Array(Math.floor(20 + Math.random() * 40))\\r\\n  .fill(1)\\r\\n  .map(fakerPayload);\\r\\n\\r\\ntype AppState = {\\r\\n  twitts: Twitt[];\\r\\n};\\r\\n\\r\\nexport class App extends RX.Component<{}, AppState> {\\r\\n  state: AppState = {\\r\\n    twitts: []\\r\\n  };\\r\\n  componentDidMount() {\\r\\n    fetch(\\"http://localhost:3000\\", {\\r\\n      method: \\"POST\\",\\r\\n      headers: {\\r\\n        \\"Content-Type\\": \\"application/json\\"\\r\\n      },\\r\\n      body: JSON.stringify(fakerQuery)\\r\\n    })\\r\\n      .then(response => response.json())\\r\\n      .then((twitts: Twitt[]) => {\\r\\n        this.setState({\\r\\n          twitts\\r\\n        });\\r\\n      });\\r\\n  }\\r\\n  public render() {\\r\\n    return (\\r\\n      <RX.View style={_styles.twitts}>\\r\\n        {this.state.twitts.map(t => (\\r\\n          <RX.View style={_styles.twitt} key={t.name}>\\r\\n            <RX.View>\\r\\n              <RX.Image style={_styles.avatar} source={t.avatar} />\\r\\n            </RX.View>\\r\\n            <RX.View style={_styles.text}>\\r\\n              <RX.View style={_styles.topline}>\\r\\n                <RX.Text style={_styles.username}>{t.name}</RX.Text>\\r\\n                <RX.Text style={_styles.acc}>{`@${t.acc}`}</RX.Text>\\r\\n              </RX.View>\\r\\n              <RX.Text style={_styles.sentence}>{t.twitt}</RX.Text>\\r\\n            </RX.View>\\r\\n          </RX.View>\\r\\n        ))}\\r\\n      </RX.View>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\nYou see? There is nothing to explain, but lets go with most logical part of it.\\r\\n\\r\\n```tsx\\r\\nconst fakerPayload = () =>\\r\\n  ({\\r\\n    name: \\"internet.userName\\",\\r\\n    acc: \\"internet.userName\\",\\r\\n    avatar: \\"internet.avatar\\",\\r\\n    twitt: \\"lorem.sentence\\",\\r\\n    retwitts: \\"random.number\\",\\r\\n    likes: \\"random.number\\",\\r\\n    comments: \\"random.number\\"\\r\\n  } as Twitt);\\r\\nconst fakerQuery: Twitt[] = new Array(Math.floor(20 + Math.random() * 40))\\r\\n  .fill(1)\\r\\n  .map(fakerPayload);\\r\\n  ```\\r\\n\\r\\n  So we are using faker nodes like `internet.userName` here. Then we generate Array with random length fill it with numbers so we can perform map on it and generating payload with fakerPayload function. ","data":{"title":"Twitter clone with React XP and faker","date":"2018-10-15T11:23:04.284Z","author":"Artur"},"path":"twitter-clone-with-reactxp-and-faker","images":{"twitterfake.optimized.png":{"width":600,"height":905,"webpPath":"twitterfake.optimized.webp","optimizedPath":"twitterfake.optimized.optimized.png"},"twitterfake.png":{"width":634,"height":956,"webpPath":"twitterfake.webp","optimizedPath":"twitterfake.optimized.png"},"twittyios.optimized.png":{"width":600,"height":1194,"webpPath":"twittyios.optimized.webp","optimizedPath":"twittyios.optimized.optimized.png"},"twittyios.png":{"width":872,"height":1736,"webpPath":"twittyios.webp","optimizedPath":"twittyios.optimized.png"}}},{"content":"\\r\\nHave you ever wondered to visualise your GraphQL schema? How it looks as a tree structure?\\r\\n\\r\\nExplaining schema would be much easier on visual like graph. So you can easily see points where you can optimise it.\\r\\n\\r\\n```graphql\\r\\ninput CatReadInput {\\r\\n  id: ID\\r\\n}\\r\\n\\r\\ninput CatCreateInput {\\r\\n  name: String\\r\\n  Age: Int\\r\\n}\\r\\n\\r\\ninput CatUpdateInput {\\r\\n  name: String\\r\\n  Age: Int\\r\\n  id: ID\\r\\n}\\r\\n\\r\\ninput CatRemoveInput {\\r\\n  id: ID\\r\\n}\\r\\n\\r\\ntype Cat {\\r\\n  id: ID\\r\\n  name: String\\r\\n  Age: Int\\r\\n}\\r\\n\\r\\ntype Query {\\r\\n  listCat: [Cat]\\r\\n  readCat(Cat: CatReadInput): Cat\\r\\n}\\r\\n\\r\\ntype Mutation {\\r\\n  createCat(Cat: CatCreateInput): Cat\\r\\n  updateCat(Cat: CatUpdateInput): Cat\\r\\n  removeCat(Cat: CatRemoveInput): Cat\\r\\n}\\r\\n\\r\\nschema {\\r\\n  query: Query\\r\\n  mutation: Mutation\\r\\n}\\r\\n```\\r\\n\\r\\nPresenting this kind of text document wouldn\'t mean anything to sales or business person. However presenting visual diagram out of it helps them understand the whole data model\\r\\n\\r\\n![schema.png](schema.png)\\r\\n\\r\\nYou can create those schemas just by uploading file or url to [GraphQL Editor](https://graphqleditor.com)","data":{"title":"Visualise your graphql schema","date":"2018-10-12T22:00:03.284Z","author":"Artur"},"path":"visualise-graphql-schema","images":{"schema.optimized.png":{"width":600,"height":508,"webpPath":"schema.optimized.webp","optimizedPath":"schema.optimized.optimized.png"},"schema.png":{"width":1087,"height":921,"webpPath":"schema.webp","optimizedPath":"schema.optimized.png"}}}]'),L=r(70126),G=new P.Z(q,{keys:["data.title","content"]}),T=function(e){var t=e.search,r=G.search(t.get());return(0,i.jsx)("main",{className:"grid w-full place-content-center mt-16 p-4 lg:p-0 dark:bg-gray-800 dark:text-white",children:(0,i.jsx)("div",{className:"grid grid-cols-1 auto-rows-min sm:pt-4 gap-4 max-w-xl place-content-start",style:{height:3e3},children:r.slice(0,10).map((function(e){return(0,i.jsx)("div",{onClick:function(){return t.set("")},children:(0,i.jsx)(L.Z,{article:e.item,hideImage:!0})})}))})})};function Q(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function S(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Q(Object(r),!0).forEach((function(t){(0,a.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Q(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var A=function(){return(0,i.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"54.737",height:"50",fill:"none",viewBox:"0 0 52 57",children:[(0,i.jsx)("path",{fill:"url(#paint0_linear)",d:"M48.626 12.16L28.419.719a5.57 5.57 0 00-5.474 0L2.74 12.159C1.046 13.12 0 14.893 0 16.81v22.88a5.356 5.356 0 002.739 4.652l20.206 11.438a5.555 5.555 0 005.474 0L48.626 44.34a5.356 5.356 0 002.738-4.653V16.81c0-1.917-1.046-3.69-2.738-4.65zM6.52 29.3a1.395 1.395 0 01-.462-1.05c0-.409.167-.792.459-1.052l8.275-7.35a2.93 2.93 0 01-.185-1.025c0-1.645 1.36-2.98 3.037-2.98 1.678 0 3.036 1.335 3.036 2.98 0 1.642-1.358 2.978-3.036 2.978-.474 0-.92-.105-1.323-.298l-7.593 6.744 6.648 5.907a4.19 4.19 0 00-1.528 1.656L6.52 29.3zm14.032 7.522c.084.271.128.558.128.856 0 1.645-1.358 2.978-3.036 2.978s-3.037-1.333-3.037-2.978c0-.362.066-.707.185-1.026a3.01 3.01 0 011.532-1.657 3.063 3.063 0 011.666-.275l12.837-15.044a2.896 2.896 0 01-.131-.856c0-1.642 1.362-2.978 3.04-2.978 1.677 0 3.036 1.336 3.036 2.978 0 .365-.069.716-.19 1.037a3.014 3.014 0 01-1.536 1.652 3.114 3.114 0 01-1.656.271L20.552 36.822zm24.295-7.523l-8.266 7.341c.125.325.19.673.19 1.038 0 1.645-1.358 2.978-3.036 2.978-1.677 0-3.04-1.333-3.04-2.978 0-1.645 1.363-2.978 3.04-2.978.471 0 .915.105 1.314.29l7.587-6.74-6.642-5.9a4.2 4.2 0 001.535-1.654l7.318 6.502c.29.26.46.643.46 1.052 0 .41-.17.792-.46 1.05z"}),(0,i.jsx)("defs",{children:(0,i.jsxs)("linearGradient",{id:"paint0_linear",x1:"25.682",x2:"-28.882",y1:"-27.319",y2:"23.977",gradientUnits:"userSpaceOnUse",children:[(0,i.jsx)("stop",{stopColor:"#0091FF"}),(0,i.jsx)("stop",{offset:"1",stopColor:"#5D2EEB"})]})})]})},I=(0,w.eK)(""),x=function(e){var t=e.children,r=(0,n.Z)(e,["children"]),a=(0,w.eJ)(I),o=(0,w.eJ)(!1);return(0,i.jsxs)("div",{children:[(0,i.jsx)(m,S({},r)),(0,i.jsx)("header",{children:o.get()?(0,i.jsxs)(g,{children:[(0,i.jsx)(k,{search:a,focus:!0}),(0,i.jsx)("button",{className:"text-lg pl-4 dark:text-white",onClick:function(){return o.set(!1)},children:"\u2716"})]}):(0,i.jsxs)(g,{children:[(0,i.jsx)(s.default,{href:"/",children:(0,i.jsx)("a",{title:"Home",children:(0,i.jsx)(A,{})})}),(0,i.jsx)(k,{search:a,className:"ml-4 hidden sm:inline-block"}),(0,i.jsxs)("div",{children:[(0,i.jsx)("button",{className:"text-lg dark:text-white sm:hidden",onClick:function(){return o.set(!0)},children:"\ud83d\udd0e\ufe0e"}),(0,i.jsx)(z,{}),(0,i.jsx)(u.Z,{linkTo:"https://graphqleditor.com",className:"hidden lg:inline-block",children:"Try GraphQL Editor"})]})]})}),a.get()?(0,i.jsx)(T,{search:a}):t,(0,i.jsx)("footer",{})]})}},54389:function(e,t){t.Z={Artur:{key:"Artur",photo:"Artur",description:"GraphQL passionate. Code generation guru. Short code lover. Father. CTO. CEO",name:"Artur Czemiel",email:"artur@graphqleditor.com",twitter:"ACzemiel"},Robert:{key:"Robert",photo:"robertProfile",description:"Head of Growth, Growth Hacking passionate. Tech Business Developer.  He loves cooking and bike riding",name:"Robert Matyszewski",email:"robert@graphqleditor.com",twitter:"iamrobmat"},Tomek:{key:"Tomek",photo:"tomekProfile",description:"GraphQL enthusiast. Magic the Gathering fanatic. Pizza monster",name:"Tomek Poniatowicz",email:"tomek@graphqleditor.com",twitter:"TomPoniat"},Ola:{key:"Ola",photo:"ola",description:"Content Manager at Divante",name:"Aleksandra Kwiecie\u0144",email:"akwiecien@divante.co"},Michal:{key:"Michal",photo:"mic",description:"GraphQL enthusiast & LA Lakers hardcore fan",name:"Micha\u0142 Tyszkiewicz",email:"hello@graphqleditor.com"},Adrian:{key:"Adrian",photo:"Adrian",description:"All things JavaScript. Throws knowledge at himself and see if anything sticks. No success so far. Sucker for MMA & BJJ. Front-End Developer at Useo",name:"Adrian Pilarczyk",email:"adrian@useo.pl"},Carl:{key:"Carl",photo:"carl",description:"Guest blog post. Want to publish you blog post on GraphQL Editor Blog? Contact us!",name:"Carl Matte",email:"tomek@graphqleditor.com",twitter:"graphqleditor"},Infotech:{key:"Infotech",photo:"infotech",description:"Technical Secondary School of Programming",name:"Infotech",email:"kontakt@infotech.edu.pl"},Jakub:{key:"Jakub",photo:"kuba",description:"GraphQL enthusiast & music nerd",name:"Jakub Chomko",email:"hello@graphqleditor.com"}}},40338:function(e,t,r){function a(e){return e.replace(/#|\*|\[|\]|_|(\(.*\))/g,"")}r.d(t,{Z:function(){return a}})},69829:function(e,t,r){function a(e,t){var r,a=null===(r=t.images[e])||void 0===r?void 0:r.webpPath;return a?"/articles/".concat(t.path,"/").concat(a):void 0}function n(e,t){var r,a=null===(r=t.images[e])||void 0===r?void 0:r.optimizedPath;return a?"/articles/".concat(t.path,"/").concat(a):i(e,t)}function i(e,t){return null!==e&&void 0!==e&&e.startsWith("/media")?e:e?"/articles/".concat(t.path,"/").concat(e):"/fallback_splash.jpg"}function o(e,t){var r=t.images[e]||{},a=r.width,n=void 0===a?600:a,i=r.height;return{width:n,height:void 0===i?300:i}}function s(e){return{png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",jfif:"image/jpeg",pjpeg:"image/jpeg",pjp:"image/jpeg",gif:"image/gif"}[e.split(".")[e.length-1]]}function p(e,t){return{size:o(e,t),srcWebp:a(e,t),src:n(e,t),srcOriginal:i(e,t),type:s(e)}}r.d(t,{WE:function(){return a},zk:function(){return n},ls:function(){return s},bC:function(){return p}})}}]);